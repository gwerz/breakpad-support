MODULE mac x86 3065DE6531CE839C7CB5B6DD70E03F4F0 DesktopServicesPriv
PUBLIC 1828 0 InitializeCatalog
PUBLIC 1832 0 NodeContextOpen
PUBLIC 1a50 0 InitializeLocks()
PUBLIC 1a92 0 TNodeMonitor::InitializeLock()
PUBLIC 1ade 0 TTaskMonitor::InitializeLock()
PUBLIC 1b26 0 TPropertyMonitor::InitializeLock()
PUBLIC 1b6e 0 TCopyErrorMonitor::InitializeLock()
PUBLIC 1bd0 0 TiDiskMonitor::InitializeLock()
PUBLIC 1c18 0 TNotifier::GetTickleLock()
PUBLIC 1cb0 0 TDSMutex::Acquire()
PUBLIC 1cba 0 InitializeDebugFlags()
PUBLIC 1d12 0 TSystemNotificationTask::TSystemNotificationTask()
PUBLIC 1d28 0 TSystemNotificationTask::Run()
PUBLIC 1d9c 0 TSystemNotificationTask::SystemNotificationTaskProc(void*)
PUBLIC 1e24 0 TNode::SetMainRunloop(__CFRunLoop*)
PUBLIC 1e38 0 TNode::GetMainRunloop()
PUBLIC 1e4a 0 TFSEventsNotificationTask::TFSEventsNotificationTask()
PUBLIC 1e60 0 TFSEventsNotificationTask::Run()
PUBLIC 1eb8 0 TFSEventsNotificationTask::FSEventsNotificationTaskProc(void*)
PUBLIC 1fa8 0 RegisterForComputerNameChanges()
PUBLIC 20d6 0 RegisterForIDiskChanges()
PUBLIC 226a 0 TChildrenList::GetIteratorLock()
PUBLIC 230c 0 TNode::GetBootNode()
PUBLIC 24be 0 TNodePtr::TNodePtr()
PUBLIC 24cc 0 TNode::GetBootVRefNum()
PUBLIC 24fc 0 THFSPlusRef::GetBootRefNum()
PUBLIC 252c 0 TMountPointList::Find(short, TNode::StPopulating*)
PUBLIC 25b4 0 TMountPointList::FindButDontSynchronize(short, TNode::StPopulating*)
PUBLIC 269e 0 TNode::GetSuperRootNode()
PUBLIC 2802 0 TUString::TUString(char const*, unsigned long)
PUBLIC 2832 0 TUString::TUString(__CFString const*, bool)
PUBLIC 283c 0 TUString::operator=(TUString const&)
PUBLIC 287c 0 TUString::~TUString()
PUBLIC 2894 0 TUString::CopyToHFSUniStr255(HFSUniStr255*) const
PUBLIC 2904 0 TNode::TNode(TNode*)
PUBLIC 290e 0 THFSPlusRef::THFSPlusRef()
PUBLIC 2976 0 TNodePtr::TNodePtr(TNode*)
PUBLIC 299a 0 TNodePtr::operator=(TNodePtr const&)
PUBLIC 29e2 0 TNodePtr::~TNodePtr()
PUBLIC 29fa 0 TNode::RemovePtrReference()
PUBLIC 2a7a 0 TNode::SetVirtualNode(HFSUniStr255 const&, bool, OpaqueIconRef*)
PUBLIC 2af6 0 THFSPlusRef::SetVirtualNode(HFSUniStr255 const&, bool, bool)
PUBLIC 2bc0 0 NewHFSUniStr255(HFSUniStr255 const&)
PUBLIC 2c1e 0 THFSPlusRef::Reset()
PUBLIC 2c92 0 TNode::SetAliasTarget(TNodePtr const&, bool)
PUBLIC 2d52 0 THFSPlusRef::IsAlias() const
PUBLIC 2d74 0 TNode::SetIconRef(OpaqueIconRef* const&)
PUBLIC 2dc8 0 TNode::CreateTypeSpecificData()
PUBLIC 2e34 0 TChildrenList::TChildrenList(TNode const*)
PUBLIC 2e3e 0 TCountedPtr<TNodeQueryDataRecord>::operator=(TCountedPtr<TNodeQueryDataRecord> const&)
PUBLIC 2e82 0 TNode::StPopulating::StPopulating(TNode const*, TNode::StPopulating*)
PUBLIC 2e8c 0 TDSMutex::Release()
PUBLIC 2e96 0 TNode::GetChildren() const
PUBLIC 2eee 0 TChildrenList::begin()
PUBLIC 2f04 0 TChildrenList::GetChildrenListRecord() const
PUBLIC 2f40 0 TChildListRecord::TChildListRecord()
PUBLIC 2fd0 0 std::allocator<TNode*>::allocator()
PUBLIC 2fd6 0 std::vector<TNode*, std::allocator<TNode*> >::vector(std::allocator<TNode*> const&)
PUBLIC 2fe0 0 std::_Vector_base<TNode*, std::allocator<TNode*> >::_Vector_base(std::allocator<TNode*> const&)
PUBLIC 2fea 0 std::_Vector_base<TNode*, std::allocator<TNode*> >::_Vector_impl::_Vector_impl(std::allocator<TNode*> const&)
PUBLIC 301e 0 std::allocator<TNode*>::allocator(std::allocator<TNode*> const&)
PUBLIC 3024 0 TChildrenList::end()
PUBLIC 303a 0 bool __gnu_cxx::operator!=<TNode**, std::vector<TNode*, std::allocator<TNode*> > >(__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > > const&, __gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > > const&)
PUBLIC 3050 0 TNode::StPopulating::~StPopulating()
PUBLIC 305a 0 LockGetVolumeInfo(short, unsigned long, short*, unsigned long, FSVolumeInfo*, FSRef*)
PUBLIC 30d2 0 THFSPlusRef::Initialize(FSRef const&)
PUBLIC 3178 0 LockGetCatalogInfo(FSRef const&, unsigned long, FSCatalogInfo*, HFSUniStr255*, FSSpec*, FSRef*)
PUBLIC 31e8 0 THFSPlusRef::Set(FSRef const&, HFSUniStr255 const*, short, unsigned long, bool, unsigned long, FSCatalogInfo*)
PUBLIC 3874 0 THFSPlusRef::SetTypeInfo(unsigned long, FSCatalogInfo*, bool) const
PUBLIC 3e22 0 CopyHFSUniStr255(HFSUniStr255 const&, HFSUniStr255&)
PUBLIC 3e62 0 THFSPlusRef::GetFSRef() const
PUBLIC 40f0 0 LockLSCopyItemInfoForRefInfo(LSExtendedFSRefInfo const*, unsigned long, LSItemInfoRecord*)
PUBLIC 4148 0 FSPermissions::GetMode() const
PUBLIC 4154 0 FSPermissions::GetOwnerID() const
PUBLIC 415e 0 FSPermissions::GetUserGroupID() const
PUBLIC 416a 0 FSPermissions::GetUserAccess() const
PUBLIC 4176 0 THFSPlusRef::SetIfHidden()
PUBLIC 42aa 0 THFSPlusRef::SetDisplayName(unsigned long, FSCatalogInfo&)
PUBLIC 4330 0 THFSPlusRef::GetDistinctDisplayName(unsigned long, FSCatalogInfo*, HFSUniStr255&) const
PUBLIC 4488 0 LockLSCopyItemAttributeForRefInfo(LSExtendedFSRefInfo const*, unsigned long, __CFString const*, void const**)
PUBLIC 44e6 0 THFSPlusRef::UpdateFromCatalogInfo(unsigned long, FSCatalogInfo&)
PUBLIC 49c6 0 THFSPlusRef::SetIfExtensionHidden(unsigned long, FSCatalogInfo&)
PUBLIC 4a80 0 THFSPlusRef::InitializeBasicData()
PUBLIC 4aa2 0 THFSPlusRef::Fetch(unsigned long) const
PUBLIC 4b58 0 THFSPlusRef::GetCatalogInfo(unsigned long, FSCatalogInfo*, HFSUniStr255*) const
PUBLIC 4bc6 0 TNode::SetRootRef(THFSPlusRef const&)
PUBLIC 4bd8 0 THFSPlusRef::operator=(THFSPlusRef const&)
PUBLIC 51e8 0 THFSPlusCatalog::THFSPlusCatalog(TNode*, short, FSVolumeInfo const&)
PUBLIC 51f8 0 LockGetCatalogInfoByName(short, unsigned long, unsigned long, unsigned short const*, unsigned long, FSCatalogInfo*, FSRef*)
PUBLIC 5270 0 TNode::SetCatalog(THFSPlusCatalog*)
PUBLIC 52e2 0 THFSPlusRef::IsVolume() const
PUBLIC 52f4 0 TNode::IsVolumeiDisk(short)
PUBLIC 534a 0 TNode::iToolsMemberName()
PUBLIC 541e 0 TUString::TUString(TUString const&)
PUBLIC 5448 0 THFSPlusCatalog::RecalculateFreeSpaceAndCapacity() const
PUBLIC 5540 0 THFSPlusCatalog::GetVolumeParent(TNodePtr&) const
PUBLIC 55d6 0 THFSPlusCatalog::SystemBuildVersion()
PUBLIC 57e0 0 TUString::TUString()
PUBLIC 57ee 0 TNode::GetPathName(TUString&, bool, bool) const
PUBLIC 58a4 0 TNode::AsFullPOSIXPath(unsigned long, unsigned long&, unsigned short*&) const
PUBLIC 5b40 0 TNodePtr::TNodePtr(TNodePtr const&)
PUBLIC 5b66 0 TUString::TUString(long, unsigned short const*)
PUBLIC 5b8e 0 TUString::Append(TUString const&)
PUBLIC 5c26 0 TUString::Length() const
PUBLIC 5c40 0 NewHFSUniStr255(__CFString const*)
PUBLIC 5cd6 0 TChildrenList::insert(__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >, TNode*)
PUBLIC 5d00 0 std::vector<TNode*, std::allocator<TNode*> >::insert(__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >, TNode* const&)
PUBLIC 5d94 0 std::vector<TNode*, std::allocator<TNode*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >, TNode* const&)
PUBLIC 5f0a 0 std::vector<TNode*, std::allocator<TNode*> >::size() const
PUBLIC 5fba 0 void std::_Destroy<__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >, std::allocator<TNode*> >(__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >, __gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >, std::allocator<TNode*>)
PUBLIC 5fe4 0 THFSPlusCatalog::GetExtendedPropertyStoreForContainer(TNodePtr const&) const
PUBLIC 604a 0 THFSPlusRef::IsContainer() const
PUBLIC 6060 0 THFSPlusRef::GetFileSystemID() const
PUBLIC 607a 0 THFSPlusCatalog::GetExtendedPropertyStore(unsigned long) const
PUBLIC 628c 0 TPropertyMonitor::TPropertyMonitor()
PUBLIC 62d0 0 THashTable<long long, THFSPlusPropertyStore*>::find(long long const&)
PUBLIC 63c4 0 TPropertyMonitor::~TPropertyMonitor()
PUBLIC 6408 0 LockMakeDirectoryFSRef(short, unsigned long, FSRef*)
PUBLIC 6462 0 TFSInfo::TFSInfo()
PUBLIC 646c 0 TFSCatalogInfo::TFSCatalogInfo()
PUBLIC 6492 0 TFSInfo::Initialize(FSRef const&, unsigned long const&)
PUBLIC 6520 0 TFSInfo::Initialize(FSRef const&, FSRef const&, HFSUniStr255 const&, FSCatalogInfo const&, unsigned long)
PUBLIC 664a 0 TFSCatalogInfo::TFSCatalogInfo(FSCatalogInfo const&)
PUBLIC 666c 0 TFSCatalogInfo::operator=(TFSCatalogInfo const&)
PUBLIC 66c8 0 TFSCatalogInfo::~TFSCatalogInfo()
PUBLIC 66d2 0 THFSPlusPropertyStore::THFSPlusPropertyStore(TFSInfo&)
PUBLIC 66de 0 TFSInfo::TFSInfo(TFSInfo const&)
PUBLIC 66e8 0 THashTable<long long, THFSPlusPropertyStore*>::operator[](long long const&)
PUBLIC 67dc 0 THashTable<long long, THFSPlusPropertyStore*>::reserve(unsigned long)
PUBLIC 6aea 0 THashTable<long long, THFSPlusPropertyStore*>::hash_increment(long long const&) const
PUBLIC 6b1a 0 TFSInfo::~TFSInfo()
PUBLIC 6b24 0 THFSPlusPropertyStore::GetProperties(bool) const
PUBLIC 6b7c 0 THFSPlusPropertyStore::Open(bool, bool) const
PUBLIC 6cde 0 TPropertyInfoList::TPropertyInfoList()
PUBLIC 6ce8 0 std::allocator<TPropertyInfo*>::allocator()
PUBLIC 6cee 0 std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> >::vector(std::allocator<TPropertyInfo*> const&)
PUBLIC 6cf8 0 std::_Vector_base<TPropertyInfo*, std::allocator<TPropertyInfo*> >::_Vector_base(std::allocator<TPropertyInfo*> const&)
PUBLIC 6d02 0 std::_Vector_base<TPropertyInfo*, std::allocator<TPropertyInfo*> >::_Vector_impl::_Vector_impl(std::allocator<TPropertyInfo*> const&)
PUBLIC 6d36 0 std::allocator<TPropertyInfo*>::allocator(std::allocator<TPropertyInfo*> const&)
PUBLIC 6d3c 0 std::allocator<TPropertyInfo*>::~allocator()
PUBLIC 6d44 0 TMountPointList::SupportsInvisibleBit(short, TNode::StPopulating*, bool)
PUBLIC 6dba 0 THFSPlusCatalog::SupportsInvisibleBit() const
PUBLIC 6dc6 0 TFSInfo::Mode() const
PUBLIC 6de2 0 TFSInfo::GetOwnerID() const
PUBLIC 6df2 0 THFSPlusCatalog::HasPersistentStores(unsigned long, unsigned long) const
PUBLIC 6e32 0 TPropertyInfo::CreatePropertyList(FSRef const*, UTCDateTime&, bool, bool, TPropertyInfoList*)
PUBLIC 716e 0 TPropertyInfo::GetPropertyStoreName()
PUBLIC 733e 0 TFSInfo::IsVisible() const
PUBLIC 7356 0 TFSInfo::DataForkName()
PUBLIC 73b0 0 TPropertyInfo::MakeProperties(TPropertyInfoList*, unsigned char*, unsigned long, bool)
PUBLIC 75b6 0 IAMalloc(unsigned long)
PUBLIC 75d8 0 TPropertyStream::TPropertyStream(unsigned char*, unsigned long)
PUBLIC 763a 0 IAStoreStream::IAStoreStream()
PUBLIC 76b6 0 IAObject::IAObject()
PUBLIC 76da 0 IAMallocArraySizedOfType(unsigned long, unsigned long)
PUBLIC 775c 0 IAMallocSized(unsigned long)
PUBLIC 777e 0 TPropertyStream::SetMarker(long, TPropertyStream::EFrom)
PUBLIC 77bc 0 IAMakeStorage(IAStoreStream*)
PUBLIC 7804 0 BuddyStorage::BuddyStorage(IAStoreStream*)
PUBLIC 793a 0 IAStorage::IAStorage(IAStoreStream*, unsigned long)
PUBLIC 7974 0 IAMallocArrayOfType(unsigned long, unsigned long)
PUBLIC 79f6 0 UInt32Set::UInt32Set()
PUBLIC 7a2e 0 SkipList::SkipList(unsigned char)
PUBLIC 7adc 0 SL_Ceiling(unsigned char, unsigned char)
PUBLIC 7af8 0 StringUInt32Map::StringUInt32Map()
PUBLIC 7b30 0 StringSet::StringSet(unsigned char)
PUBLIC 7b68 0 BuddyStorage::Open(bool)
PUBLIC 7ca0 0 TPropertyStream::Open(bool)
PUBLIC 7ca6 0 IAStoreStream::SetPosition(unsigned long, unsigned long)
PUBLIC 7cee 0 IAStoreStream::MaybeFlushBuffer()
PUBLIC 7d78 0 IAStoreStream::ReadUInt32()
PUBLIC 7e14 0 IAStoreStream::ReadPastEndOfBuffer()
PUBLIC 7efa 0 TPropertyStream::Read(unsigned long, unsigned char*, unsigned long)
PUBLIC 7f7c 0 TPropertyStream::ReadData(unsigned char*, long&)
PUBLIC 7fea 0 BuddyStorage::BlockInfoRead(IAStoreStream*)
PUBLIC 80fe 0 BuddyStorage::TOCRead(IAStoreStream*)
PUBLIC 81f8 0 IAStoreStream::ReadBytes(void*, unsigned long)
PUBLIC 8236 0 StringUInt32Map::Put(char const*, unsigned long)
PUBLIC 82ae 0 SkipList::Put(void*, void*)
PUBLIC 834a 0 SkipList::SetFinger(void*, void**)
PUBLIC 83d8 0 SkipList::Insert(void*, void**)
PUBLIC 84a6 0 SkipList::NewNode(unsigned char, void*)
PUBLIC 84f2 0 BuddyStorage::FreeAddressesRead(IAStoreStream*)
PUBLIC 8564 0 UInt32Set::SetFinger(void*, void**)
PUBLIC 85d2 0 TPropertyInfo::TPropertyInfo()
PUBLIC 85dc 0 IAOrderedStorable::IAOrderedStorable()
PUBLIC 860c 0 IAStorable::IAStorable()
PUBLIC 863c 0 TPropertyValue::TPropertyValue()
PUBLIC 8658 0 IAMakeOrderedStorableSet(IAOrderedStorable*)
PUBLIC 86a8 0 BTree::BTree(IAOrderedStorable*, unsigned long)
PUBLIC 8750 0 IAOrderedStorableSet::IAOrderedStorableSet()
PUBLIC 8780 0 IAStruct::operator new(unsigned long)
PUBLIC 878a 0 Scroll::Scroll()
PUBLIC 87bc 0 IAStorage::GetNamedBlock(char const*)
PUBLIC 87f8 0 BuddyStorage::TOC_Get(char const*)
PUBLIC 886c 0 TPropertyStream::IsOpen()
PUBLIC 8876 0 StringUInt32Map::Get(char const*)
PUBLIC 88a4 0 SkipList::Get(void*, void*)
PUBLIC 8916 0 StringSet::LessThan(void*, void*)
PUBLIC 8938 0 StringSet::Equal(void*, void*)
PUBLIC 895e 0 BTree::Open(IAStorage*, unsigned long, bool, bool)
PUBLIC 8b46 0 TPropertyStream::IsWritable()
PUBLIC 8b50 0 IAInputBlock::IAInputBlock(IAStorage*, unsigned long, IAStoreStream*)
PUBLIC 8b5a 0 BuddyStorage::GetReadAddress(unsigned long)
PUBLIC 8c5a 0 BuddyStorage::GetBlockSize(unsigned long)
PUBLIC 8c84 0 BTHeader::Restore(IAInputBlock*)
PUBLIC 8cda 0 IAInputBlock::~IAInputBlock()
PUBLIC 8ce0 0 ReadPage(unsigned long, IAStorage*, IAStoreStream*, IAOrderedStorable*)
PUBLIC 8dcc 0 Leaf::Leaf(unsigned long)
PUBLIC 8e00 0 Page::Page(unsigned long)
PUBLIC 8e4e 0 Page::ReadEntries(IAInputBlock*, IAOrderedStorable*)
PUBLIC 8ec6 0 SkipList::FingerStart(void**)
PUBLIC 8eea 0 Leaf::EntryRestore(PageEntry*, IAOrderedStorable*, IAInputBlock*)
PUBLIC 8f3e 0 TPropertyInfo::Restore(IAInputBlock*) const
PUBLIC 9458 0 IAStoreStream::ReadBufferOfUInt16(void*, unsigned long)
PUBLIC 9486 0 IAStoreStream::ReadUInt16()
PUBLIC 94de 0 TPropertyValue::TPropertyValue(unsigned long, unsigned char*)
PUBLIC 94fc 0 TPropertyValue::operator=(TPropertyValue const&)
PUBLIC 953e 0 TPropertyValue::Release()
PUBLIC 95a8 0 TPropertyValue::TPropertyValue(TPropertyValue const&)
PUBLIC 9690 0 TPropertyValue::~TPropertyValue()
PUBLIC 969a 0 TPropertyValue::TPropertyValue(bool)
PUBLIC 96ae 0 BTree::MakeIterator()
PUBLIC 96f6 0 BTreeIterator::BTreeIterator(BTree*)
PUBLIC 9754 0 IAOrderedStorableIterator::IAOrderedStorableIterator()
PUBLIC 9784 0 BTreeIterator::BuildStack(IAOrderedStorable const*)
PUBLIC 97f6 0 BTreeIterator::PushForward(Page*)
PUBLIC 9876 0 IteratorFrame::IteratorFrame(PageEntry*, Page*, IteratorFrame*)
PUBLIC 98ac 0 TPropertyInfo::DeepCopy() const
PUBLIC 98f4 0 TPropertyInfo::TPropertyInfo(TPropertyInfo const&)
PUBLIC 98fe 0 BTreeIterator::Next()
PUBLIC 9998 0 BTreeIterator::Increment()
PUBLIC 9a3a 0 std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> >::push_back(TPropertyInfo* const&)
PUBLIC 9a7c 0 std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >, TPropertyInfo* const&)
PUBLIC 9bf2 0 std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> >::size() const
PUBLIC 9ca2 0 void std::_Destroy<__gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >, std::allocator<TPropertyInfo*> >(__gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >, __gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >, std::allocator<TPropertyInfo*>)
PUBLIC 9ccc 0 bool __gnu_cxx::operator!=<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >(__gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > > const&, __gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > > const&)
PUBLIC 9ce2 0 BTreeIterator::PopForward()
PUBLIC 9d3e 0 IAStruct::~IAStruct()
PUBLIC 9d5c 0 IAStruct::operator delete(void*)
PUBLIC 9d66 0 IAFree(void*)
PUBLIC 9d78 0 BTreeIterator::~BTreeIterator()
PUBLIC 9d82 0 BTree::~BTree()
PUBLIC 9d8c 0 Leaf::~Leaf()
PUBLIC 9d96 0 Page::~Page()
PUBLIC 9e02 0 SkipList::Pop(void*)
PUBLIC 9edc 0 IAFreeSized(void*, unsigned long)
PUBLIC 9eee 0 BuddyStorage::FreeChunks(unsigned long**)
PUBLIC 9f46 0 StringSet::~StringSet()
PUBLIC 9fac 0 TPropertyStream::~TPropertyStream()
PUBLIC 9fb6 0 TPropertyInfoList::AddPtrReference()
PUBLIC 9fd2 0 TPropertyInfoList::RemovePtrReference()
PUBLIC a00c 0 TNode::FindFolder(unsigned long, bool, FSRef&) const
PUBLIC a104 0 LockFindFolder(short, unsigned long, unsigned char, FSRef*)
PUBLIC a1c2 0 TNode::SendNotification(unsigned long, TNodePtr const&, unsigned long, long)
PUBLIC a2ee 0 TNodeEvent::CreateNodeEvent(unsigned long, TNodePtr const&, unsigned long, TCountedPtr<TNotifier> const&, bool, long)
PUBLIC a35a 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, unsigned long, TCountedPtr<TNotifier> const&, bool, long)
PUBLIC a36a 0 TCountedPtr<TNotifier>::operator=(TCountedPtr<TNotifier> const&)
PUBLIC a3a8 0 TCountedPtr<TNodeTask>::operator=(TCountedPtr<TNodeTask> const&)
PUBLIC a3e6 0 TNodeEvent::AddPtrReference()
PUBLIC a3fa 0 TNode::GetNotifierList() const
PUBLIC a434 0 TNotifierList::TNotifierList()
PUBLIC a46a 0 std::allocator<TCountedPtr<TNotifier> >::allocator()
PUBLIC a470 0 std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::vector(std::allocator<TCountedPtr<TNotifier> > const&)
PUBLIC a47a 0 std::_Vector_base<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::_Vector_base(std::allocator<TCountedPtr<TNotifier> > const&)
PUBLIC a484 0 std::_Vector_base<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::_Vector_impl::_Vector_impl(std::allocator<TCountedPtr<TNotifier> > const&)
PUBLIC a4b8 0 std::allocator<TCountedPtr<TNotifier> >::allocator(std::allocator<TCountedPtr<TNotifier> > const&)
PUBLIC a4be 0 TNodeEvent::Notify(TNotifierList const&)
PUBLIC a5ac 0 TNotifierList::TNotifierList(TNotifierList const&)
PUBLIC a5d8 0 std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::vector(std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > const&)
PUBLIC a64c 0 std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::size() const
PUBLIC a686 0 std::_Vector_base<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::_Vector_base(unsigned long, std::allocator<TCountedPtr<TNotifier> > const&)
PUBLIC a6f0 0 TCountedPtr<TNotifier>* std::__uninitialized_copy_aux<__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier> const*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >, TCountedPtr<TNotifier>*>(__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier> const*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >, __gnu_cxx::__normal_iterator<TCountedPtr<TNotifier> const*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >, TCountedPtr<TNotifier>*, __false_type)
PUBLIC a732 0 bool __gnu_cxx::operator!=<TCountedPtr<TNotifier> const*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >(__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier> const*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > > const&, __gnu_cxx::__normal_iterator<TCountedPtr<TNotifier> const*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > > const&)
PUBLIC a748 0 std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::~vector()
PUBLIC a794 0 std::_Vector_base<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::~_Vector_base()
PUBLIC a7ac 0 TNodeEvent::RemovePtrReference()
PUBLIC a7e2 0 TNodeEvent::~TNodeEvent()
PUBLIC a874 0 THFSPlusRef::~THFSPlusRef()
PUBLIC a87e 0 TNodePtr::operator->() const
PUBLIC a888 0 TNode::FindChild(HFSUniStr255 const&) const
PUBLIC abf0 0 TChildrenList::Find(HFSUniStr255 const&)
PUBLIC ac56 0 TChildrenList::size() const
PUBLIC ac70 0 THFSPlusRef::InitializeWithParentFSRef(FSRef const&, HFSUniStr255 const&)
PUBLIC ac9c 0 THFSPlusRef::InitializeWithParentFSRef(FSRef const&, unsigned long, unsigned short const*)
PUBLIC ad40 0 NewHFSUniStr255(unsigned long, unsigned short const*)
PUBLIC adb8 0 LockMakeFSRefUnicode(FSRef const&, unsigned long, unsigned short const*, unsigned long, FSRef*)
PUBLIC ae20 0 THFSPlusCatalog::GetHiddenList()
PUBLIC b45a 0 std::allocator<HFSUniStr255*>::allocator()
PUBLIC b460 0 std::vector<HFSUniStr255*, std::allocator<HFSUniStr255*> >::vector(std::allocator<HFSUniStr255*> const&)
PUBLIC b46a 0 std::_Vector_base<HFSUniStr255*, std::allocator<HFSUniStr255*> >::_Vector_base(std::allocator<HFSUniStr255*> const&)
PUBLIC b474 0 std::_Vector_base<HFSUniStr255*, std::allocator<HFSUniStr255*> >::_Vector_impl::_Vector_impl(std::allocator<HFSUniStr255*> const&)
PUBLIC b4a8 0 std::allocator<HFSUniStr255*>::allocator(std::allocator<HFSUniStr255*> const&)
PUBLIC b4ae 0 TNode::MakePOSIXPath(unsigned char*, unsigned long) const
PUBLIC b528 0 std::vector<HFSUniStr255*, std::allocator<HFSUniStr255*> >::push_back(HFSUniStr255* const&)
PUBLIC b56a 0 std::vector<HFSUniStr255*, std::allocator<HFSUniStr255*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<HFSUniStr255**, std::vector<HFSUniStr255*, std::allocator<HFSUniStr255*> > >, HFSUniStr255* const&)
PUBLIC b6d2 0 std::vector<HFSUniStr255*, std::allocator<HFSUniStr255*> >::size() const
PUBLIC b782 0 void std::_Destroy<__gnu_cxx::__normal_iterator<HFSUniStr255**, std::vector<HFSUniStr255*, std::allocator<HFSUniStr255*> > >, std::allocator<HFSUniStr255*> >(__gnu_cxx::__normal_iterator<HFSUniStr255**, std::vector<HFSUniStr255*, std::allocator<HFSUniStr255*> > >, __gnu_cxx::__normal_iterator<HFSUniStr255**, std::vector<HFSUniStr255*, std::allocator<HFSUniStr255*> > >, std::allocator<HFSUniStr255*>)
PUBLIC b7ac 0 bool __gnu_cxx::operator!=<HFSUniStr255**, std::vector<HFSUniStr255*, std::allocator<HFSUniStr255*> > >(__gnu_cxx::__normal_iterator<HFSUniStr255**, std::vector<HFSUniStr255*, std::allocator<HFSUniStr255*> > > const&, __gnu_cxx::__normal_iterator<HFSUniStr255**, std::vector<HFSUniStr255*, std::allocator<HFSUniStr255*> > > const&)
PUBLIC b7c2 0 CompareUniChars(unsigned long, unsigned short const*, unsigned long, unsigned short const*, bool, long*)
PUBLIC b834 0 TNode::AddChild(TNodePtr&, THFSPlusExtendedPropertyIterator*, TCountedPtr<TPropertyMap> const&)
PUBLIC b8d6 0 TNode::AddChild(TNodePtr&, THFSPlusExtendedPropertyIterator*)
PUBLIC b9de 0 TChildrenList::AddNewChild(TNode*, bool&)
PUBLIC bb74 0 TChildrenList::Find(TNodePtr const&)
PUBLIC bb96 0 TChildrenList::Find(THFSPlusRef const&)
PUBLIC bbfc 0 bool __gnu_cxx::operator==<TNode**, std::vector<TNode*, std::allocator<TNode*> > >(__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > > const&, __gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > > const&)
PUBLIC bc12 0 THFSPlusRef::InvalidateCount() const
PUBLIC bc22 0 TNode::CopyProperties(TCountedPtr<TPropertyMap> const&)
PUBLIC bca6 0 TNode::SetIfIsBackup()
PUBLIC bda8 0 TUString::CopyToUniString(UniString*) const
PUBLIC be20 0 TNodePtr::operator!=(TNode*) const
PUBLIC be34 0 TNode::AddPtrReference()
PUBLIC be50 0 TNode::RegisterForInternalNotifications(TNodePtr const&)
PUBLIC beb8 0 TNodeEvent::GetInternalEventQueue()
PUBLIC bef0 0 TNodeEvent::InitializeInternalQueue()
PUBLIC bf5a 0 TClientChangeNotifier::GetClientChangeNotifier(NodeClientContext, OpaqueEventQueue*, void (*)(OpaqueEventQueue*), __CFRunLoop*)
PUBLIC c0c4 0 TClientChangeNotifier::TClientChangeNotifier(NodeClientContext, OpaqueEventQueue*, void (*)(OpaqueEventQueue*), __CFRunLoop*)
PUBLIC c118 0 TClientChangeNotifier::AddEventHandlerToRunLoop()
PUBLIC c212 0 TClientChangeNotifier::GetClientNotifierList()
PUBLIC c28a 0 TNotifier::TNotifier(TCountedPtr<TClientChangeNotifier> const&, TNodePtr const&, TNodePtr const&)
PUBLIC c294 0 TCountedPtr<TClientChangeNotifier>::operator=(TCountedPtr<TClientChangeNotifier> const&)
PUBLIC c2d2 0 TClientChangeNotifier::AddPtrReference()
PUBLIC c2e6 0 TNotifier::AddPtrReference()
PUBLIC c302 0 TNotifier::RemovePtrReference()
PUBLIC c33c 0 TClientChangeNotifier::RemovePtrReference()
PUBLIC c3b0 0 TNotifier::GetRunLoop() const
PUBLIC c3be 0 TNotifier::GetEventHandlerProc() const
PUBLIC c3cc 0 TNotifier::GetEventQueue() const
PUBLIC c3da 0 TNotifier::GetEventListener() const
PUBLIC c3fa 0 TClientChangeNotifier::~TClientChangeNotifier()
PUBLIC c45e 0 TNotifier::Register(TCountedPtr<TClientChangeNotifier> const&, TNodePtr const&, TNodePtr const&, unsigned long)
PUBLIC c822 0 bool __gnu_cxx::operator!=<TCountedPtr<TNotifier>*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >(__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier>*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > > const&, __gnu_cxx::__normal_iterator<TCountedPtr<TNotifier>*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > > const&)
PUBLIC c838 0 bool __gnu_cxx::operator==<TCountedPtr<TNotifier>*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >(__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier>*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > > const&, __gnu_cxx::__normal_iterator<TCountedPtr<TNotifier>*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > > const&)
PUBLIC c84e 0 std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::push_back(TCountedPtr<TNotifier> const&)
PUBLIC c892 0 std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::_M_insert_aux(__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier>*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >, TCountedPtr<TNotifier> const&)
PUBLIC ca7a 0 void std::_Destroy<__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier>*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >, std::allocator<TCountedPtr<TNotifier> > >(__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier>*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >, __gnu_cxx::__normal_iterator<TCountedPtr<TNotifier>*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >, std::allocator<TCountedPtr<TNotifier> >)
PUBLIC caba 0 TNode::GetVolumesNode()
PUBLIC cc4a 0 TChildrenList::SetIsVolumes()
PUBLIC ccbe 0 TAliasRecord::TAliasRecord()
PUBLIC ccde 0 TNode::PostInternalRequest(unsigned long, TNodePtr const&, void*)
PUBLIC cd64 0 PropertyStoreCalled()
PUBLIC cd76 0 TNodeEvent::CreateNodeEvent(unsigned long, TNodePtr const&, void*, TCountedPtr<TNotifier> const&, bool)
PUBLIC cdda 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, void*, TCountedPtr<TNotifier> const&, bool)
PUBLIC cde4 0 TNodeSyncTask::RequestSync(TCountedPtr<TNodeEvent> const&)
PUBLIC ce0a 0 TNodeSyncTask::GetTask()
PUBLIC ce88 0 TNodeSyncTask::Cancelled()
PUBLIC ce9a 0 TNodeSyncTask::TNodeSyncTask()
PUBLIC cea4 0 TNodeThread::TNodeThread(long (*)(void*))
PUBLIC ced4 0 TNodeThread::Run()
PUBLIC cf1e 0 TNodeSyncTask::SyncTaskProc(void*)
PUBLIC d036 0 TNodeSyncTask::GetQueue()
PUBLIC d08a 0 TNodeSyncTask::Synchronize(TCountedPtr<TNodeEvent> const&)
PUBLIC d0d0 0 TNode::GetFavoritesNode()
PUBLIC d25e 0 TChildrenList::SetIsFavorites()
PUBLIC d2d2 0 TNode::PostInternalRequest(unsigned long, TNodePtr const&, unsigned long)
PUBLIC d360 0 TNode::GetSharedFoldersNode()
PUBLIC d4d6 0 TNode::GetSharedFoldersList()
PUBLIC d54c 0 TNodeSyncTask::HandleInternalEvent(TCountedPtr<TNodeEvent> const&)
PUBLIC d794 0 TNodeSyncTask::HandleInternalEventVirtualChildListChanged(TCountedPtr<TNodeEvent> const&, TNodePtr const&)
PUBLIC d80c 0 TChildrenList::GetSFLList() const
PUBLIC dfa0 0 TNode::TestAndSetInitialPopulationStarted()
PUBLIC dfc6 0 TNode::GetVolumesFileList()
PUBLIC e038 0 LockSFLGetVolumesList(__CFString const*, __CFString const*, unsigned long, unsigned long*)
PUBLIC e096 0 TFSEventsNotificationTask::HandleFileChanged(__FSEventStream const*, void*, unsigned long, void*, unsigned long const*, unsigned long long const*)
PUBLIC e13a 0 TNode::HandleChange(char*)
PUBLIC e4d6 0 TUString::BeginsWith(TUString const&) const
PUBLIC e506 0 TPathName::TPathName(TUString const&, unsigned short)
PUBLIC e510 0 std::allocator<HFSUniStr255>::allocator()
PUBLIC e516 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::deque(std::allocator<HFSUniStr255> const&)
PUBLIC e538 0 std::_Deque_base<HFSUniStr255, std::allocator<HFSUniStr255> >::_Deque_base(std::allocator<HFSUniStr255> const&, unsigned long)
PUBLIC e56c 0 std::_Deque_base<HFSUniStr255, std::allocator<HFSUniStr255> >::_Deque_impl::_Deque_impl(std::allocator<HFSUniStr255> const&)
PUBLIC e5d6 0 std::allocator<HFSUniStr255>::allocator(std::allocator<HFSUniStr255> const&)
PUBLIC e5dc 0 std::_Deque_base<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_initialize_map(unsigned long)
PUBLIC e686 0 std::_Deque_base<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_allocate_map(unsigned long)
PUBLIC e6be 0 std::_Deque_base<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_get_map_allocator() const
PUBLIC e6f8 0 std::allocator<HFSUniStr255*>::allocator<HFSUniStr255>(std::allocator<HFSUniStr255> const&)
PUBLIC e6fe 0 std::_Deque_base<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_create_nodes(HFSUniStr255**, HFSUniStr255**)
PUBLIC e72a 0 std::_Deque_base<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_allocate_node()
PUBLIC e770 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::push_back(HFSUniStr255 const&)
PUBLIC e7c6 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_push_back_aux(HFSUniStr255 const&)
PUBLIC e854 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_reserve_map_at_back(unsigned long)
PUBLIC e898 0 TMountPointList::Find(HFSUniStr255 const&)
PUBLIC e9a2 0 TNode::Equal(HFSUniStr255 const&) const
PUBLIC ea78 0 THFSPlusCatalog::CaseSensitive() const
PUBLIC ea84 0 TNode::HandleRecursiveListeners()
PUBLIC ec54 0 TNodeTask::TNodeTask()
PUBLIC ec5e 0 TChildCreator::TChildCreator()
PUBLIC ec68 0 TCountedPtr<TPropertyMap>::operator=(TCountedPtr<TPropertyMap> const&)
PUBLIC eca6 0 TCountedPtr<TClientQuery>::operator=(TCountedPtr<TClientQuery> const&)
PUBLIC ece4 0 TNodeTask::AddPtrReference()
PUBLIC ecf8 0 TNodeTask::SetRequest(TNodePtr const&, unsigned long, unsigned long)
PUBLIC edd8 0 THFSPlusCatalog::RequestSizeTask(TCountedPtr<TNodeTask> const&)
PUBLIC ee4a 0 TFolderSizeTask::TFolderSizeTask(THFSPlusCatalog*)
PUBLIC ee54 0 TFolderSizeTask::FolderSizeTaskProc(void*)
PUBLIC f062 0 TFolderSizeTask::RequestSizeTask(TCountedPtr<TNodeTask> const&)
PUBLIC f0b4 0 TNodeTask::RemovePtrReference()
PUBLIC f0ea 0 THFSPlusRef::IsPackage() const
PUBLIC f0fe 0 TNode::GetSlashVolumesNode()
PUBLIC f14e 0 TNode::FindChildButDontSynchronize(HFSUniStr255 const&) const
PUBLIC f298 0 TNode::LessThan(HFSUniStr255 const&) const
PUBLIC f36e 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::~deque()
PUBLIC f3e4 0 void std::_Destroy<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::allocator<HFSUniStr255> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::allocator<HFSUniStr255>)
PUBLIC f420 0 std::_Deque_base<HFSUniStr255, std::allocator<HFSUniStr255> >::~_Deque_base()
PUBLIC f472 0 std::_Deque_base<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_deallocate_node(HFSUniStr255*)
PUBLIC f482 0 std::_Deque_base<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_deallocate_map(HFSUniStr255**, unsigned long)
PUBLIC f4aa 0 TChildrenList::LastResizeTime() const
PUBLIC f4e8 0 TNode::AdjustedResizeQuanta() const
PUBLIC f584 0 TFolderSizeTask::HandleSizeRequest(TCountedPtr<TNodeTask> const&)
PUBLIC f8c2 0 TNode::ClearDeepSyncRequested()
PUBLIC f8e0 0 TNodeTask::SetRequestStatus(long)
PUBLIC f946 0 TChildrenList::SetIsSizing()
PUBLIC f988 0 TNode::RecalculateFreeSpace()
PUBLIC fa00 0 THFSPlusCatalog::RecalculateFreeSpace()
PUBLIC fa7a 0 TChildrenList::SetIsNotSizing()
PUBLIC fabc 0 TNode::SendNotification(TCountedPtr<TNodeTask> const&)
PUBLIC fb54 0 TNodeTask::RemoveTask()
PUBLIC fbd8 0 TNodeTask::GetTaskList()
PUBLIC fc4c 0 TNodeTask::~TNodeTask()
PUBLIC fd1a 0 TChildCreator::~TChildCreator()
PUBLIC fd24 0 LockSFLAddCallback(OpaqueSFLRef*, void (*)(OpaqueSFLRef*, void*), void*)
PUBLIC fd84 0 TChildrenList::SetSFLList(OpaqueSFLRef*)
PUBLIC fdf8 0 NodeEventNewEventQueue
PUBLIC fe12 0 TNodeEvent::NewEventQueue(OpaqueEventQueue*&)
PUBLIC fe48 0 TNode::PopulateVirtualContainerFromSFL(OpaqueSFLRef*, bool)
PUBLIC 10748 0 TNode::StSynchronize::StSynchronize(TNode*, bool, bool)
PUBLIC 10758 0 TChildrenList::LastSyncStartTime() const
PUBLIC 1076e 0 TNode::AdjustedSyncQuanta() const
PUBLIC 107f2 0 TChildrenList::GetLastSyncDuration() const
PUBLIC 10808 0 TNode::HandleSyncStarted()
PUBLIC 10880 0 TSFLSynchronizer::TSFLSynchronizer(TNodePtr const&, OpaqueSFLRef*, bool)
PUBLIC 1088a 0 std::allocator<TSFLRecord*>::allocator()
PUBLIC 10890 0 std::vector<TSFLRecord*, std::allocator<TSFLRecord*> >::vector(std::allocator<TSFLRecord*> const&)
PUBLIC 1089a 0 std::_Vector_base<TSFLRecord*, std::allocator<TSFLRecord*> >::_Vector_base(std::allocator<TSFLRecord*> const&)
PUBLIC 108a4 0 std::_Vector_base<TSFLRecord*, std::allocator<TSFLRecord*> >::_Vector_impl::_Vector_impl(std::allocator<TSFLRecord*> const&)
PUBLIC 108d8 0 std::allocator<TSFLRecord*>::allocator(std::allocator<TSFLRecord*> const&)
PUBLIC 108de 0 LockSFLCreateSnapshot(OpaqueSFLRef*, unsigned long)
PUBLIC 1092e 0 GetRootNode
PUBLIC 10964 0 NodeCopySpecialFolder
PUBLIC 109f0 0 TNode::GetSpecialNodeWithStatus(unsigned long, OpaqueNodeRequest* const&, unsigned long, TNodePtr&)
PUBLIC 10ee4 0 TNodePtr::ReturnAsNodeRef() const
PUBLIC 10f0e 0 CopyNodeRef
PUBLIC 10f42 0 TNode::WeakValidate(TNode*)
PUBLIC 10f5a 0 DisposeNode
PUBLIC 1102c 0 CreateClientNodeRef
PUBLIC 1111a 0 TNode::CreateNewVirtualNode(TNodePtr const&, TUString const&, bool, TNodePtr const&, OpaquePropertyListRef*)
PUBLIC 111a4 0 TNode::SetVirtualNode(HFSUniStr255 const&, bool, TNodePtr const&)
PUBLIC 111fe 0 TNode::SetVirtualProxyNode(TNodePtr const&)
PUBLIC 112ec 0 TNode::GetNetworkNode(unsigned long)
PUBLIC 1137a 0 TNode::GetNetworkNearbyBrowser()
PUBLIC 11656 0 TNode::GetNetworkIcon(__NWNode*, OpaqueIconRef**)
PUBLIC 11684 0 TChildrenList::GetVirtualAliasRecord() const
PUBLIC 116f2 0 NodeIs
PUBLIC 11798 0 LockSFLGetFirstItem(OpaqueSFLSnapshotRef*)
PUBLIC 117e2 0 TNode::NodeIs(unsigned long long&) const
PUBLIC 11fdc 0 TNode::CreateVirtualAliasRecord(OpaqueSFLItemRef*, TNodePtr&, VirtualAliasRecord**, bool)
PUBLIC 12b3e 0 LockSFLItemCopyDisplayName(OpaqueSFLItemRef*)
PUBLIC 12b88 0 LockSFLItemGetISImageRef(OpaqueSFLItemRef*)
PUBLIC 12bd2 0 LockSFLItemIsSpecial(OpaqueSFLItemRef*, unsigned long*)
PUBLIC 12c28 0 LockSFLItemGetAliasData(OpaqueSFLItemRef*, unsigned long*)
PUBLIC 12c78 0 THFSPlusRef::IsSavedSearch(HFSUniStr255 const&, unsigned long)
PUBLIC 12d12 0 TUString::TUString(HFSUniStr255 const&)
PUBLIC 12d3c 0 TUString::EndsWith(TUString const&) const
PUBLIC 12d6c 0 THFSPlusRef::GetDisplayName() const
PUBLIC 12dda 0 THFSPlusRef::DisplayNameState()
PUBLIC 12df0 0 TNode::GetSpecialNode(unsigned long, OpaqueNodeRequest* const&, unsigned long)
PUBLIC 12e28 0 TNode::GetWhichSpecialNode(unsigned long)
PUBLIC 13042 0 TNode::SetSpecialNode(unsigned long, TNodePtr&)
PUBLIC 131b8 0 TNode::SetSpecialNodeFromOStype(unsigned long)
PUBLIC 13216 0 TNode::FindUserFolder(unsigned long, bool, TNodePtr&)
PUBLIC 13260 0 TNode::GetNodeFromFSRef(FSRef const&, TNodePtr&, unsigned long)
PUBLIC 13412 0 TPathName::TPathName()
PUBLIC 1341c 0 TPathName::GetPathNameFromFSRef(FSRef const&, short&)
PUBLIC 1355c 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::operator=(std::deque<HFSUniStr255, std::allocator<HFSUniStr255> > const&)
PUBLIC 1387e 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>::difference_type std::operator-<HFSUniStr255, HFSUniStr255&, HFSUniStr255*, HFSUniStr255&, HFSUniStr255*>(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> const&, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> const&)
PUBLIC 138aa 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::copy<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 13922 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__copy_normal<false, false>::copy_n<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 139a6 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__copy_aux<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 13a2a 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__copy<false, std::random_access_iterator_tag>::copy<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 13ae6 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>::difference_type std::operator-<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*, HFSUniStr255 const&, HFSUniStr255 const*>(std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*> const&, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*> const&)
PUBLIC 13b12 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::erase(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 13ec6 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::clear()
PUBLIC 13fa4 0 TPathName::GetParent(THFSPlusRef&, bool&, bool&)
PUBLIC 14058 0 THFSPlusRef::GetVRefNum() const
PUBLIC 14064 0 THFSPlusRef::GetParentFileSystemID() const
PUBLIC 14070 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::push_front(HFSUniStr255 const&)
PUBLIC 140c4 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_push_front_aux(HFSUniStr255 const&)
PUBLIC 14154 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_reserve_map_at_front(unsigned long)
PUBLIC 14182 0 TMountPointList::VolumeIsNotAutoMounted(short const&, bool&)
PUBLIC 141f2 0 TNode::GetNodeFromPathName(TPathName const&, TNodePtr&) const
PUBLIC 14324 0 NodeNewChangeNotifier
PUBLIC 143f4 0 NodeRegisterChangeNotification
PUBLIC 1449e 0 TNode::RegisterChangeNotification(TCountedPtr<TClientChangeNotifier> const&, unsigned long)
PUBLIC 144f2 0 TNode::AliasIsContainer() const
PUBLIC 145e4 0 THFSPlusRef::AliasIsContainer(bool&) const
PUBLIC 14644 0 TNode::IsPopulated() const
PUBLIC 14680 0 TNode::IsPopulating() const
PUBLIC 146bc 0 TNodeTask::SetRequest(TNodePtr const&, TCountedPtr<TNotifier> const&, unsigned long)
PUBLIC 147b6 0 THFSPlusCatalog::RequestPropertyTask(TCountedPtr<TNodeTask> const&)
PUBLIC 14830 0 TPropertyTask::PropertyTaskProc(void*)
PUBLIC 149a4 0 TPropertyTask::RequestPropertyTask(TCountedPtr<TNodeTask> const&)
PUBLIC 149f6 0 NodeDisposeNotifier
PUBLIC 14a3e 0 TPropertyTask::HandlePropertyRequest(TCountedPtr<TNodeTask> const&)
PUBLIC 14e20 0 TPropertyTask::HandleInternalRegisterForNotification(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 14ed6 0 TNodeTask::GetClientChangeNotifier() const
PUBLIC 14f04 0 TNode::FindRegistration(TCountedPtr<TClientChangeNotifier> const&, bool)
PUBLIC 15024 0 TNode::DoExternalRegistration(TCountedPtr<TNotifier> const&)
PUBLIC 15332 0 TNode::IsNetworkNode(unsigned long) const
PUBLIC 15380 0 TNode::PopulateChildren(OpaqueNodeRequest* const&) const
PUBLIC 1548c 0 TNode::LessThan(THFSPlusRef const&) const
PUBLIC 155c6 0 TNode::Equal(TNodePtr const&) const
PUBLIC 155e8 0 TNode::Equal(THFSPlusRef const&) const
PUBLIC 15782 0 TNode::GetCanonicalName(HFSUniStr255&) const
PUBLIC 157d0 0 SlashesToColons(HFSUniStr255 const&, HFSUniStr255&)
PUBLIC 15812 0 TNode::SetSpecialGlobalNodeForType(unsigned long, TNodePtr const&, long)
PUBLIC 15972 0 THFSPlusRef::ReadIconRefForProxy(OpaqueIconRef*&, bool) const
PUBLIC 15a8a 0 THFSPlusRef::GetFSCatalogInfo(unsigned long&, FSCatalogInfo&) const
PUBLIC 15ad8 0 THFSPlusRef::GetFSCatalogInfoFrom(unsigned long&, FSCatalogInfo&) const
PUBLIC 15e78 0 FSPermissions::SetOwnerID(unsigned long)
PUBLIC 15e86 0 FSPermissions::SetUserGroupID(unsigned long)
PUBLIC 15e94 0 FSPermissions::SetUserAccess(unsigned char)
PUBLIC 15ea2 0 FSPermissions::SetMode(unsigned short)
PUBLIC 15eb2 0 LockGetIconRefFromFileInfo(FSRef const&, unsigned long, unsigned short const*, unsigned long, FSCatalogInfo const*, unsigned long, OpaqueIconRef**, short*)
PUBLIC 15f2c 0 THFSPlusRef::IsApplication() const
PUBLIC 15f40 0 TSFLRecord::TSFLRecord(VirtualAliasRecord*, TNodePtr const&, OpaqueSFLItemRef*)
PUBLIC 15f74 0 std::vector<TSFLRecord*, std::allocator<TSFLRecord*> >::push_back(TSFLRecord* const&)
PUBLIC 15fb6 0 std::vector<TSFLRecord*, std::allocator<TSFLRecord*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<TSFLRecord**, std::vector<TSFLRecord*, std::allocator<TSFLRecord*> > >, TSFLRecord* const&)
PUBLIC 1611e 0 std::vector<TSFLRecord*, std::allocator<TSFLRecord*> >::size() const
PUBLIC 161ce 0 void std::_Destroy<__gnu_cxx::__normal_iterator<TSFLRecord**, std::vector<TSFLRecord*, std::allocator<TSFLRecord*> > >, std::allocator<TSFLRecord*> >(__gnu_cxx::__normal_iterator<TSFLRecord**, std::vector<TSFLRecord*, std::allocator<TSFLRecord*> > >, __gnu_cxx::__normal_iterator<TSFLRecord**, std::vector<TSFLRecord*, std::allocator<TSFLRecord*> > >, std::allocator<TSFLRecord*>)
PUBLIC 161f8 0 bool __gnu_cxx::operator!=<TSFLRecord**, std::vector<TSFLRecord*, std::allocator<TSFLRecord*> > >(__gnu_cxx::__normal_iterator<TSFLRecord**, std::vector<TSFLRecord*, std::allocator<TSFLRecord*> > > const&, __gnu_cxx::__normal_iterator<TSFLRecord**, std::vector<TSFLRecord*, std::allocator<TSFLRecord*> > > const&)
PUBLIC 1620e 0 LockSFLGetNextItem(OpaqueSFLItemRef*)
PUBLIC 16258 0 TNode::UnmarkChildren() const
PUBLIC 162da 0 TSFLSynchronizer::Next()
PUBLIC 16316 0 TSFLRecord::GetSFLItemRef() const
PUBLIC 16322 0 LockSFLItemGetID(OpaqueSFLItemRef*)
PUBLIC 1636c 0 TSFLRecord::GetResolvedNode() const
PUBLIC 16392 0 TNode::FindVirtualProxyIn(unsigned long, TNodePtr&) const
PUBLIC 16486 0 TSFLRecord::RetrieveAliasRecord()
PUBLIC 16496 0 TNode::SetVirtualProxyNode(VirtualAliasRecord const&)
PUBLIC 164d6 0 THFSPlusRef::SetVirtualProxyNode(VirtualAliasRecord const&)
PUBLIC 1669e 0 EqualHFSUniStr255(unsigned long, unsigned short const*, unsigned long, unsigned short const*)
PUBLIC 166fc 0 TNode::SetAliasTarget(TNodePtr const&, VirtualAliasRecord*, unsigned long)
PUBLIC 167b2 0 TNode::GetAliasTarget() const
PUBLIC 16808 0 TChildrenList::GetAliasTarget() const
PUBLIC 1683c 0 TChildrenList::SetAliasTarget(TNodePtr const&, VirtualAliasRecord*, unsigned long)
PUBLIC 168dc 0 TChildrenList::SetSFLItemID(unsigned long)
PUBLIC 16950 0 LockSFLItemGetFlags(OpaqueSFLItemRef*)
PUBLIC 1699a 0 std::vector<TNode*, std::allocator<TNode*> >::push_back(TNode* const&)
PUBLIC 169dc 0 TChildrenList::erase(__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >, __gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >)
PUBLIC 16a06 0 std::vector<TNode*, std::allocator<TNode*> >::rbegin()
PUBLIC 16a18 0 std::vector<TNode*, std::allocator<TNode*> >::rend()
PUBLIC 16a2a 0 bool std::operator==<__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > > >(std::reverse_iterator<__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > > > const&, std::reverse_iterator<__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > > > const&)
PUBLIC 16a58 0 std::reverse_iterator<__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > > >::operator*() const
PUBLIC 16a88 0 TNode** std::__copy_backward<true, std::random_access_iterator_tag>::copy_b<TNode*>(TNode* const*, TNode* const*, TNode**)
PUBLIC 16ab8 0 TNode::HandleSyncCompleted(bool)
PUBLIC 16b06 0 std::vector<TNode*, std::allocator<TNode*> >::~vector()
PUBLIC 16b3c 0 std::_Vector_base<TNode*, std::allocator<TNode*> >::~_Vector_base()
PUBLIC 16b54 0 TSFLSynchronizer::~TSFLSynchronizer()
PUBLIC 16b5e 0 LockSFLReleaseSnapshot(OpaqueSFLSnapshotRef*)
PUBLIC 16ba8 0 TSFLRecord::~TSFLRecord()
PUBLIC 16be0 0 std::vector<TSFLRecord*, std::allocator<TSFLRecord*> >::~vector()
PUBLIC 16c16 0 std::_Vector_base<TSFLRecord*, std::allocator<TSFLRecord*> >::~_Vector_base()
PUBLIC 16c2e 0 TNode::SendNotification(unsigned long, TNodePtr const&, void*)
PUBLIC 16d4c 0 TNode::StSynchronize::~StSynchronize()
PUBLIC 16d56 0 TNode::GetFavoritesFileList(bool&)
PUBLIC 16e54 0 NodeIsQueryHit
PUBLIC 16e86 0 NodeIs(OpaqueNodeRef*, bool (TNode::*)() const)
PUBLIC 16f0a 0 TNode::IsNodeQueryHit() const
PUBLIC 16f1e 0 NodeCreateNewRequest
PUBLIC 16f80 0 TNodeRequest::TNodeRequest(TClientChangeNotifier const*)
PUBLIC 16f8a 0 TNodeRequest::GetNextRequestID()
PUBLIC 16fec 0 TNodeRequest::AddPtrReference()
PUBLIC 17000 0 NodeNewIterator
PUBLIC 17040 0 NodeNewSortedIterator(OpaqueNodeRef*, short (*)(unsigned long, unsigned short const*, unsigned long, unsigned short const*), short (*)(long long, long long), unsigned long, OpaqueNodeIterator**, OpaqueNodeRequest*, unsigned long)
PUBLIC 170e6 0 TNode::NewNodeIterator(TNodeIterator*&, short (*)(unsigned long, unsigned short const*, unsigned long, unsigned short const*), short (*)(long long, long long), unsigned long, OpaqueNodeRequest* const&, unsigned long) const
PUBLIC 172f6 0 TNodeTask::TNodeTask(TCountedPtr<TNotifier> const&)
PUBLIC 17300 0 TNodeRequest::SetTask(TCountedPtr<TNodeTask> const&)
PUBLIC 173a2 0 TNode::RequestPopulate(TCountedPtr<TNodeTask> const&) const
PUBLIC 17440 0 TNodeOpenSyncTask::TNodeOpenSyncTask(TNodePtr const&, TCountedPtr<TNodeTask> const&)
PUBLIC 1744a 0 TNodeOpenSyncTask::OpenSyncTaskProc(void*)
PUBLIC 1750e 0 TNodeRequest::RemovePtrReference()
PUBLIC 17544 0 TNodeIterator::TNodeIterator(TNodePtr const&, short (*)(unsigned long, unsigned short const*, unsigned long, unsigned short const*), short (*)(long long, long long), unsigned long, bool)
PUBLIC 17570 0 std::allocator<std::pair<TNodePtr, TPropertyStore> >::allocator()
PUBLIC 1757a 0 std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::vector(std::allocator<std::pair<TNodePtr, TPropertyStore> > const&)
PUBLIC 17584 0 std::_Vector_base<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::_Vector_base(std::allocator<std::pair<TNodePtr, TPropertyStore> > const&)
PUBLIC 1758e 0 std::_Vector_base<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::_Vector_impl::_Vector_impl(std::allocator<std::pair<TNodePtr, TPropertyStore> > const&)
PUBLIC 175c2 0 std::allocator<std::pair<TNodePtr, TPropertyStore> >::allocator(std::allocator<std::pair<TNodePtr, TPropertyStore> > const&)
PUBLIC 175c8 0 std::allocator<std::pair<TNodePtr, TPropertyStore> >::~allocator()
PUBLIC 175ce 0 TNode::IsVirtual() const
PUBLIC 175e2 0 TNode::IsTrash() const
PUBLIC 175f4 0 TNodeIterator::GetUnsortedChildrenForNode(TNodePtr const&, short (*)(unsigned long, unsigned short const*, unsigned long, unsigned short const*), short (*)(long long, long long), unsigned long, bool)
PUBLIC 17906 0 TNode::HandlePopulate(bool) const
PUBLIC 17952 0 TNode::IsVisible() const
PUBLIC 179c2 0 THFSPlusRef::IsVisible() const
PUBLIC 179dc 0 std::pair<TNodePtr, TPropertyStore>::pair(TNodePtr const&, TPropertyStore const&)
PUBLIC 17a16 0 std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::push_back(std::pair<TNodePtr, TPropertyStore> const&)
PUBLIC 17a5a 0 std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::_M_insert_aux(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, std::pair<TNodePtr, TPropertyStore> const&)
PUBLIC 17c0a 0 std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::size() const
PUBLIC 17c66 0 bool __gnu_cxx::operator!=<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > > const&, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > > const&)
PUBLIC 17c98 0 std::pair<TNodePtr, TPropertyStore>::pair(std::pair<TNodePtr, TPropertyStore> const&)
PUBLIC 17cd0 0 void std::_Destroy<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, std::allocator<std::pair<TNodePtr, TPropertyStore> > >(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, std::allocator<std::pair<TNodePtr, TPropertyStore> >)
PUBLIC 17d04 0 TNodeThread::~TNodeThread()
PUBLIC 17d22 0 std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::begin()
PUBLIC 17d2c 0 NodeDisposeRequest
PUBLIC 17d74 0 TNodeRequest::~TNodeRequest()
PUBLIC 17da8 0 TNotifier::~TNotifier()
PUBLIC 17de2 0 NodeIteratorFullyPopulated
PUBLIC 17df4 0 NodeIteratorFirst
PUBLIC 17e74 0 TNodeIterator::First()
PUBLIC 17eb0 0 TNodeIterator::Next(long long*, UniString**)
PUBLIC 17f84 0 NodeIteratorNext
PUBLIC 18028 0 TNodeIterator::Next()
PUBLIC 1805e 0 DisposeNodeIterator
PUBLIC 18068 0 NodeDisposeIterator
PUBLIC 180b8 0 TNodeIterator::~TNodeIterator()
PUBLIC 180c2 0 std::_Vector_base<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::~_Vector_base()
PUBLIC 180da 0 GetBootNode
PUBLIC 18110 0 GetHomeNode
PUBLIC 18146 0 TNode::SetHomeNode()
PUBLIC 181e4 0 TNode::GetCatalog() const
PUBLIC 181fa 0 THFSPlusCatalog::Locked() const
PUBLIC 18206 0 THFSPlusCatalog::GetVRefNum() const
PUBLIC 18212 0 NodeGetVRefNum
PUBLIC 18286 0 TNode::Validate(TNode*)
PUBLIC 182a6 0 void std::_Construct<TCountedPtr<TNotifier>, TCountedPtr<TNotifier> >(TCountedPtr<TNotifier>*, TCountedPtr<TNotifier> const&)
PUBLIC 182c6 0 NodeIsiDisk
PUBLIC 182f8 0 TNode::IsiDisk() const
PUBLIC 1830a 0 TNodeEvent::RedispatchEventToNotifier(unsigned long, OpaqueEventQueue*, TCountedPtr<TNotifier> const&) const
PUBLIC 183e8 0 TMountPointList::SynchronizeMountPoints()
PUBLIC 185dc 0 TNode::WaitToBeSynced(bool)
PUBLIC 18666 0 TNodeEvent::CreateNodeEvent(TNodeEvent const*)
PUBLIC 186ba 0 TNodeEvent::TNodeEvent(TNodeEvent const&)
PUBLIC 187ee 0 TNotifier::Tickle(bool)
PUBLIC 18958 0 std::allocator<short>::allocator()
PUBLIC 1895e 0 std::vector<short, std::allocator<short> >::vector(std::allocator<short> const&)
PUBLIC 18968 0 std::_Vector_base<short, std::allocator<short> >::_Vector_base(std::allocator<short> const&)
PUBLIC 18972 0 std::_Vector_base<short, std::allocator<short> >::_Vector_impl::_Vector_impl(std::allocator<short> const&)
PUBLIC 189a6 0 std::allocator<short>::allocator(std::allocator<short> const&)
PUBLIC 189ac 0 THFSPlusCatalogRefNumIterator::THFSPlusCatalogRefNumIterator()
PUBLIC 189ba 0 THFSPlusCatalogRefNumIterator::GetNextVRefNum(short&)
PUBLIC 18a1a 0 std::vector<short, std::allocator<short> >::push_back(short const&)
PUBLIC 18a5e 0 std::vector<short, std::allocator<short> >::_M_insert_aux(__gnu_cxx::__normal_iterator<short*, std::vector<short, std::allocator<short> > >, short const&)
PUBLIC 18bcc 0 std::vector<short, std::allocator<short> >::size() const
PUBLIC 18c58 0 void std::_Destroy<__gnu_cxx::__normal_iterator<short*, std::vector<short, std::allocator<short> > >, std::allocator<short> >(__gnu_cxx::__normal_iterator<short*, std::vector<short, std::allocator<short> > >, __gnu_cxx::__normal_iterator<short*, std::vector<short, std::allocator<short> > >, std::allocator<short>)
PUBLIC 18c82 0 bool __gnu_cxx::operator!=<short*, std::vector<short, std::allocator<short> > >(__gnu_cxx::__normal_iterator<short*, std::vector<short, std::allocator<short> > > const&, __gnu_cxx::__normal_iterator<short*, std::vector<short, std::allocator<short> > > const&)
PUBLIC 18c98 0 TNode::RemoveUnmarkedMountPoints()
PUBLIC 18d46 0 TPropertyValue::TPropertyValue(unsigned long, unsigned short*)
PUBLIC 18d64 0 TPropertyValue::TPropertyValue(long)
PUBLIC 18d78 0 TPropertyValue::TPropertyValue(short)
PUBLIC 18d8e 0 BuddyStorage::Initialize()
PUBLIC 18e7c 0 TPropertyStream::Initialize()
PUBLIC 18e82 0 BuddyStorage::AllocAddress(unsigned char)
PUBLIC 18eca 0 BuddyStorage::newAddress(unsigned char)
PUBLIC 18f90 0 BuddyStorage::Allocate()
PUBLIC 1900a 0 BuddyStorage::PopFreeID()
PUBLIC 1905a 0 BuddyStorage::newInfo()
PUBLIC 19180 0 BuddyStorage::Commit()
PUBLIC 19394 0 BuddyStorage::TOCSize()
PUBLIC 193de 0 BuddyStorage::FreeAddressesSize()
PUBLIC 1955e 0 IADeletePointerArrayOnUnwind::IADeletePointerArrayOnUnwind(IAObject**, unsigned long)
PUBLIC 19572 0 IADeletePointerArrayOnUnwind::~IADeletePointerArrayOnUnwind()
PUBLIC 1957c 0 BuddyStorage::GetWriteAddressInternal(unsigned long, unsigned long)
PUBLIC 19796 0 BuddyStorage::FreeAddress(unsigned long, unsigned char)
PUBLIC 19886 0 BuddyStorage::FreenewFreeAddress()
PUBLIC 198ea 0 IAStoreStream::WriteUInt32(unsigned long)
PUBLIC 19996 0 IAStoreStream::WritePastEndOfBuffer(unsigned char)
PUBLIC 199f6 0 BuddyStorage::BlockInfoWrite(IAStoreStream*)
PUBLIC 19a46 0 BuddyStorage::TOCWrite(IAStoreStream*)
PUBLIC 19b3e 0 BuddyStorage::FreeAddressesWrite(IAStoreStream*)
PUBLIC 19bb0 0 TPropertyStream::Flush()
PUBLIC 19bba 0 TPropertyStream::Write(unsigned long, unsigned char const*, unsigned long)
PUBLIC 19cb4 0 TPropertyStream::WriteData(unsigned char const*, long)
PUBLIC 19d38 0 IAStorage::AllocateNamedBlock(char const*)
PUBLIC 19dc0 0 BuddyStorage::TOC_Set(char const*, unsigned long)
PUBLIC 19e40 0 BTree::Initialize(IAStorage*, unsigned long, bool)
PUBLIC 19f00 0 BTree::newPage(bool)
PUBLIC 19f80 0 BTree::Flush()
PUBLIC 1a03e 0 Page::Write(IAStorage*, IAStoreStream*)
PUBLIC 1a178 0 IAOutputBlock::IAOutputBlock(IAStorage*, unsigned long, unsigned long, IAStoreStream*)
PUBLIC 1a182 0 BuddyStorage::GetWriteAddress(unsigned long, unsigned long)
PUBLIC 1a1f4 0 IAOutputBlock::~IAOutputBlock()
PUBLIC 1a206 0 BTHeader::Store(IAOutputBlock*) const
PUBLIC 1a26e 0 std::vector<short, std::allocator<short> >::~vector()
PUBLIC 1a2a4 0 std::_Vector_base<short, std::allocator<short> >::~_Vector_base()
PUBLIC 1a2bc 0 TNode::ResetIconRef() const
PUBLIC 1a326 0 TNode::LowLevelIsLockFile() const
PUBLIC 1a35c 0 TNotifier::SetTimerToHandleTickle(TCountedPtr<TNotifier> const&, double)
PUBLIC 1a468 0 NotifierRetainCallBack(void const*)
PUBLIC 1a48c 0 TClientChangeNotifier::HandleEvents(void*)
PUBLIC 1a4a4 0 TNodeEvent::HandleInternalEvent(OpaqueEventQueue*)
PUBLIC 1a536 0 NodeEventGetNextEvent
PUBLIC 1a654 0 TNodeSyncTask::HandlePropertyChanged(TCountedPtr<TNodeEvent> const&, TNodePtr const&, bool)
PUBLIC 1aa26 0 TNode::SetIconForProxyFromAlias()
PUBLIC 1aab2 0 TChildrenList::GetSFLItemID() const
PUBLIC 1aad0 0 THFSPlusRef::InternalGetDisplayName() const
PUBLIC 1ab44 0 THFSPlusRef::GetInfoFetched(FSCatalogInfo&) const
PUBLIC 1ab70 0 TNode::UpdateVirtualProxy(OpaqueSFLItemRef*, TNodePtr&, unsigned long, bool, bool)
PUBLIC 1af70 0 VirtualAliasRecord::~VirtualAliasRecord()
PUBLIC 1af7a 0 NodeMountNotificationHook(VolumeNoticeBlk*)
PUBLIC 1b146 0 TNodeSyncTask::HandleInternalVolumeAdded(TCountedPtr<TNodeEvent> const&, TNodePtr const&)
PUBLIC 1b1b2 0 TNode::HandleSync(bool, bool, bool, bool)
PUBLIC 1b63e 0 THFSPlusRef::GetContentModificationDate() const
PUBLIC 1b64c 0 TNode::TNode(TNode*, THFSPlusRef const&, unsigned long)
PUBLIC 1b656 0 THFSPlusRef::Synchronize(unsigned long const&, HFSUniStr255*)
PUBLIC 1b768 0 TNode::ReconcileSelf(TNodePtr const&)
PUBLIC 1b930 0 TNode::GetPropertyRecord(unsigned long)
PUBLIC 1b986 0 TNode::TPropertyRecordsArray::TPropertyRecordsArray()
PUBLIC 1ca90 0 TNode::ReconcileType(TNodePtr const&)
PUBLIC 1cb28 0 THFSPlusRef::IsSymLink() const
PUBLIC 1cb46 0 TNode::GetProperty(unsigned long, TPropertyReference&) const
PUBLIC 1cbdc 0 TNode::GetPropertyRecord(unsigned long const&, THFSPlusPropertyRecord&) const
PUBLIC 1cc46 0 TNode::GetType(TPropertyReference&) const
PUBLIC 1ccde 0 THFSPlusRef::GetType() const
PUBLIC 1ccea 0 TPropertyReference::SetValue(unsigned long const&)
PUBLIC 1cd0c 0 TNode::TypeDataFetched() const
PUBLIC 1cd3c 0 TNode::SetProperty(unsigned long, TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 1ced4 0 TNode::SetType(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 1cfac 0 TNode::ReconcileCreator(TNodePtr const&)
PUBLIC 1d044 0 TNode::GetCreator(TPropertyReference&) const
PUBLIC 1d0a8 0 THFSPlusRef::GetCreator() const
PUBLIC 1d0b4 0 TNode::SetCreator(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 1d18c 0 TNode::ReconcileIsLocked(TNodePtr const&)
PUBLIC 1d224 0 TNode::GetIsLocked(TPropertyReference&) const
PUBLIC 1d250 0 THFSPlusRef::IsLocked() const
PUBLIC 1d262 0 TPropertyReference::SetValue(bool)
PUBLIC 1d282 0 TNode::SetIsLocked(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 1d370 0 TNode::ReconcileIsStationery(TNodePtr const&)
PUBLIC 1d408 0 TNode::GetIsStationery(TPropertyReference&) const
PUBLIC 1d476 0 TNode::CatalogDataFetched() const
PUBLIC 1d4a0 0 TNode::SetIsStationery(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 1d568 0 THFSPlusRef::IsStationery() const
PUBLIC 1d58a 0 TNode::ReconcileIsVisible(TNodePtr const&)
PUBLIC 1d622 0 TNode::GetIsVisible(TPropertyReference&) const
PUBLIC 1d64a 0 TNode::SetIsVisible(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 1d6fc 0 TNode::ReconcileCreationDate(TNodePtr const&)
PUBLIC 1d77e 0 TNode::GetCreationDate(TPropertyReference&) const
PUBLIC 1d7ce 0 THFSPlusRef::GetCreateDate() const
PUBLIC 1d7dc 0 TPropertyReference::SetValue(UTCDateTime const&)
PUBLIC 1d806 0 TNode::SetCreationDate(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 1d88e 0 TNode::ReconcileModificationDate(TNodePtr const&)
PUBLIC 1d970 0 TNode::GetModificationDate(TPropertyReference&) const
PUBLIC 1da04 0 TNode::SetModificationDate(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 1dbb4 0 TNode::ReconcileIsExtensionHidden(TNodePtr const&)
PUBLIC 1dc4c 0 TNode::GetIsExtensionHidden(TPropertyReference&) const
PUBLIC 1dc96 0 THFSPlusRef::IsExtensionHidden() const
PUBLIC 1dcaa 0 TNode::SetIsExtensionHidden(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 1dd68 0 TNode::ReconcileHasCustomIcon(TNodePtr const&)
PUBLIC 1de00 0 TNode::GetHasCustomIcon(TPropertyReference&) const
PUBLIC 1de4a 0 THFSPlusRef::GetHasCustomIcon() const
PUBLIC 1de6c 0 TNode::SetHasCustomIcon(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 1df34 0 TNode::ReconcileLabel(TNodePtr const&)
PUBLIC 1dfcc 0 TNode::GetLabel(TPropertyReference&) const
PUBLIC 1e014 0 THFSPlusRef::GetLabel() const
PUBLIC 1e034 0 TPropertyReference::SetValue(short)
PUBLIC 1e054 0 TNode::SetLabel(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 1e128 0 TNode::ReconcileIsPackage(TNodePtr const&)
PUBLIC 1e214 0 TNode::GetIsPackage(TPropertyReference&) const
PUBLIC 1e240 0 TNode::SetIsPackage(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 1e308 0 TNode::ReconcileLogicalSize(TNodePtr const&)
PUBLIC 1e3ca 0 TNode::ReconcilePhysicalSize(TNodePtr const&)
PUBLIC 1e47e 0 TNode::ReconcilePermissions(TNodePtr const&)
PUBLIC 1e6be 0 THFSPlusRef::GetUserAccess() const
PUBLIC 1e734 0 THFSPlusRef::GetUnixPermissions() const
PUBLIC 1e740 0 THFSPlusRef::GetOwnerID() const
PUBLIC 1e74c 0 THFSPlusRef::GetUserGroupID() const
PUBLIC 1e758 0 TNode::ReconcileChildren(bool, bool)
PUBLIC 1e806 0 TNode::NeedsChildReconcile() const
PUBLIC 1e84e 0 TNode::GetPermissions(unsigned long&) const
PUBLIC 1efec 0 TNode::UserCanBrowse() const
PUBLIC 1f048 0 THFSPlusRef::UserCanRead() const
PUBLIC 1f05c 0 THFSPlusRef::UserCanSearch() const
PUBLIC 1f06e 0 TNode::ModifyPermissionsIfBusy(unsigned long&) const
PUBLIC 1f0ae 0 TNode::SynchronizeChildren(bool)
PUBLIC 1f19e 0 THFSPlusRef::SetExtendedUserAccess()
PUBLIC 1f2aa 0 THFSPlusSynchronizer::THFSPlusSynchronizer(THFSPlusRef const&)
PUBLIC 1f2b4 0 THFSPlusRef::THFSPlusRef(THFSPlusRef const&)
PUBLIC 1f2be 0 std::allocator<THFSPlusRef>::allocator()
PUBLIC 1f2c4 0 std::vector<THFSPlusRef, std::allocator<THFSPlusRef> >::vector(std::allocator<THFSPlusRef> const&)
PUBLIC 1f2ce 0 std::_Vector_base<THFSPlusRef, std::allocator<THFSPlusRef> >::_Vector_base(std::allocator<THFSPlusRef> const&)
PUBLIC 1f2d8 0 std::_Vector_base<THFSPlusRef, std::allocator<THFSPlusRef> >::_Vector_impl::_Vector_impl(std::allocator<THFSPlusRef> const&)
PUBLIC 1f30c 0 std::allocator<THFSPlusRef>::allocator(std::allocator<THFSPlusRef> const&)
PUBLIC 1f312 0 THFSPlusIterator::THFSPlusIterator(FSRef const&, unsigned long, unsigned long)
PUBLIC 1f37c 0 THFSPlusRef::Expand(unsigned long)
PUBLIC 1f39a 0 THFSPlusIterator::Next(THFSPlusRef&)
PUBLIC 1f40c 0 THFSPlusIterator::First(THFSPlusRef&)
PUBLIC 1f444 0 LockGetCatalogInfoBulk(OpaqueFSIterator*, unsigned long, unsigned long*, unsigned char*, unsigned long, FSCatalogInfo*, FSRef*, FSSpec*, HFSUniStr255*)
PUBLIC 1f4c8 0 IsSymLink(unsigned long, unsigned long)
PUBLIC 1f538 0 std::vector<THFSPlusRef, std::allocator<THFSPlusRef> >::push_back(THFSPlusRef const&)
PUBLIC 1f580 0 std::vector<THFSPlusRef, std::allocator<THFSPlusRef> >::_M_insert_aux(__gnu_cxx::__normal_iterator<THFSPlusRef*, std::vector<THFSPlusRef, std::allocator<THFSPlusRef> > >, THFSPlusRef const&)
PUBLIC 1f756 0 std::vector<THFSPlusRef, std::allocator<THFSPlusRef> >::size() const
PUBLIC 1f802 0 bool __gnu_cxx::operator!=<THFSPlusRef*, std::vector<THFSPlusRef, std::allocator<THFSPlusRef> > >(__gnu_cxx::__normal_iterator<THFSPlusRef*, std::vector<THFSPlusRef, std::allocator<THFSPlusRef> > > const&, __gnu_cxx::__normal_iterator<THFSPlusRef*, std::vector<THFSPlusRef, std::allocator<THFSPlusRef> > > const&)
PUBLIC 1f834 0 void std::_Destroy<__gnu_cxx::__normal_iterator<THFSPlusRef*, std::vector<THFSPlusRef, std::allocator<THFSPlusRef> > >, std::allocator<THFSPlusRef> >(__gnu_cxx::__normal_iterator<THFSPlusRef*, std::vector<THFSPlusRef, std::allocator<THFSPlusRef> > >, __gnu_cxx::__normal_iterator<THFSPlusRef*, std::vector<THFSPlusRef, std::allocator<THFSPlusRef> > >, std::allocator<THFSPlusRef>)
PUBLIC 1f86c 0 void std::_Construct<THFSPlusRef, THFSPlusRef>(THFSPlusRef*, THFSPlusRef const&)
PUBLIC 1f87e 0 THFSPlusIterator::~THFSPlusIterator()
PUBLIC 1f888 0 THFSPlusSynchronizer::Next(THFSPlusRef&)
PUBLIC 1f8f0 0 std::vector<THFSPlusRef, std::allocator<THFSPlusRef> >::operator[](unsigned long)
PUBLIC 1f902 0 TChildrenList::ReconcileChild(THFSPlusRef const&, bool)
PUBLIC 1f94e 0 TChildrenList::InsertOrUpdate(__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >&, THFSPlusRef const&, bool)
PUBLIC 1fb6a 0 TNode::RemoveUnmarkedChildren()
PUBLIC 1fbf4 0 TNode::RemoveIfUnmarked()
PUBLIC 1fc28 0 THFSPlusSynchronizer::~THFSPlusSynchronizer()
PUBLIC 1fc32 0 std::vector<THFSPlusRef, std::allocator<THFSPlusRef> >::~vector()
PUBLIC 1fc7a 0 std::_Vector_base<THFSPlusRef, std::allocator<THFSPlusRef> >::~_Vector_base()
PUBLIC 1fc94 0 TChildrenList::SetLastSyncTime(double)
PUBLIC 1fce4 0 TChildrenList::SetLastSyncDuration(double)
PUBLIC 1fd32 0 THFSPlusRef::SetNewNameFromSync(HFSUniStr255 const&)
PUBLIC 1fdcc 0 TNode::ReconcilePropertyStore()
PUBLIC 1fffa 0 THFSPlusCatalog::GetCachedExtendedPropertyStore(unsigned long) const
PUBLIC 200c4 0 TNode::~TNode()
PUBLIC 200ce 0 THFSPlusRef::SetIsVisible(bool, bool)
PUBLIC 20264 0 LockGetVolumeParent(short, FSRef*, unsigned char*)
PUBLIC 202c0 0 THFSPlusCatalog::ShouldWriteNetworkPropertyStores()
PUBLIC 20362 0 THFSPlusRef::GetUserID()
PUBLIC 20396 0 TNotifier::HandleDeferredTickle(__CFRunLoopTimer*, void*)
PUBLIC 20448 0 NotifierReleaseCallBack(void const*)
PUBLIC 2048c 0 NodeFindFolder
PUBLIC 20570 0 void std::_Construct<std::pair<TNodePtr, TPropertyStore>, std::pair<TNodePtr, TPropertyStore> >(std::pair<TNodePtr, TPropertyStore>*, std::pair<TNodePtr, TPropertyStore> const&)
PUBLIC 20582 0 NodeIsVolume
PUBLIC 205b4 0 TNode::IsVolume() const
PUBLIC 205ce 0 VolumeIsLocal
PUBLIC 20600 0 TNode::IsLocalVolume() const
PUBLIC 20620 0 VolumeIsEjectable
PUBLIC 20652 0 TNode::IsEjectable() const
PUBLIC 20824 0 TNode::FSNotificationsSupported()
PUBLIC 2086c 0 GetNodeParent
PUBLIC 20876 0 NodeCopyParentNode
PUBLIC 20954 0 THFSPlusRef::HasClippingExtension(HFSUniStr255 const&)
PUBLIC 20b8a 0 THFSPlusRef::InitializeClippingExtensions()
PUBLIC 20cb0 0 NewHFSUniStr255(char*)
PUBLIC 20d52 0 THFSPlusRef::HasLocationExtension(HFSUniStr255 const&)
PUBLIC 21090 0 NodeIsQuery
PUBLIC 210c2 0 TNode::IsNodeQuery() const
PUBLIC 210d6 0 TNode::GetLogicalSize(TPropertyReference&) const
PUBLIC 210f8 0 TNode::GetSize(TPropertyReference&, bool) const
PUBLIC 21262 0 THFSPlusRef::GetSizeData() const
PUBLIC 212a2 0 THFSPlusRef::GetLogicalSize() const
PUBLIC 212b0 0 TPropertyReference::SetValue(long long)
PUBLIC 212d8 0 TNode::GetPhysicalSize(TPropertyReference&) const
PUBLIC 212fa 0 THFSPlusRef::GetPhysicalSize() const
PUBLIC 21308 0 TNode::SetPhysicalSize(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 21382 0 NodeIsSavedQuery
PUBLIC 213b4 0 TNode::IsNodeQuerySavedSearch() const
PUBLIC 213c8 0 NodeValidate
PUBLIC 2141e 0 TNode::Validate() const
PUBLIC 2143e 0 TNode::IsUnconnectedAuthSymLink() const
PUBLIC 21476 0 NodeIsContainer
PUBLIC 214d4 0 NodeIsContainer(TNode*)
PUBLIC 21536 0 NodeIsPackage
PUBLIC 21568 0 TNode::IsPackage() const
PUBLIC 21582 0 GetNodePropertyAsOSType
PUBLIC 215ea 0 GetNodeProperty(OpaqueNodeRef*, unsigned long, TPropertyReference&, OpaqueNodeRequest*)
PUBLIC 2167c 0 TNode::GetProperty(unsigned long, TPropertyReference&, OpaqueNodeRequest* const&) const
PUBLIC 2178c 0 NodeIteratorSize
PUBLIC 217a6 0 _GetNodePropertyAsStringNew
PUBLIC 2182a 0 TNode::GetName(TPropertyReference&) const
PUBLIC 21878 0 TPropertyReference::SetValue(HFSUniStr255 const&)
PUBLIC 218f6 0 NodeGetPropertyAsUTCDateTime
PUBLIC 21934 0 GetNodePropertyAsInt16
PUBLIC 2199c 0 TNode::GetDisplayName(TPropertyReference&) const
PUBLIC 219cc 0 TPropertyReference::SetValue(unsigned long, unsigned short const*)
PUBLIC 21a44 0 GetNodePropertyAsIconRef
PUBLIC 21aac 0 TNode::GetIconRef(TPropertyReference&) const
PUBLIC 21b82 0 TNode::ReadIconRef(OpaqueIconRef*&) const
PUBLIC 21c0a 0 THFSPlusRef::ReadIconRef(OpaqueIconRef*&, bool) const
PUBLIC 21daa 0 THFSPlusRef::GetMetaData(unsigned long const&) const
PUBLIC 21e10 0 TPropertyReference::SetValue(OpaqueIconRef*)
PUBLIC 21e40 0 NodeSync
PUBLIC 21e9a 0 TNode::RequestSynchronize()
PUBLIC 21eb6 0 TNodeSyncTask::RequestSync(TNodePtr const&)
PUBLIC 21f34 0 TNodeSyncTask::HandleInternalSync(TCountedPtr<TNodeEvent> const&, TNodePtr const&)
PUBLIC 22036 0 TNode::DispatchSyncRequest(double, bool)
PUBLIC 22092 0 TNode::SetTimerToDispatchSyncRequest(TNode*, double)
PUBLIC 2218e 0 RetainNode(void const*)
PUBLIC 221a8 0 GetVolumeNode
PUBLIC 221b2 0 NodeCopyVolume
PUBLIC 22248 0 TNode::GetCatalogRootNode() const
PUBLIC 22292 0 TNode::GetSavedSearchesNode()
PUBLIC 22422 0 TChildrenList::SetIsSavedSearches()
PUBLIC 22496 0 TNode::GetSavedSearchesFileList(bool&)
PUBLIC 22594 0 TNode::LogNotification(unsigned long, TNodePtr const&, unsigned long)
PUBLIC 2259a 0 TNodeEvent::Notify(TCountedPtr<TNotifier> const&)
PUBLIC 22600 0 TNode::GetNetworkSidebarBrowser()
PUBLIC 228d2 0 TChildrenList::GetNWBrowser() const
PUBLIC 228f0 0 TNode::GetNWNodeMap(__NWBrowser*)
PUBLIC 229ee 0 std::allocator<std::pair<__NWNode* const, TNodePtr> >::allocator()
PUBLIC 229f4 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> > >::allocator<std::pair<__NWNode* const, TNodePtr> >(std::allocator<std::pair<__NWNode* const, TNodePtr> > const&)
PUBLIC 229fa 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*>::allocator<std::pair<__NWNode* const, TNodePtr> >(std::allocator<std::pair<__NWNode* const, TNodePtr> > const&)
PUBLIC 22a00 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*>::allocator(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> const&)
PUBLIC 22a06 0 unsigned long const* std::lower_bound<unsigned long const*, unsigned long>(unsigned long const*, unsigned long const*, unsigned long const&)
PUBLIC 22a6e 0 std::iterator_traits<unsigned long const*>::difference_type std::distance<unsigned long const*>(unsigned long const*, unsigned long const*)
PUBLIC 22a7c 0 void std::advance<unsigned long const*, int>(unsigned long const*&, int)
PUBLIC 22b4a 0 void std::__fill<true>::fill<__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> > >, __gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*>(__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> > >, __gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> > >, __gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >* const&)
PUBLIC 22b80 0 bool __gnu_cxx::operator!=<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> > >(__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> > > const&, __gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> > > const&)
PUBLIC 22c48 0 std::pair<__NWNode* const, TNodePtr>::pair(__NWNode* const&, TNodePtr const&)
PUBLIC 22c8c 0 std::allocator<std::pair<__NWNode* const, TNodePtr> >::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> > >(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> > > const&)
PUBLIC 22cae 0 std::pair<__NWNode* const, TNodePtr>::pair(std::pair<__NWNode* const, TNodePtr> const&)
PUBLIC 22cce 0 GetNodePropertyAsBoolean
PUBLIC 22d40 0 TNode::GetInvisibleInSidebar(TPropertyReference&) const
PUBLIC 22d5e 0 NodeCopyFromAlias
PUBLIC 22e26 0 TNode::ResolveAlias(TNodePtr&, unsigned char, unsigned char, OpaqueNodeRequest* const&, unsigned long) const
PUBLIC 23170 0 TNode::IsBurnFolder() const
PUBLIC 232da 0 TChildrenList::AliasTargetResolved()
PUBLIC 232f6 0 TNode::FollowAlias(TNodePtr&, unsigned long) const
PUBLIC 2391c 0 TNode::ResolveClientAlias(unsigned char, unsigned char) const
PUBLIC 24138 0 TChildrenList::SetAliasTarget(TNodePtr const&, bool)
PUBLIC 2419c 0 TNode::IsInTrash() const
PUBLIC 24262 0 THFSPlusRef::IsBurnFolder() const
PUBLIC 242cc 0 THFSPlusRef::IsBurnFolder(TUString const&)
PUBLIC 24336 0 TNode::DispatchSyncRequestNow(__CFRunLoopTimer*, void*)
PUBLIC 24386 0 ReleaseNode(void const*)
PUBLIC 24390 0 NetworkSidebarCallback(__NWBrowser*, __NWNode*, __CFString const*, unsigned long, NWBrowserError, void*)
PUBLIC 24442 0 TNode::SetIfNetworkSidebarBrowser(__NWBrowser*, __NWNode*) const
PUBLIC 24508 0 TNode::PopulateVirtualContainerFromNetworkBrowser(__NWBrowser*)
PUBLIC 250be 0 TNetworkBrowserSynchronizer::TNetworkBrowserSynchronizer(TNodePtr const&, __NWBrowser*)
PUBLIC 250c8 0 TChildrenList::GetNWNode() const
PUBLIC 250e6 0 TNode::FindFolder(unsigned long, bool, TNodePtr&) const
PUBLIC 25130 0 THFSPlusRef::UserCanWrite() const
PUBLIC 25144 0 SetNodePropertyAsBoolean
PUBLIC 25182 0 SetNodeProperty(OpaqueNodeRef*, unsigned long, TPropertyReference const&, OpaqueNodeRequest*)
PUBLIC 25210 0 TNode::SetProperty(unsigned long, TPropertyReference const&, OpaqueNodeRequest* const&) const
PUBLIC 25288 0 LockSetCatalogInfo(FSRef const&, unsigned long, FSCatalogInfo const*)
PUBLIC 252e2 0 THFSPlusRef::Store()
PUBLIC 2540c 0 ConvertUniCharsToDecomposed(unsigned long, unsigned short*, unsigned long, unsigned long*, unsigned short*)
PUBLIC 25514 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_reallocate_map(unsigned long, bool)
PUBLIC 25690 0 NodeEventBlockUntilNextEventNew
PUBLIC 256ae 0 NodeEventGetParent
PUBLIC 256b8 0 NodeEventCopyRegistrationParent
PUBLIC 25796 0 NodeEventGetChild
PUBLIC 257a0 0 NodeEventCopyNode
PUBLIC 2581c 0 NodeEventGetKind
PUBLIC 2586c 0 NodeEventGetClientRef
PUBLIC 25876 0 NodeEventGetContextInfo
PUBLIC 25952 0 NodeEventGetProperty
PUBLIC 259d0 0 NodeEventRelease
PUBLIC 25a24 0 GetNodePropertyAsDataNew
PUBLIC 25aa8 0 TNode::GetExtendedPropertyStore() const
PUBLIC 25b1e 0 TNode::IsHome() const
PUBLIC 25c92 0 TNode::GetPropertyStoreKeyName() const
PUBLIC 25d06 0 THFSPlusPropertyStore::GetProperty(HFSUniStr255 const&, unsigned long, TPropertyReference&) const
PUBLIC 25dcc 0 TPropertyInfo::TPropertyInfo(HFSUniStr255 const&, unsigned long)
PUBLIC 25dd6 0 TPropertyInfo::Find(TCountedPtr<TPropertyInfoList> const&, TPropertyInfo const&)
PUBLIC 25e3a 0 TPropertyInfo::LessThan(TPropertyInfo const&) const
PUBLIC 25ea8 0 TPropertyInfo::Equal(TPropertyInfo const&) const
PUBLIC 25f08 0 TPropertyInfo::GetProperty(TPropertyReference&) const
PUBLIC 25f20 0 TPropertyReference::SetValue(TPropertyValue const&)
PUBLIC 26152 0 TPropertyInfo::~TPropertyInfo()
PUBLIC 261ba 0 GetURLAsNode
PUBLIC 261de 0 NodeCopyFromURL
PUBLIC 26348 0 TNode::GetNodeFromURL(__CFURL const* const&, TNodePtr&)
PUBLIC 264ae 0 TNode::HandleListeners()
PUBLIC 2651c 0 std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::empty() const
PUBLIC 26548 0 bool __gnu_cxx::operator==<TCountedPtr<TNotifier> const*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >(__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier> const*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > > const&, __gnu_cxx::__normal_iterator<TCountedPtr<TNotifier> const*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > > const&)
PUBLIC 2655e 0 TNode::FollowAlias(THFSPlusRef&, unsigned char, unsigned char) const
PUBLIC 265b8 0 THFSPlusRef::FollowAlias(THFSPlusRef&, unsigned char, unsigned char, unsigned char&) const
PUBLIC 266d2 0 LockResolveAliasFile(FSRef*, unsigned char, unsigned char*, unsigned long)
PUBLIC 2675a 0 GetNodePropertyAsInt32
PUBLIC 267c2 0 GetVirtualNode
PUBLIC 26816 0 TMetaData::~TMetaData()
PUBLIC 26878 0 THFSPlusRef::SetContentModificationDate(UTCDateTime, bool)
PUBLIC 268aa 0 THFSPlusRef::InvalidateVersionData() const
PUBLIC 268d2 0 THFSPlusRef::FetchTypeInfo() const
PUBLIC 26f04 0 TNetworkBrowserSynchronizer::Next()
PUBLIC 26f74 0 TNode::FindVirtualProxyIn(__NWNode*, bool, TNodePtr&) const
PUBLIC 27078 0 VirtualAliasRecord::VirtualAliasRecord(__NWNode*, __NWBrowser*, HFSUniStr255 const&, OpaqueIconRef*, bool)
PUBLIC 27082 0 TNode::SetAliasTarget(TNodePtr const&, VirtualAliasRecord*, __NWNode*, __NWBrowser*)
PUBLIC 2713c 0 TChildrenList::SetAliasTarget(TNodePtr const&, VirtualAliasRecord*, __NWNode*, __NWBrowser*)
PUBLIC 271e6 0 TChildrenList::SetNWNode(__NWNode*, __NWBrowser*)
PUBLIC 272cc 0 TNetworkBrowserSynchronizer::~TNetworkBrowserSynchronizer()
PUBLIC 272d6 0 THFSPlusRef::SetUserAccess(unsigned long)
PUBLIC 27364 0 TNode::UpdateVirtualProxy(__NWNode*, bool)
PUBLIC 279b4 0 NodeFindChildNew
PUBLIC 27a30 0 NodeCopyChildFromName
PUBLIC 27cca 0 TNode::FindChild(TUString const&, bool)
PUBLIC 280bc 0 GetNodeAsFSRef
PUBLIC 280de 0 NodeAsFSRef
PUBLIC 2816a 0 TNode::GetFSRef(FSRef&)
PUBLIC 281b8 0 NodeFindVirtualChild
PUBLIC 282b8 0 TNode::FindVirtualProxyIn(TNodePtr const&, TNodePtr&, unsigned long&) const
PUBLIC 284a2 0 NodeGetPermissions
PUBLIC 28504 0 NodeIsClientNodeRef
PUBLIC 2851a 0 NodeIsVirtual
PUBLIC 2854c 0 NodeCopyAliasHandle
PUBLIC 285c8 0 TNode::CopyAliasHandle(AliasRecord**&, OpaqueNodeRequest* const&)
PUBLIC 28718 0 TNodeTask::SetRequest(TNodePtr const&, unsigned long)
PUBLIC 28828 0 TPropertyTask::HandleFetchAliasRecord(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 2894a 0 LockFSNewAlias(FSRef const&, AliasRecord***)
PUBLIC 289a6 0 TNodeEvent::CreateNodeEvent(unsigned long, TNodePtr const&, AliasRecord**, long, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 28a0a 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, AliasRecord**, long, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 28a14 0 TNodeEvent::CreateNodeEvent(unsigned long, TNodePtr const&, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 28a6a 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 28a74 0 NodeRequestGetTask
PUBLIC 28ada 0 NodeCopyTask
PUBLIC 28b26 0 NodeDisposeTask
PUBLIC 28b6e 0 NodeCopyAsPathName
PUBLIC 28c54 0 GetNodePropertyAsInt64
PUBLIC 28cbc 0 TNode::GetFreeSpace(TPropertyReference&) const
PUBLIC 28d30 0 TNode::FreeSpaceValid() const
PUBLIC 28d62 0 THFSPlusCatalog::GetFreeSpace() const
PUBLIC 28d96 0 NodeHasCustomIcon
PUBLIC 28dc8 0 TNode::HasCustomIcon() const
PUBLIC 28de2 0 TNode::GetTypeIdentifier(TPropertyReference&) const
PUBLIC 28f90 0 TNode::KindStringDataFetched() const
PUBLIC 28fdc 0 THFSPlusRef::GetTypeIdentifierString(TUString&, bool) const
PUBLIC 2902e 0 TMetaData::GetTypeIdentifierString(TUString&, bool) const
PUBLIC 2908a 0 TMetaData::FetchTypeData(bool) const
PUBLIC 29254 0 LockCopyKindStringForRefInfo(LSExtendedFSRefInfo const*, unsigned long, __CFString const**, bool)
PUBLIC 292cc 0 LockLSCopyItemAttributeForRefInfoWithOptions(LSExtendedFSRefInfo const*, unsigned long, __CFString const*, unsigned long, void const**)
PUBLIC 29332 0 NodeEventGetStatus
PUBLIC 29388 0 NodeEventGetAliasHandle
PUBLIC 293ea 0 NodeUnregisterChangeNotification
PUBLIC 29490 0 TNode::UnregisterChangeNotification(TCountedPtr<TClientChangeNotifier> const&, unsigned long, bool)
PUBLIC 2974e 0 std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::erase(__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier>*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >)
PUBLIC 297da 0 TCountedPtr<TNotifier>* std::__copy<false, std::random_access_iterator_tag>::copy<TCountedPtr<TNotifier>*, TCountedPtr<TNotifier>*>(TCountedPtr<TNotifier>*, TCountedPtr<TNotifier>*, TCountedPtr<TNotifier>*)
PUBLIC 29814 0 THFSPlusCatalog::SetIsTrashEmpty()
PUBLIC 29920 0 NodeIsQueryHitsContainer
PUBLIC 29952 0 TNode::IsNodeQueryHitsContainer() const
PUBLIC 29966 0 TNode::RequestPropertyTask(unsigned long, TCountedPtr<TNodeTask> const&) const
PUBLIC 29a5e 0 NodeIsAlias
PUBLIC 29a90 0 TNode::IsAlias() const
PUBLIC 29aaa 0 NodeGetOriginal
PUBLIC 29b46 0 GetNodePropertyAsStringNew
PUBLIC 29b98 0 NodeRegisterChildChangedNotification
PUBLIC 29c58 0 NewNodeIterator
PUBLIC 29cc0 0 NodeFollowAlias
PUBLIC 29d5e 0 NodeIsVisible
PUBLIC 29d90 0 TNode::GetiDiskNode(bool, long&)
PUBLIC 29f4e 0 TiDiskMonitor::TiDiskMonitor()
PUBLIC 29f58 0 TiDiskMonitor::~TiDiskMonitor()
PUBLIC 29f62 0 NodeRegisterPropertyChangedNotification
PUBLIC 2a018 0 TMountPointList::RequestFullSynchronizationOfAllVolumes()
PUBLIC 2a0b4 0 NodeUnRegisterChildChangedNotification
PUBLIC 2a11a 0 NewDummyChangeNotifier(NodeClientContext)
PUBLIC 2a1b0 0 TPropertyTask::HandleFetchProperty(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 2a224 0 TNode::UpdatePropertySynchronous(unsigned long)
PUBLIC 2a664 0 IsMountPointLink(unsigned long, unsigned long)
PUBLIC 2a6ce 0 TNode::GetGenericIconRef(OpaqueIconRef*&) const
PUBLIC 2a844 0 TNode::UpdateIconRef()
PUBLIC 2a90e 0 NodeUnRegisterPropertyChangedNotification
PUBLIC 2a974 0 TNode::GetKindWithPlatform(TPropertyReference&) const
PUBLIC 2aaa2 0 THFSPlusRef::GetKindWithPlatformString(TUString&, bool) const
PUBLIC 2aae4 0 TMetaData::GetKindWithPlatformString(TUString&, bool) const
PUBLIC 2ab40 0 GetNodePropertyAsUTCDateTime
PUBLIC 2aba8 0 TNode::RecursivelyRemoveAllChildren(bool) const
PUBLIC 2ac92 0 TChildrenList::rbegin()
PUBLIC 2acc0 0 TChildrenList::rend()
PUBLIC 2acee 0 TNode::DeleteTypeSpecificData(bool)
PUBLIC 2ad3e 0 TChildrenList::DeleteChildList()
PUBLIC 2ad76 0 TChildrenList::~TChildrenList()
PUBLIC 2ad82 0 TAliasRecord::~TAliasRecord()
PUBLIC 2adb8 0 NodeEventDisposeEventQueue
PUBLIC 2adc2 0 TNodeEvent::RemoveClientQueue(OpaqueEventQueue*)
PUBLIC 2ae26 0 TNode::Remove(bool)
PUBLIC 2b0e8 0 TNode::RemoveAllChildren(bool)
PUBLIC 2b1ea 0 TNode::RemoveSelf()
PUBLIC 2b2ee 0 TNode::ResetSizes()
PUBLIC 2b3d8 0 THFSPlusRef::ResetSizeData() const
PUBLIC 2b41e 0 TChildrenList::RemoveChild(TNode*)
PUBLIC 2b544 0 TNode::UnRegisterForInternalNotifications()
PUBLIC 2b58c 0 FavoritesCallback
PUBLIC 2b5ce 0 TNode::UserCanAddFolders() const
PUBLIC 2b616 0 THFSPlusRef::UserCanAddFolder() const
PUBLIC 2b628 0 TNode::UserCanAddFiles() const
PUBLIC 2b670 0 THFSPlusRef::UserCanAddFile() const
PUBLIC 2b684 0 VolumeIsReadOnly
PUBLIC 2b6b6 0 TNode::VolumeIsReadOnly() const
PUBLIC 2b6da 0 CreatePropertyList
PUBLIC 2b6ec 0 NodeNewPropertyList
PUBLIC 2b71a 0 TPropertyMap::TPropertyMap()
PUBLIC 2b744 0 TPropertyMap::AddPtrReference()
PUBLIC 2b760 0 CopyPropertyList
PUBLIC 2b79c 0 THashTable<unsigned long, TPropertyValue>::operator=(THashTable<unsigned long, TPropertyValue> const&)
PUBLIC 2b932 0 DisposePropertyList
PUBLIC 2b944 0 TPropertyMap::RemovePtrReference()
PUBLIC 2b97e 0 THashTable<unsigned long, TPropertyValue>::clear()
PUBLIC 2b9d8 0 SetListPropertyAsStringNew
PUBLIC 2b9e2 0 NodePropertyListSetAsString
PUBLIC 2ba20 0 NodePropertyListSet(OpaquePropertyListRef*, unsigned long, TPropertyReference const&)
PUBLIC 2ba78 0 TPropertyValue::TPropertyValue(TPropertyReference const&)
PUBLIC 2ba82 0 THashTable<unsigned long, TPropertyValue>::operator[](unsigned long const&)
PUBLIC 2bb66 0 THashTable<unsigned long, TPropertyValue>::reserve(unsigned long)
PUBLIC 2bef4 0 THashTable<unsigned long, TPropertyValue>::HashEntry::HashEntry()
PUBLIC 2befe 0 std::pair<unsigned long, TPropertyValue>::pair()
PUBLIC 2bf16 0 THashTable<unsigned long, TPropertyValue>::hash_increment(unsigned long const&) const
PUBLIC 2bf46 0 NodeOperate
PUBLIC 2bfc2 0 TNode::Operate(OperationSelector const&, OpaqueOperationRef**, __CFString const*, __CFURL const*)
PUBLIC 2c06e 0 TOperation::GetFirstOperationRecordForIterator(OperationIterator*)
PUBLIC 2c0ba 0 TNodeOperationTask::TNodeOperationTask(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 2c0c4 0 TCopyMoveOperation::TCopyMoveOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 2c0ce 0 TOperation::TOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 2c3b2 0 std::allocator<std::pair<TNodePtr, TNodePtr> >::allocator()
PUBLIC 2c3b8 0 std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > >::vector(std::allocator<std::pair<TNodePtr, TNodePtr> > const&)
PUBLIC 2c3c2 0 std::_Vector_base<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > >::_Vector_base(std::allocator<std::pair<TNodePtr, TNodePtr> > const&)
PUBLIC 2c3cc 0 std::_Vector_base<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > >::_Vector_impl::_Vector_impl(std::allocator<std::pair<TNodePtr, TNodePtr> > const&)
PUBLIC 2c400 0 std::allocator<std::pair<TNodePtr, TNodePtr> >::allocator(std::allocator<std::pair<TNodePtr, TNodePtr> > const&)
PUBLIC 2c406 0 std::allocator<unsigned long>::allocator()
PUBLIC 2c40c 0 std::vector<unsigned long, std::allocator<unsigned long> >::vector(std::allocator<unsigned long> const&)
PUBLIC 2c416 0 std::_Vector_base<unsigned long, std::allocator<unsigned long> >::_Vector_base(std::allocator<unsigned long> const&)
PUBLIC 2c420 0 std::_Vector_base<unsigned long, std::allocator<unsigned long> >::_Vector_impl::_Vector_impl(std::allocator<unsigned long> const&)
PUBLIC 2c454 0 std::allocator<unsigned long>::allocator(std::allocator<unsigned long> const&)
PUBLIC 2c45c 0 TNodeOperationTask::GetOperationRefList()
PUBLIC 2c4b8 0 std::allocator<OpaqueOperationRef*>::allocator()
PUBLIC 2c4be 0 std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> >::vector(std::allocator<OpaqueOperationRef*> const&)
PUBLIC 2c4c8 0 std::_Vector_base<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> >::_Vector_base(std::allocator<OpaqueOperationRef*> const&)
PUBLIC 2c4d2 0 std::_Vector_base<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> >::_Vector_impl::_Vector_impl(std::allocator<OpaqueOperationRef*> const&)
PUBLIC 2c506 0 std::allocator<OpaqueOperationRef*>::allocator(std::allocator<OpaqueOperationRef*> const&)
PUBLIC 2c50c 0 std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> >::push_back(OpaqueOperationRef* const&)
PUBLIC 2c54e 0 std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<OpaqueOperationRef**, std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> > >, OpaqueOperationRef* const&)
PUBLIC 2c6c4 0 std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> >::size() const
PUBLIC 2c720 0 void std::_Destroy<__gnu_cxx::__normal_iterator<OpaqueOperationRef**, std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> > >, std::allocator<OpaqueOperationRef*> >(__gnu_cxx::__normal_iterator<OpaqueOperationRef**, std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> > >, __gnu_cxx::__normal_iterator<OpaqueOperationRef**, std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> > >, std::allocator<OpaqueOperationRef*>)
PUBLIC 2c74a 0 bool __gnu_cxx::operator!=<OpaqueOperationRef**, std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> > >(__gnu_cxx::__normal_iterator<OpaqueOperationRef**, std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> > > const&, __gnu_cxx::__normal_iterator<OpaqueOperationRef**, std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> > > const&)
PUBLIC 2c762 0 TNodeOperationTask::OperationTaskProc(void*)
PUBLIC 2c770 0 TNodeOperationTask::OperationTaskProcedure()
PUBLIC 2c7ac 0 TNodeOperationTask::HandleOperation(TOperation*)
PUBLIC 2ca16 0 TCopyMoveOperation::LogOperationName(OperationRecord*) const
PUBLIC 2ca62 0 TOperationTimer::TOperationTimer(char const*)
PUBLIC 2ca6c 0 TOperation::UpdateStatusStage(unsigned long)
PUBLIC 2caaa 0 TCopyMoveOperation::TransformOperations()
PUBLIC 2ce52 0 TOperation::ValidateOperations()
PUBLIC 2cf14 0 THFSPlusCatalog::Flush(bool)
PUBLIC 2cfda 0 std::allocator<THFSPlusPropertyStore*>::allocator()
PUBLIC 2cfe0 0 std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> >::vector(std::allocator<THFSPlusPropertyStore*> const&)
PUBLIC 2cfea 0 std::_Vector_base<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> >::_Vector_base(std::allocator<THFSPlusPropertyStore*> const&)
PUBLIC 2cff4 0 std::_Vector_base<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> >::_Vector_impl::_Vector_impl(std::allocator<THFSPlusPropertyStore*> const&)
PUBLIC 2d028 0 std::allocator<THFSPlusPropertyStore*>::allocator(std::allocator<THFSPlusPropertyStore*> const&)
PUBLIC 2d02e 0 THFSPlusCatalog::CopyDirtyStores(bool, TNode::StPopulating*, std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> >*)
PUBLIC 2d1cc 0 THFSPlusRef::GetPermissions() const
PUBLIC 2d1e6 0 THashTable<long long, THFSPlusPropertyStore*>::begin()
PUBLIC 2d216 0 THFSPlusPropertyStore::SetClean()
PUBLIC 2d222 0 std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> >::empty() const
PUBLIC 2d24e 0 bool __gnu_cxx::operator==<THFSPlusPropertyStore* const*, std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> > >(__gnu_cxx::__normal_iterator<THFSPlusPropertyStore* const*, std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> > > const&, __gnu_cxx::__normal_iterator<THFSPlusPropertyStore* const*, std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> > > const&)
PUBLIC 2d264 0 std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> >::~vector()
PUBLIC 2d29a 0 std::_Vector_base<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> >::~_Vector_base()
PUBLIC 2d2b2 0 TCopyMoveOperation::CheckDestination(OperationRecord*)
PUBLIC 2d2e4 0 TOperation::GetNextOperationRecordForIterator(OperationIterator*)
PUBLIC 2d32e 0 TNode::DetermineAutoRoutingDestination(TNode*, TNodePtr&) const
PUBLIC 2d3e6 0 TOperation::IncrementOperationCounts()
PUBLIC 2d44a 0 TCopyMoveOperation::AcquireDestinationLocks()
PUBLIC 2d59e 0 TOperation::CanAuthenticate(OperationRecord*)
PUBLIC 2d628 0 TOperation::AcquireChildWriteLock(TNodePtr const&)
PUBLIC 2d822 0 TNode::ChildWriter() const
PUBLIC 2d83c 0 TNode::Writers() const
PUBLIC 2d850 0 TNode::ChildWriters() const
PUBLIC 2d864 0 TNode::Writer() const
PUBLIC 2d87e 0 TNode::Readers() const
PUBLIC 2d892 0 TNode::AddChildWriter(TOperation*)
PUBLIC 2d8bc 0 TNode::AcquireOperationLock(TOperation*)
PUBLIC 2d960 0 std::pair<TNodePtr, TNodePtr>::pair(TNodePtr const&, TNodePtr const&)
PUBLIC 2d996 0 std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > >::push_back(std::pair<TNodePtr, TNodePtr> const&)
PUBLIC 2d9da 0 std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > >::_M_insert_aux(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TNodePtr>*, std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > > >, std::pair<TNodePtr, TNodePtr> const&)
PUBLIC 2db7e 0 std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > >::size() const
PUBLIC 2dbda 0 bool __gnu_cxx::operator!=<std::pair<TNodePtr, TNodePtr>*, std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > > >(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TNodePtr>*, std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > > > const&, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TNodePtr>*, std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > > > const&)
PUBLIC 2dc0c 0 std::pair<TNodePtr, TNodePtr>::pair(std::pair<TNodePtr, TNodePtr> const&)
PUBLIC 2dc42 0 void std::_Destroy<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TNodePtr>*, std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > > >, std::allocator<std::pair<TNodePtr, TNodePtr> > >(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TNodePtr>*, std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TNodePtr>*, std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > > >, std::allocator<std::pair<TNodePtr, TNodePtr> >)
PUBLIC 2dc76 0 TNode::GetOperation() const
PUBLIC 2dc8a 0 TNode::IncrementReadersBelow(TOperation*)
PUBLIC 2dca8 0 std::pair<TNodePtr, TNodePtr>::~pair()
PUBLIC 2dcca 0 TOperation::AcquireSourceLocks()
PUBLIC 2ddc2 0 TCopyMoveOperation::AcquireSourceLock(OperationRecord*)
PUBLIC 2df28 0 TOperation::AcquireReadLock(TNodePtr const&)
PUBLIC 2e1f2 0 TNode::ReadersBelow() const
PUBLIC 2e206 0 TNode::IncrementReaders(TOperation*)
PUBLIC 2e222 0 void std::_Construct<std::pair<TNodePtr, TNodePtr>, std::pair<TNodePtr, TNodePtr> >(std::pair<TNodePtr, TNodePtr>*, std::pair<TNodePtr, TNodePtr> const&)
PUBLIC 2e234 0 TOperation::ResolveConflicts()
PUBLIC 2e30c 0 TCopyMoveOperation::ResolveConflict(OperationRecord*)
PUBLIC 2ebb2 0 TCopyMoveOperation::CheckPermissions(OperationRecord*)
PUBLIC 2ed18 0 TCopyMoveOperation::TransformDestinationLocks()
PUBLIC 2edca 0 TOperation::ReleaseLock(TNodePtr const&, TNodePtr const&)
PUBLIC 2eed8 0 TNode::RemoveChildWriter(TOperation*)
PUBLIC 2ef00 0 TNode::DecrementReadersBelow()
PUBLIC 2ef3e 0 TCopyMoveOperation::NeedsSizeCheck() const
PUBLIC 2ef48 0 TOperation::CheckSize()
PUBLIC 2f070 0 TOperation::CheckSize(OperationRecord&)
PUBLIC 2f584 0 TOperation::OperationSize(TNodePtr const&, TNodePtr const&, unsigned long, bool)
PUBLIC 2f7da 0 TOperation::LaunchChild(bool)
PUBLIC 2fd40 0 TOperation::PathForTool(__CFString const*, char*)
PUBLIC 2fde4 0 IsLoggingEnabled(unsigned long long)
PUBLIC 2fe22 0 _ChildHandshake
PUBLIC 300a8 0 THFSPlusRef::UserCanDelete() const
PUBLIC 300bc 0 THFSPlusRef::UserCanDeleteChild() const
PUBLIC 300d0 0 TNode::IsSticky() const
PUBLIC 3011e 0 NodeGetNameSyntaxHint
PUBLIC 30192 0 TNode::GetNameSyntaxHint(NodeNameSyntaxHint&) const
PUBLIC 301d2 0 THFSPlusCatalog::GetNameSyntaxHint(NodeNameSyntaxHint&) const
PUBLIC 3025c 0 NodeIsApplication
PUBLIC 3028e 0 TNode::IsApplication() const
PUBLIC 302a8 0 SetNodePropertyAsStringNew
PUBLIC 302ee 0 TNode::SetName(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 3040c 0 TPropertyReference::operator==(HFSUniStr255 const&) const
PUBLIC 304be 0 TNode::SetName(HFSUniStr255 const&)
PUBLIC 30770 0 THFSPlusRef::SetName(unsigned long, unsigned short const*, bool)
PUBLIC 309e6 0 LockRenameUnicode(FSRef const&, unsigned long, unsigned short const*, unsigned long, FSRef*)
PUBLIC 30a4e 0 THFSPlusPropertyStore::RenameProperties(HFSUniStr255 const&, HFSUniStr255 const&, bool&, TPropertyInfo*&)
PUBLIC 30ac8 0 THFSPlusExtendedPropertyIterator::THFSPlusExtendedPropertyIterator(HFSUniStr255 const&, THFSPlusPropertyStore*)
PUBLIC 30ad2 0 TPropertyInfo::operator=(TPropertyInfo const&)
PUBLIC 30b22 0 TCountedPtr<TPropertyInfoList>::operator=(TCountedPtr<TPropertyInfoList> const&)
PUBLIC 30b60 0 THFSPlusPropertyStore::CopyProperties(THFSPlusExtendedPropertyIterator&, HFSUniStr255 const&, bool, bool&, TPropertyInfo*&)
PUBLIC 30c9a 0 THFSPlusExtendedPropertyIterator::First(bool)
PUBLIC 30cc6 0 THFSPlusExtendedPropertyIterator::Next(bool)
PUBLIC 30db0 0 bool __gnu_cxx::operator!=<TPropertyInfo**, TPropertyInfo* const*, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >(__gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > > const&, __gnu_cxx::__normal_iterator<TPropertyInfo* const*, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > > const&)
PUBLIC 30dc6 0 TPropertyInfo::SetName(HFSUniStr255 const&)
PUBLIC 30df4 0 THFSPlusPropertyStore::SetProperty(TPropertyInfo*)
PUBLIC 30ee8 0 bool __gnu_cxx::operator==<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >(__gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > > const&, __gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > > const&)
PUBLIC 30efe 0 std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> >::insert(__gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >, TPropertyInfo* const&)
PUBLIC 30f92 0 std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> >::~vector()
PUBLIC 30fc8 0 std::_Vector_base<TPropertyInfo*, std::allocator<TPropertyInfo*> >::~_Vector_base()
PUBLIC 30fe0 0 THFSPlusExtendedPropertyIterator::RemoveProperties()
PUBLIC 310e6 0 std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> >::erase(__gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >)
PUBLIC 31142 0 THFSPlusExtendedPropertyIterator::~THFSPlusExtendedPropertyIterator()
PUBLIC 3114c 0 TNode::InvalidateTypeData() const
PUBLIC 3117e 0 THFSPlusRef::InvalidateTypeInfo() const
PUBLIC 31198 0 TNodeSyncTask::HandleInternalFNNotify(TCountedPtr<TNodeEvent> const&, TNodePtr const&)
PUBLIC 3134c 0 TChildrenList::LastNotifyTime() const
PUBLIC 3138a 0 LockFNNotify(FSRef const&, unsigned long, unsigned long)
PUBLIC 313e2 0 TChildrenList::SetLastNotifyTime(double)
PUBLIC 31432 0 TChildrenList::SetNotifyPending(bool)
PUBLIC 3148a 0 NodeFNNotificationHook(unsigned long, unsigned long, void*, OpaqueFNSubscriptionRef*)
PUBLIC 314fc 0 TNode::SetForceSync(bool)
PUBLIC 3155e 0 TChildrenList::SetForceSync(bool)
PUBLIC 315b6 0 TOperation::GetParentPort(unsigned int*)
PUBLIC 31604 0 _ChildOperationFolderSize
PUBLIC 31838 0 LocumParentMessageHandler
PUBLIC 318c6 0 LocumParentDefs_server
PUBLIC 31946 0 _XNotifyOperationDone
PUBLIC 3199a 0 _ParentXNotifyOperationDone
PUBLIC 319b2 0 TFSInfo::GetVolumeInfoRecord(VolumeInfoRecord&) const
PUBLIC 31c76 0 TOperation::ReportConflicts()
PUBLIC 32178 0 TOperation::GetSuboperation() const
PUBLIC 32180 0 TNodeEvent::CreateNodeEvent(unsigned long, OperationErrorRecord*, OperationIterator*, OperationMonitor*, TCountedPtr<TNotifier> const&, unsigned long)
PUBLIC 321e4 0 TNodeEvent::TNodeEvent(unsigned long, OperationErrorRecord*, OperationIterator*, OperationMonitor*, TCountedPtr<TNotifier> const&, unsigned long)
PUBLIC 321ee 0 TNodeEvent::Notify(TCountedPtr<TNodeEvent> const&, bool, bool)
PUBLIC 32322 0 NodeEventGetErrorRecord
PUBLIC 32392 0 NodeEventGetOperationIterator
PUBLIC 32402 0 NodeGetStatus
PUBLIC 32494 0 TNodeOperationTask::IsOperationRefValid(OpaqueOperationRef*&)
PUBLIC 32516 0 ConflictIteratorNext(OpaqueOperationData*)
PUBLIC 3256c 0 TConflictIterator::Next() const
PUBLIC 3259e 0 NodeEventPostReply
PUBLIC 325a8 0 GetFileSuffix(HFSUniStr255 const&, HFSUniStr255&)
PUBLIC 32626 0 TUniqueNamer::TUniqueNamer(long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), HFSUniStr255 const&, NodeNameSyntaxHint const&)
PUBLIC 32630 0 TUniqueNamer::NextUniqueName(HFSUniStr255&)
PUBLIC 326c2 0 TNode::CreateNewChildLockItem(TOperation&, OperationRecord*, HFSUniStr255 const&, TNodePtr, TCountedPtr<TPropertyMap> const&, TNodePtr&)
PUBLIC 32908 0 THFSPlusExtendedPropertyIterator::THFSPlusExtendedPropertyIterator(TNodePtr const&)
PUBLIC 32912 0 TNode::TNode(TNode*, HFSUniStr255 const&)
PUBLIC 32a4a 0 TOperation::IsMigration(OperationRecord*) const
PUBLIC 32ab0 0 TNode::IsBackupRoot() const
PUBLIC 32b6c 0 TNode::CreateNewLockDirectory(TOperation&, OperationRecord*, HFSUniStr255 const&, bool, TNode*)
PUBLIC 32f30 0 THFSPlusRef::InitializeIsVisible(bool)
PUBLIC 32f76 0 THFSPlusRef::InitializeIsExtensionHidden(bool)
PUBLIC 32faa 0 TNode::IsBackup() const
PUBLIC 3305a 0 TNode::CopySourceFileSecurityRefForCopy(bool, bool) const
PUBLIC 330a2 0 THFSPlusRef::CopySourceFileSecurityRefForCopy(bool, bool, bool) const
PUBLIC 3320c 0 THFSPlusRef::InitializeFileSecurityRef(__FSFileSecurity*)
PUBLIC 33228 0 THFSPlusRef::IsDropBox() const
PUBLIC 3325a 0 THFSPlusRef::InitializeBusyBitSet()
PUBLIC 3327a 0 THFSPlusRef::CreateDirectory(FSRef const&, HFSUniStr255 const&, NodeNameSyntaxHint const&, long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*))
PUBLIC 33326 0 THFSPlusRef::GetFSDirtyCatalogInfoFrom(FSCatalogInfo&, bool) const
PUBLIC 334ea 0 LockCreateDirectoryUnicode(FSRef const&, HFSUniStr255 const&, NodeNameSyntaxHint const&, long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), unsigned long, FSCatalogInfo const*, FSRef*)
PUBLIC 33616 0 THFSPlusRef::SetCreateDate(UTCDateTime, bool)
PUBLIC 33634 0 THFSPlusRef::IsBackupRoot() const
PUBLIC 33726 0 THFSPlusRef::IsBackup() const
PUBLIC 33808 0 TFSInfo::CopyExtendedAttributes(FSRef const&, FSRef const&, bool)
PUBLIC 3388e 0 TNode::CopyProperties(THFSPlusExtendedPropertyIterator&)
PUBLIC 3394e 0 THashTable<unsigned long, TPropertyValue>::begin()
PUBLIC 3397e 0 TOperation::AcquireWriteLock(TNodePtr const&)
PUBLIC 33c0a 0 TNode::AddWriter(TOperation*)
PUBLIC 33c34 0 TUniqueNamer::~TUniqueNamer()
PUBLIC 33c3a 0 TOperation::ReportStatus(bool)
PUBLIC 33d18 0 TOperationTimer::LogPreflightEnded()
PUBLIC 33e04 0 TOperation::ProcessSelection()
PUBLIC 33ed6 0 std::allocator<OperationRecord*>::allocator()
PUBLIC 33edc 0 std::list<OperationRecord*, std::allocator<OperationRecord*> >::list(std::allocator<OperationRecord*> const&)
PUBLIC 33ee6 0 std::_List_base<OperationRecord*, std::allocator<OperationRecord*> >::_List_base(std::allocator<OperationRecord*> const&)
PUBLIC 33f20 0 std::allocator<std::_List_node<OperationRecord*> >::allocator<OperationRecord*>(std::allocator<OperationRecord*> const&)
PUBLIC 33f26 0 std::_List_base<OperationRecord*, std::allocator<OperationRecord*> >::_List_impl::_List_impl(std::allocator<std::_List_node<OperationRecord*> > const&)
PUBLIC 33f30 0 std::allocator<std::_List_node<OperationRecord*> >::allocator(std::allocator<std::_List_node<OperationRecord*> > const&)
PUBLIC 33f36 0 TOperation::ValidateCurrentRecordConflicts()
PUBLIC 34202 0 TCopyMoveOperation::PerformOperation(OperationRecord*)
PUBLIC 344b8 0 TCopyMoveOperation::NeedsAuthentication(OperationRecord*)
PUBLIC 344ec 0 TCopyMoveOperation::PerformCopyOrForceMove(OperationRecord*)
PUBLIC 34abe 0 TCopyMoveOperation::GetCopyReader() const
PUBLIC 34c2c 0 TCopyQueue::TCopyQueue(OperationReporter*)
PUBLIC 34c36 0 TCopyQueue::Initialize()
PUBLIC 34c92 0 TCopyReader::TCopyReader(TCopyQueue*, bool, bool, bool)
PUBLIC 34ca8 0 TCopyItem::TCopyItem()
PUBLIC 34d26 0 FSPermissions::FSPermissions()
PUBLIC 34d80 0 std::allocator<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >::allocator()
PUBLIC 34d86 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > > >::allocator<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >(std::allocator<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > > const&)
PUBLIC 34d8c 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*>::allocator(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> const&)
PUBLIC 34d92 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*>::~allocator()
PUBLIC 34d98 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::vector(unsigned long, __gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >* const&, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> const&)
PUBLIC 34efa 0 void std::__fill<true>::fill<__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> > >, __gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*>(__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> > >, __gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> > >, __gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >* const&)
PUBLIC 34f30 0 bool __gnu_cxx::operator!=<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> > >(__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> > > const&, __gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> > > const&)
PUBLIC 34f46 0 std::allocator<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >::~allocator()
PUBLIC 34f4c 0 std::allocator<TReservationRecord*>::allocator()
PUBLIC 34f52 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::deque(std::allocator<TReservationRecord*> const&)
PUBLIC 34f74 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::_Deque_base(std::allocator<TReservationRecord*> const&, unsigned long)
PUBLIC 34fbe 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::_Deque_impl::_Deque_impl(std::allocator<TReservationRecord*> const&)
PUBLIC 35028 0 std::allocator<TReservationRecord*>::allocator(std::allocator<TReservationRecord*> const&)
PUBLIC 3502e 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_initialize_map(unsigned long)
PUBLIC 35124 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_allocate_map(unsigned long)
PUBLIC 35184 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_get_map_allocator() const
PUBLIC 351c6 0 std::allocator<TReservationRecord**>::allocator<TReservationRecord*>(std::allocator<TReservationRecord*> const&)
PUBLIC 351cc 0 std::allocator<TReservationRecord*>::~allocator()
PUBLIC 351f4 0 std::allocator<TReservationRecord**>::~allocator()
PUBLIC 351fa 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_create_nodes(TReservationRecord***, TReservationRecord***)
PUBLIC 35260 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_allocate_node()
PUBLIC 352a6 0 std::stack<TReservationRecord*, std::deque<TReservationRecord*, std::allocator<TReservationRecord*> > >::stack(std::deque<TReservationRecord*, std::allocator<TReservationRecord*> > const&)
PUBLIC 352b0 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::deque(std::deque<TReservationRecord*, std::allocator<TReservationRecord*> > const&)
PUBLIC 353f2 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>::difference_type std::operator-<TReservationRecord*, TReservationRecord*&, TReservationRecord**, TReservationRecord*&, TReservationRecord**>(std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> const&, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> const&)
PUBLIC 35422 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> std::__uninitialized_copy_a<std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>, TReservationRecord*>(std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>, std::allocator<TReservationRecord*>)
PUBLIC 3549a 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> std::uninitialized_copy<std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> >(std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>)
PUBLIC 35516 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> std::__uninitialized_copy_aux<std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> >(std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>, __true_type)
PUBLIC 3558e 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> std::copy<std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> >(std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>)
PUBLIC 35606 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> std::__copy_normal<false, false>::copy_n<std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> >(std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>)
PUBLIC 3567e 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> std::__copy_aux<std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> >(std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>)
PUBLIC 356f6 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> std::__copy<false, std::random_access_iterator_tag>::copy<std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> >(std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>)
PUBLIC 35798 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>::difference_type std::operator-<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*, TReservationRecord* const&, TReservationRecord* const*>(std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*> const&, std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*> const&)
PUBLIC 357c8 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::~deque()
PUBLIC 35846 0 void std::_Destroy<std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>, std::allocator<TReservationRecord*> >(std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>, std::allocator<TReservationRecord*>)
PUBLIC 35880 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::~_Deque_base()
PUBLIC 358d8 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_deallocate_node(TReservationRecord**)
PUBLIC 358e8 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_deallocate_map(TReservationRecord***, unsigned long)
PUBLIC 3591c 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::_Deque_impl::~_Deque_impl()
PUBLIC 35926 0 TCopyReader::CreateWriter()
PUBLIC 3599a 0 TCopyWriter::WriteTaskProc(void*)
PUBLIC 35a08 0 TCopyWriter::TCopyWriter(TCopyQueue*)
PUBLIC 35bdc 0 std::allocator<TCopyItem*>::allocator()
PUBLIC 35be2 0 std::vector<TCopyItem*, std::allocator<TCopyItem*> >::vector(std::allocator<TCopyItem*> const&)
PUBLIC 35bec 0 std::_Vector_base<TCopyItem*, std::allocator<TCopyItem*> >::_Vector_base(std::allocator<TCopyItem*> const&)
PUBLIC 35bf6 0 std::_Vector_base<TCopyItem*, std::allocator<TCopyItem*> >::_Vector_impl::_Vector_impl(std::allocator<TCopyItem*> const&)
PUBLIC 35c2a 0 std::allocator<TCopyItem*>::allocator(std::allocator<TCopyItem*> const&)
PUBLIC 35c30 0 std::allocator<TCopyItem*>::~allocator()
PUBLIC 35caa 0 std::allocator<std::pair<std::pair<unsigned int, int> const, FSRef> >::allocator()
PUBLIC 35cb0 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> > >::allocator<std::pair<std::pair<unsigned int, int> const, FSRef> >(std::allocator<std::pair<std::pair<unsigned int, int> const, FSRef> > const&)
PUBLIC 35cb6 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*>::allocator<std::pair<std::pair<unsigned int, int> const, FSRef> >(std::allocator<std::pair<std::pair<unsigned int, int> const, FSRef> > const&)
PUBLIC 35cbc 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::~_Vector_base()
PUBLIC 35ce2 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*>::allocator(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> const&)
PUBLIC 35ce8 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*>::~allocator()
PUBLIC 35dae 0 bool __gnu_cxx::operator!=<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> > >(__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> > > const&, __gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> > > const&)
PUBLIC 35dc4 0 std::allocator<std::pair<std::pair<unsigned int, int> const, FSRef> >::~allocator()
PUBLIC 35dca 0 TCopyWriter::Write()
PUBLIC 3607c 0 TCopyWriter::GetNextItem()
PUBLIC 36396 0 TCopyQueue::Dequeue()
PUBLIC 363ea 0 NodeEventGetMonitor
PUBLIC 3645a 0 TCopyReader::Read(void*, TFSInfo, TFSInfo)
PUBLIC 36708 0 TCopyReader::Reinitialize(void*, TFSInfo, TFSInfo)
PUBLIC 36782 0 TCopyQueue::SetNextRootRecord(void*, TFSInfo&, TFSInfo&)
PUBLIC 369f8 0 TFSInfo::operator=(TFSInfo const&)
PUBLIC 36b2a 0 TFSInfo::IsBackup() const
PUBLIC 36bfc 0 TFSInfo::IsBackupRoot() const
PUBLIC 36cd8 0 TCopyQueue::GetCopyBufferSize()
PUBLIC 36ed0 0 TCopyReader::GetNextItem()
PUBLIC 376dc 0 TDeepFSIterator::RecordHardlink(__gnu_cxx::hash_map<std::pair<unsigned int, int>, std::pair<unsigned int, int>, TINodeHasher, std::equal_to<std::pair<unsigned int, int> >, std::allocator<std::pair<unsigned int, int> > >*, TFSInfo&)
PUBLIC 377a4 0 TCopyQueue::DestinationIsDropBox() const
PUBLIC 377c0 0 TFSInfo::IsDropBox() const
PUBLIC 37806 0 TFSInfo::UserCanRead() const
PUBLIC 37824 0 TCopyQueue::DestinationSupportsInvisibleBit() const
PUBLIC 37838 0 TCopyQueue::GetTargetName(HFSUniStr255&) const
PUBLIC 37864 0 GetTargetName(unsigned long long, TFSInfo const&, HFSUniStr255&)
PUBLIC 3789c 0 TCopyQueue::UseCopyFile() const
PUBLIC 378dc 0 TCopyQueue::GetDestinationVRefNum()
PUBLIC 378ec 0 TCopyItem::operator=(TCopyItem const&)
PUBLIC 37c4e 0 FSPermissions::operator=(FSPermissions const&)
PUBLIC 37ca2 0 TCopyItem::SetSavedSecurityRef(__FSFileSecurity*)
PUBLIC 37cec 0 TCopyItem::~TCopyItem()
PUBLIC 37cf6 0 FSPermissions::~FSPermissions()
PUBLIC 37d00 0 TDeepFSIterator::TDeepFSIterator(TFSInfo const&, unsigned long, bool, bool, __gnu_cxx::hash_map<std::pair<unsigned int, int>, std::pair<unsigned int, int>, TINodeHasher, std::equal_to<std::pair<unsigned int, int> >, std::allocator<std::pair<unsigned int, int> > >*, std::stack<TReservationRecord*, std::deque<TReservationRecord*, std::allocator<TReservationRecord*> > >*, bool)
PUBLIC 37d16 0 std::allocator<TFSIterator*>::allocator()
PUBLIC 37d1c 0 std::vector<TFSIterator*, std::allocator<TFSIterator*> >::vector(std::allocator<TFSIterator*> const&)
PUBLIC 37d26 0 std::_Vector_base<TFSIterator*, std::allocator<TFSIterator*> >::_Vector_base(std::allocator<TFSIterator*> const&)
PUBLIC 37d30 0 std::_Vector_base<TFSIterator*, std::allocator<TFSIterator*> >::_Vector_impl::_Vector_impl(std::allocator<TFSIterator*> const&)
PUBLIC 37d64 0 std::allocator<TFSIterator*>::allocator(std::allocator<TFSIterator*> const&)
PUBLIC 37d6a 0 std::allocator<TFSIterator*>::~allocator()
PUBLIC 37d72 0 TDeepFSIterator::Reset()
PUBLIC 37f1e 0 TFSIterator::TFSIterator(TFSInfo const&, unsigned long, unsigned long)
PUBLIC 37f7e 0 TFSInfo::IsPackage() const
PUBLIC 37faa 0 TFSInfo::FetchData()
PUBLIC 3803a 0 TDeepFSIterator::ResetReservationStack()
PUBLIC 380a2 0 CancelOperationRequested(unsigned long long)
PUBLIC 380ba 0 TCopyReader::QueueItem()
PUBLIC 381dc 0 TCopyItem::TCopyItem(TCopyItem const&)
PUBLIC 38570 0 TCopyQueueItem::TCopyQueueItem(unsigned long, void*, unsigned long, TCopyQueue*)
PUBLIC 38598 0 TCopyItem::ItemType() const
PUBLIC 385de 0 TDeepFSIterator::Next(TFSInfo&, long&, long&, bool&)
PUBLIC 3865e 0 TDeepFSIterator::NextInternal(TFSInfo&, long&, long&, bool&)
PUBLIC 387b2 0 TFSIterator::Next(TFSInfo&)
PUBLIC 38824 0 TFSIterator::First(TFSInfo&)
PUBLIC 3885e 0 TDeepFSIterator::PopIterator()
PUBLIC 389a8 0 TFSIterator::~TFSIterator()
PUBLIC 389fe 0 std::vector<TFSIterator*, std::allocator<TFSIterator*> >::empty() const
PUBLIC 38a2a 0 bool __gnu_cxx::operator==<TFSIterator* const*, std::vector<TFSIterator*, std::allocator<TFSIterator*> > >(__gnu_cxx::__normal_iterator<TFSIterator* const*, std::vector<TFSIterator*, std::allocator<TFSIterator*> > > const&, __gnu_cxx::__normal_iterator<TFSIterator* const*, std::vector<TFSIterator*, std::allocator<TFSIterator*> > > const&)
PUBLIC 38a40 0 TCopyQueue::WaitOnRecordDone()
PUBLIC 38a7a 0 std::vector<TCopyItem*, std::allocator<TCopyItem*> >::empty() const
PUBLIC 38aa6 0 bool __gnu_cxx::operator==<TCopyItem* const*, std::vector<TCopyItem*, std::allocator<TCopyItem*> > >(__gnu_cxx::__normal_iterator<TCopyItem* const*, std::vector<TCopyItem*, std::allocator<TCopyItem*> > > const&, __gnu_cxx::__normal_iterator<TCopyItem* const*, std::vector<TCopyItem*, std::allocator<TCopyItem*> > > const&)
PUBLIC 38abc 0 TFSInfo::IsApplication() const
PUBLIC 38ade 0 TCopyItem::SetClassicOverride()
PUBLIC 38b20 0 std::vector<TCopyItem*, std::allocator<TCopyItem*> >::push_back(TCopyItem* const&)
PUBLIC 38b64 0 std::vector<TCopyItem*, std::allocator<TCopyItem*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<TCopyItem**, std::vector<TCopyItem*, std::allocator<TCopyItem*> > >, TCopyItem* const&)
PUBLIC 38cfa 0 std::vector<TCopyItem*, std::allocator<TCopyItem*> >::size() const
PUBLIC 38d9c 0 void std::_Destroy<__gnu_cxx::__normal_iterator<TCopyItem**, std::vector<TCopyItem*, std::allocator<TCopyItem*> > >, std::allocator<TCopyItem*> >(__gnu_cxx::__normal_iterator<TCopyItem**, std::vector<TCopyItem*, std::allocator<TCopyItem*> > >, __gnu_cxx::__normal_iterator<TCopyItem**, std::vector<TCopyItem*, std::allocator<TCopyItem*> > >, std::allocator<TCopyItem*>)
PUBLIC 38dc6 0 bool __gnu_cxx::operator!=<TCopyItem**, std::vector<TCopyItem*, std::allocator<TCopyItem*> > >(__gnu_cxx::__normal_iterator<TCopyItem**, std::vector<TCopyItem*, std::allocator<TCopyItem*> > > const&, __gnu_cxx::__normal_iterator<TCopyItem**, std::vector<TCopyItem*, std::allocator<TCopyItem*> > > const&)
PUBLIC 38ddc 0 TCopyQueueItem::~TCopyQueueItem()
PUBLIC 38de6 0 TCopyWriter::ReportStatus(bool)
PUBLIC 38ebc 0 TCopyWriter::UpdateTimeRemaining(unsigned long)
PUBLIC 390e4 0 TFSInfo::GetDisplayName() const
PUBLIC 391d8 0 TCopyQueue::ReportStatus(OperationStatus const&, HFSUniStr255 const&, FSRef const&, bool)
PUBLIC 392ee 0 UpdateOperationStatus(unsigned long long, unsigned long, unsigned short const*, long long, long long, long long, long long, unsigned long, bool)
PUBLIC 394d4 0 TOperation::UpdateStatusCurrentItem(unsigned long, unsigned short const*)
PUBLIC 39524 0 TCopyWriter::CreateItem()
PUBLIC 39ce2 0 TCopyWriter::UpdateStatusCurrentItem()
PUBLIC 39d16 0 TCopyItem::IsSymlink() const
PUBLIC 39d2c 0 TFSInfo::IsSymlink() const
PUBLIC 39d54 0 TCopyItem::PrepareFinderInfoForCopy()
PUBLIC 39eb0 0 TFSInfo::PrepareFinderInfoForCopy(bool, bool)
PUBLIC 39f3e 0 TFSCatalogInfo::SetLockBit(bool)
PUBLIC 39f56 0 TFSCatalogInfo::ClearBackupDate()
PUBLIC 39f72 0 TFSCatalogInfo::SetBusyCreateDate()
PUBLIC 39fa0 0 TCopyWriter::CheckForExistingLockItem()
PUBLIC 3a14c 0 TCopyItem::CopyCatalogInfo(FSCatalogInfo const&)
PUBLIC 3a158 0 TFSInfo::CopyCatalogInfo(FSCatalogInfo const&)
PUBLIC 3a16c 0 TFSCatalogInfo::CopyInfoForCopy(FSCatalogInfo const&)
PUBLIC 3a1b6 0 TCopyItem::SetFSRef(FSRef const&, FSRef const&)
PUBLIC 3a1c2 0 TFSInfo::SetFSRef(FSRef const&, FSRef const&)
PUBLIC 3a206 0 TCopyItem::SetName(HFSUniStr255 const&)
PUBLIC 3a210 0 TFSInfo::SetName(HFSUniStr255 const&)
PUBLIC 3a244 0 TCopyWriter::SetWriteItemPermissions()
PUBLIC 3a2e0 0 FSPermissions::ClearStickyBits()
PUBLIC 3a2ee 0 TCopyQueue::DestinationSupportsACLS() const
PUBLIC 3a302 0 TCopyQueue::SourceSupportsACLS() const
PUBLIC 3a316 0 TCopyItem::SetSavedPermissions(FSPermissions*, bool, bool)
PUBLIC 3a390 0 TCopyWriter::DelayIfNeeded()
PUBLIC 3a408 0 std::vector<TCopyItem*, std::allocator<TCopyItem*> >::back()
PUBLIC 3a416 0 TCopyWriter::SetCatalogInfo()
PUBLIC 3aa1c 0 TCopyItem::CopySavedPermissions(FSPermissions*) const
PUBLIC 3aa36 0 FSPermissions::AddMode(unsigned short)
PUBLIC 3aa46 0 TCopyItem::CopySavedSecurityRef() const
PUBLIC 3aa6e 0 TCopyQueue::DoPostProc(FSRef const&, FSRef const&, unsigned long, FSCatalogInfo const*)
PUBLIC 3aaa8 0 FSPermissions::GetFileSec() const
PUBLIC 3aab6 0 TCopyItem::GetIconRef() const
PUBLIC 3aac4 0 FlushLock(FSRef const&, OpaqueIconRef* const&)
PUBLIC 3ab5c 0 TNode::InvalidateCachedData() const
PUBLIC 3abd8 0 TNode::InvalidatePermissionsData() const
PUBLIC 3abf0 0 TNode::ResetPermissions() const
PUBLIC 3ac26 0 THFSPlusRef::ResetPermissions() const
PUBLIC 3ac44 0 TNode::InvalidateSizeData() const
PUBLIC 3ac62 0 THFSPlusRef::ResetCache()
PUBLIC 3ac9a 0 THFSPlusRef::RecalculateExtension()
PUBLIC 3acca 0 TCopyWriter::DestroyCurrentItem()
PUBLIC 3ae4c 0 TFSInfo::GetName() const
PUBLIC 3ae6c 0 TCopyQueue::NotifyRecordDone()
PUBLIC 3aea0 0 TDeepFSIterator::~TDeepFSIterator()
PUBLIC 3aeac 0 TDeepFSIterator::DestroyIterators()
PUBLIC 3af58 0 bool __gnu_cxx::operator!=<TFSIterator**, std::vector<TFSIterator*, std::allocator<TFSIterator*> > >(__gnu_cxx::__normal_iterator<TFSIterator**, std::vector<TFSIterator*, std::allocator<TFSIterator*> > > const&, __gnu_cxx::__normal_iterator<TFSIterator**, std::vector<TFSIterator*, std::allocator<TFSIterator*> > > const&)
PUBLIC 3af6e 0 std::vector<TFSIterator*, std::allocator<TFSIterator*> >::erase(__gnu_cxx::__normal_iterator<TFSIterator**, std::vector<TFSIterator*, std::allocator<TFSIterator*> > >, __gnu_cxx::__normal_iterator<TFSIterator**, std::vector<TFSIterator*, std::allocator<TFSIterator*> > >)
PUBLIC 3b024 0 void std::_Destroy<__gnu_cxx::__normal_iterator<TFSIterator**, std::vector<TFSIterator*, std::allocator<TFSIterator*> > >, std::allocator<TFSIterator*> >(__gnu_cxx::__normal_iterator<TFSIterator**, std::vector<TFSIterator*, std::allocator<TFSIterator*> > >, __gnu_cxx::__normal_iterator<TFSIterator**, std::vector<TFSIterator*, std::allocator<TFSIterator*> > >, std::allocator<TFSIterator*>)
PUBLIC 3b060 0 std::vector<TFSIterator*, std::allocator<TFSIterator*> >::~vector()
PUBLIC 3b0a0 0 std::_Vector_base<TFSIterator*, std::allocator<TFSIterator*> >::~_Vector_base()
PUBLIC 3b0c6 0 std::_Vector_base<TFSIterator*, std::allocator<TFSIterator*> >::_Vector_impl::~_Vector_impl()
PUBLIC 3b0d0 0 TCopyReader::ReadCleanup()
PUBLIC 3b104 0 TOperation::AddExternalNotification(FSRef const&, unsigned long)
PUBLIC 3b170 0 THashTable<TFSRef, int>::find(TFSRef const&)
PUBLIC 3b256 0 THashTable<TFSRef, int>::operator[](TFSRef const&)
PUBLIC 3b358 0 THashTable<TFSRef, int>::reserve(unsigned long)
PUBLIC 3b6e8 0 THashTable<TFSRef, int>::HashEntry::HashEntry()
PUBLIC 3b6f2 0 std::pair<TFSRef, int>::pair()
PUBLIC 3b708 0 THashTable<TFSRef, int>::hash_increment(TFSRef const&) const
PUBLIC 3b738 0 std::_List_base<OperationRecord*, std::allocator<OperationRecord*> >::~_List_base()
PUBLIC 3b742 0 std::_List_base<OperationRecord*, std::allocator<OperationRecord*> >::_M_clear()
PUBLIC 3b782 0 TOperation::FlushAfterOperation()
PUBLIC 3b7dc 0 THFSPlusPropertyStore::IsInPackage()
PUBLIC 3b8b8 0 TFSInfo::IsInPackage() const
PUBLIC 3b9f8 0 THFSPlusPropertyStore::THFSPlusPropertyStore(THFSPlusPropertyStore const&)
PUBLIC 3ba02 0 std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> >::push_back(THFSPlusPropertyStore* const&)
PUBLIC 3ba44 0 std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<THFSPlusPropertyStore**, std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> > >, THFSPlusPropertyStore* const&)
PUBLIC 3bbba 0 std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> >::size() const
PUBLIC 3bc38 0 void std::_Destroy<__gnu_cxx::__normal_iterator<THFSPlusPropertyStore**, std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> > >, std::allocator<THFSPlusPropertyStore*> >(__gnu_cxx::__normal_iterator<THFSPlusPropertyStore**, std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> > >, __gnu_cxx::__normal_iterator<THFSPlusPropertyStore**, std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> > >, std::allocator<THFSPlusPropertyStore*>)
PUBLIC 3bc62 0 bool __gnu_cxx::operator!=<THFSPlusPropertyStore**, std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> > >(__gnu_cxx::__normal_iterator<THFSPlusPropertyStore**, std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> > > const&, __gnu_cxx::__normal_iterator<THFSPlusPropertyStore**, std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> > > const&)
PUBLIC 3bc78 0 THFSPlusPropertyStore::FlushChanges()
PUBLIC 3bdec 0 TPropertyInfo::FlushChanges(FSRef const*, TCountedPtr<TPropertyInfoList> const&, bool)
PUBLIC 3c2c0 0 SafeOpen(FSRef const&, short&, signed char)
PUBLIC 3c386 0 BTree::Put(IAOrderedStorable*)
PUBLIC 3c420 0 TPropertyInfo::StoreSize() const
PUBLIC 3c4d4 0 BTree::PutInternal(Page*, Page*, PageEntry*, IAOrderedStorable*, unsigned long)
PUBLIC 3c620 0 Page::FingerEntry(IAOrderedStorable const*, void**)
PUBLIC 3c648 0 Page::SetFinger(void*, void**)
PUBLIC 3c6e0 0 BTree::InsertObject(Page*, void**, IAOrderedStorable*)
PUBLIC 3c724 0 Page::InsertEntryAtFinger(PageEntry*, void**)
PUBLIC 3c776 0 Leaf::EntryStoreSize(PageEntry*)
PUBLIC 3c782 0 BTree::Rebalance(Page*, Page*, PageEntry*, unsigned long)
PUBLIC 3c7e8 0 BTree::RebalanceRoot()
PUBLIC 3c836 0 TPropertyInfo::LessThan(IAOrderedStorable const*) const
PUBLIC 3c8a4 0 UInt32Set::Equal(void*, void*)
PUBLIC 3c8ba 0 SkipList::Remove(void*, void*)
PUBLIC 3c93c 0 SkipList::RemoveNode(void*, void**)
PUBLIC 3c9e6 0 BuddyStorage::AddAddress(unsigned long, unsigned char, UInt32Set**)
PUBLIC 3ca64 0 Leaf::EntryStore(PageEntry*, IAOutputBlock*)
PUBLIC 3ca7e 0 TPropertyInfo::Store(IAOutputBlock*) const
PUBLIC 3cd8a 0 IAStoreStream::WriteBufferOfUInt16(void const*, unsigned long)
PUBLIC 3cdbc 0 IAStoreStream::WriteUInt16(unsigned short)
PUBLIC 3ce24 0 IAStoreStream::WriteBytes(void const*, unsigned long)
PUBLIC 3ce66 0 TPropertyStream::SetLength(long)
PUBLIC 3cf84 0 THFSPlusPropertyStore::~THFSPlusPropertyStore()
PUBLIC 3cf8e 0 TPropertyInfoList::~TPropertyInfoList()
PUBLIC 3cf98 0 TOperation::ReleaseLocks()
PUBLIC 3d1f4 0 TCopyMoveOperation::DeleteLockFilesIfNeeded(OperationRecord*)
PUBLIC 3d320 0 TNode::GetChildrenCount() const
PUBLIC 3d396 0 THFSPlusRef::GetCount() const
PUBLIC 3d3ac 0 TNode::DeleteIfLockFile(bool)
PUBLIC 3d4d2 0 THFSPlusRef::IsBusyDate(UTCDateTime const&)
PUBLIC 3d510 0 std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > >::operator[](unsigned long)
PUBLIC 3d522 0 TNode::RemoveWriter(TOperation*)
PUBLIC 3d576 0 TNode::ReleaseOperationLock()
PUBLIC 3d5b0 0 TNode::DecrementReaders()
PUBLIC 3d5ec 0 TOperationTimer::~TOperationTimer()
PUBLIC 3d5f8 0 TNodeOperationTask::Finalize()
PUBLIC 3d612 0 TCopyMoveOperation::Finalize()
PUBLIC 3d672 0 TCopyReader::Finalize()
PUBLIC 3d6f0 0 TCopyQueue::SetReadCompleted()
PUBLIC 3d6fc 0 TOperation::CleanupAll()
PUBLIC 3d7a2 0 TCopyMoveOperation::Cleanup(OperationRecord*)
PUBLIC 3d800 0 TOperation::SendPropertyChangeNotification(TNodePtr const&, unsigned long)
PUBLIC 3d830 0 TNodeOperationTask::Completed()
PUBLIC 3d99c 0 TCopyMoveOperation::~TCopyMoveOperation()
PUBLIC 3d9a8 0 TCopyReader::~TCopyReader()
PUBLIC 3d9b2 0 TCopyQueue::WaitOnCopyDone()
PUBLIC 3d9f8 0 TCopyWriter::HandleError(long)
PUBLIC 3dad2 0 TCopyWriter::WriteCleanup()
PUBLIC 3dcd2 0 FinalizeOperation()
PUBLIC 3dcda 0 TCopyWriter::~TCopyWriter()
PUBLIC 3dd62 0 TCopyQueue::SetWriteComplete()
PUBLIC 3dda2 0 TCopyWriter::ResetReservationStack()
PUBLIC 3ddf6 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::vector(unsigned long, __gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >* const&, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> const&)
PUBLIC 3de56 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> > >::~allocator()
PUBLIC 3de5c 0 std::vector<TCopyItem*, std::allocator<TCopyItem*> >::~vector()
PUBLIC 3de9c 0 std::_Vector_base<TCopyItem*, std::allocator<TCopyItem*> >::~_Vector_base()
PUBLIC 3dec2 0 std::_Vector_base<TCopyItem*, std::allocator<TCopyItem*> >::_Vector_impl::~_Vector_impl()
PUBLIC 3decc 0 TCopyQueue::~TCopyQueue()
PUBLIC 3ded6 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::_Vector_base(unsigned long, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> const&)
PUBLIC 3df30 0 _ChildOperationComplete
PUBLIC 3df8e 0 TOperation::PortInvalidationCallback(__CFMachPort*, void*)
PUBLIC 3df9e 0 TOperation::PostExternalNotificationsAtEndOfOperation()
PUBLIC 3e026 0 THashTable<TFSRef, int>::begin()
PUBLIC 3e056 0 THashTable<TFSRef, int>::clear()
PUBLIC 3e0ac 0 std::vector<unsigned long, std::allocator<unsigned long> >::~vector()
PUBLIC 3e0e2 0 std::_Vector_base<unsigned long, std::allocator<unsigned long> >::~_Vector_base()
PUBLIC 3e0fa 0 std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > >::~vector()
PUBLIC 3e140 0 std::_Vector_base<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > >::~_Vector_base()
PUBLIC 3e158 0 TNodeOperationTask::RemoveOperationRef(OpaqueOperationRef*&)
PUBLIC 3e1c0 0 std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> >::erase(__gnu_cxx::__normal_iterator<OpaqueOperationRef**, std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> > >)
PUBLIC 3e21c 0 GetNodePropertyAsPoint
PUBLIC 3e284 0 TNode::GetOldLocation(TPropertyReference&) const
PUBLIC 3e2d8 0 THFSPlusRef::GetOldLocation() const
PUBLIC 3e326 0 TPropertyReference::SetValue(Point const&)
PUBLIC 3e348 0 SetNodePropertyAsDataNew
PUBLIC 3e38e 0 THFSPlusPropertyStore::SetProperty(HFSUniStr255 const&, unsigned long, TPropertyReference const&)
PUBLIC 3e4a8 0 TPropertyInfo::TPropertyInfo(HFSUniStr255 const&, unsigned long, TPropertyReference const&)
PUBLIC 3e4d4 0 TPropertyInfo** std::__copy_backward<true, std::random_access_iterator_tag>::copy_b<TPropertyInfo*>(TPropertyInfo* const*, TPropertyInfo* const*, TPropertyInfo**)
PUBLIC 3e504 0 THFSPlusRef::SetMDAttributeIfAppropriate(unsigned long, TPropertyReference const&)
PUBLIC 3e5d8 0 TMountPointList::FlushVolumes(bool)
PUBLIC 3e734 0 THFSPlusCatalog::SetTimerToHandleFlushRequest(short, double)
PUBLIC 3e83e 0 THFSPlusRef::HasExtension() const
PUBLIC 3e884 0 _NodeStringCompareWithError
PUBLIC 3e998 0 TNode::Compare(TNode const*, unsigned long, short (*)(unsigned long, unsigned short const*, unsigned long, unsigned short const*)) const
PUBLIC 3e9ce 0 GetNodeAsURL
PUBLIC 3e9f0 0 NodeCopyAsURL
PUBLIC 3ea90 0 TNode::GetURL(__CFURL const*&)
PUBLIC 3eb3a 0 NodeIsComputer
PUBLIC 3eb6c 0 TNode::IsComputer() const
PUBLIC 3eb7e 0 THFSPlusCatalog::HandleFlushRequest(__CFRunLoopTimer*, void*)
PUBLIC 3ec1c 0 TNodeSyncTask::HandleInternalFlushVolume(TCountedPtr<TNodeEvent> const&, TNodePtr const&)
PUBLIC 3ec34 0 TMountPointList::FlushVolume(short)
PUBLIC 3ecb4 0 THFSPlusCatalog::ClosePropertyStore(unsigned long)
PUBLIC 3ed28 0 THFSPlusPropertyStore::Empty()
PUBLIC 3ed5e 0 TNode::IsRequiredBySystem() const
PUBLIC 3eddc 0 TCopyMoveOperation::PerformMove(OperationRecord*)
PUBLIC 3f136 0 TOperation::Move(TNode*, TNode*, OperationRecord&, TOperation&)
PUBLIC 3f18e 0 TNode::Move(TNodePtr const&, OperationRecord&, TOperation&, HFSUniStr255 const*)
PUBLIC 3f532 0 TNode::GetName(HFSUniStr255&) const
PUBLIC 3f57e 0 TNode::Move(TNodePtr const&, TNodePtr const&, HFSUniStr255*, TOperation&)
PUBLIC 3f608 0 THFSPlusCatalog::Move(TNodePtr const&, TNodePtr const&, TNodePtr&, HFSUniStr255*, TOperation&)
PUBLIC 3fdf8 0 THFSPlusRef::Move(THFSPlusRef const&)
PUBLIC 3fec6 0 LockMoveObject(FSRef const&, FSRef const&, FSRef*)
PUBLIC 3ff20 0 THFSPlusRef::Set(FSRef const&, unsigned long)
PUBLIC 3ff5c 0 THFSPlusRef::SetParentDirID(unsigned long)
PUBLIC 3ff6a 0 TNode::SetParent(TNodePtr const&, THFSPlusExtendedPropertyIterator&)
PUBLIC 400e4 0 TNode::DecrementReadersBelowBy(unsigned long)
PUBLIC 40124 0 _NodeCreateNewVirtualQueryNodePlus
PUBLIC 4023c 0 TClientQuery::TClientQuery(__CFString const*, __CFArray const*, unsigned long, __CFArray const*, long (*)(void const* const*, void const* const*, void*), NodeClientContext, long, unsigned long)
PUBLIC 40246 0 TClientQuery::AddPtrReference()
PUBLIC 4025a 0 NodeCreateNewQueryNode
PUBLIC 403e0 0 TNode::CreateNodeQuery(HFSUniStr255 const&, TCountedPtr<TClientQuery> const&)
PUBLIC 40418 0 TNode::SetNodeQuery(HFSUniStr255 const&)
PUBLIC 4046a 0 THFSPlusRef::SetNodeQuery(HFSUniStr255 const&)
PUBLIC 40516 0 TChildrenList::SetNodeQuery(TCountedPtr<TClientQuery> const&)
PUBLIC 405cc 0 TNodeQueryDataRecord::TNodeQueryDataRecord()
PUBLIC 405f6 0 TNodeQueryDataRecord::RemovePtrReference()
PUBLIC 4062c 0 TNodeQuery::TNodeQuery(TCountedPtr<TClientQuery> const&)
PUBLIC 40636 0 TNodeQuery::AddPtrReference()
PUBLIC 40652 0 TCountedPtr<TNodeQuery>::operator=(TCountedPtr<TNodeQuery> const&)
PUBLIC 40690 0 TNodeQuery::RemovePtrReference()
PUBLIC 406ca 0 TClientQuery::RemovePtrReference()
PUBLIC 40700 0 NodeDisposeNodeQueryRef
PUBLIC 40748 0 NodeNewEventQueue
PUBLIC 40760 0 TNode::SetNodeQueryHitsContainer(__CFString const*)
PUBLIC 407b2 0 THFSPlusRef::SetNodeQueryHitsContainer(__CFString const*)
PUBLIC 40854 0 TChildrenList::SetNodeQueryHitsContainer(TNodePtr const&) const
PUBLIC 40952 0 TNodeQuery::SetHitsNode(TNode*)
PUBLIC 40a0c 0 TQueryTask::TQueryTask(TCountedPtr<TNodeQuery>)
PUBLIC 40a16 0 TQueryTask::QueryTaskProc(void*)
PUBLIC 40aba 0 TChildrenList::SetNodeQueryNode(TNodePtr const&) const
PUBLIC 40b52 0 TNodeQuery::StartQuery()
PUBLIC 40de4 0 TNodeQuery::HitCreateItem(__MDQuery*, __MDItem*, void*)
PUBLIC 40e56 0 TNode::TNode(TNode*, __MDItem*)
PUBLIC 40e60 0 THFSPlusRef::SetNodeQueryHit(__MDItem*)
PUBLIC 40f24 0 TChildrenList::SetMDItemRef(__MDItem*)
PUBLIC 40fba 0 TNodeQuery::HitRetain(__CFAllocator const*, void const*)
PUBLIC 41010 0 TNodeQuery::ProgressCallBack(__CFNotificationCenter*, void*, __CFString const*, void const*, __CFDictionary const*)
PUBLIC 410e0 0 TNodeQuery::AddAllChildren()
PUBLIC 41388 0 LockMDQueryGetResultCount(__MDQuery*)
PUBLIC 413d2 0 TNode::SetSearchCount(long)
PUBLIC 41406 0 std::vector<TNode*, std::allocator<TNode*> >::reserve(unsigned long)
PUBLIC 414b6 0 std::vector<TNode*, std::allocator<TNode*> >::capacity() const
PUBLIC 414de 0 TNode** std::vector<TNode*, std::allocator<TNode*> >::_M_allocate_and_copy<TNode**>(unsigned long, TNode**, TNode**)
PUBLIC 4153c 0 std::allocator<__CFString const*>::allocator()
PUBLIC 41542 0 std::vector<__CFString const*, std::allocator<__CFString const*> >::vector(std::allocator<__CFString const*> const&)
PUBLIC 4154c 0 std::_Vector_base<__CFString const*, std::allocator<__CFString const*> >::_Vector_base(std::allocator<__CFString const*> const&)
PUBLIC 41556 0 std::_Vector_base<__CFString const*, std::allocator<__CFString const*> >::_Vector_impl::_Vector_impl(std::allocator<__CFString const*> const&)
PUBLIC 4158a 0 std::allocator<__CFString const*>::allocator(std::allocator<__CFString const*> const&)
PUBLIC 41590 0 std::vector<__CFString const*, std::allocator<__CFString const*> >::reserve(unsigned long)
PUBLIC 41640 0 std::vector<__CFString const*, std::allocator<__CFString const*> >::capacity() const
PUBLIC 4167a 0 std::vector<__CFString const*, std::allocator<__CFString const*> >::size() const
PUBLIC 416a2 0 __CFString const** std::vector<__CFString const*, std::allocator<__CFString const*> >::_M_allocate_and_copy<__CFString const**>(unsigned long, __CFString const**, __CFString const**)
PUBLIC 4171c 0 __CFString const** std::uninitialized_copy<__CFString const**, __CFString const**>(__CFString const**, __CFString const**, __CFString const**)
PUBLIC 4174e 0 std::vector<__CFString const*, std::allocator<__CFString const*> >::push_back(__CFString const* const&)
PUBLIC 41790 0 std::vector<TNode*, std::allocator<TNode*> >::operator[](unsigned long)
PUBLIC 417a2 0 std::vector<__CFString const*, std::allocator<__CFString const*> >::operator[](unsigned long)
PUBLIC 417b4 0 THFSPlusRef::SetNodeQueryDisplayName(HFSUniStr255 const&)
PUBLIC 4184c 0 TNodeQuery::HandleAddResultAtEnd(TNode*, bool)
PUBLIC 418ba 0 std::vector<__CFString const*, std::allocator<__CFString const*> >::~vector()
PUBLIC 418f0 0 std::_Vector_base<__CFString const*, std::allocator<__CFString const*> >::~_Vector_base()
PUBLIC 41908 0 TNode::ClearBeingSynced()
PUBLIC 41926 0 TNodeQuery::HitRelease(__CFAllocator const*, void const*)
PUBLIC 4196e 0 _NodeGetQueryClientRef
PUBLIC 419d0 0 TNode::GetQueryClientRef() const
PUBLIC 419fa 0 NodeGetMDItemRef
PUBLIC 41a58 0 TNode::GetMDItemRef() const
PUBLIC 41a78 0 THFSPlusRef::GetNodeQueryItemRef() const
PUBLIC 41b72 0 NodeCopyNodeRef
PUBLIC 41ba4 0 _NodeSetQueryClientRef
PUBLIC 41c12 0 TNode::SetQueryClientRef(void*)
PUBLIC 41c44 0 TChildrenList::SetQueryClientRef(void*)
PUBLIC 41c84 0 NodeDisposeNodeRef
PUBLIC 41d62 0 NodeCopyMDAttributeForHit
PUBLIC 41e0a 0 TNode::CopyAttribute(__CFString const*, void const*&, OpaqueNodeRequest* const&)
PUBLIC 420d8 0 TChildrenList::GetNodeQueryNode() const
PUBLIC 42110 0 TNode::GetNodeQuery() const
PUBLIC 421a2 0 TChildrenList::GetNodeQuery() const
PUBLIC 421dc 0 TNodeQuery::CopyMDAttributeForHitNode(TNodePtr const&, __CFString const*) const
PUBLIC 4227a 0 TNodeQuery::HitEqual(void const*, void const*)
PUBLIC 4229e 0 NodeCancelQuery
PUBLIC 42310 0 TNode::CancelQuery()
PUBLIC 42376 0 TChildrenList::CancelQuery()
PUBLIC 4244a 0 TQueryTask::CancelQuery(TCountedPtr<TNodeQuery>)
PUBLIC 4251c 0 TNodeQuery::TestAndSetIsCancelled()
PUBLIC 42586 0 TNode::TestAndSetInitialPopulationComplete()
PUBLIC 425ac 0 TNodeQueryDataRecord::~TNodeQueryDataRecord()
PUBLIC 425e0 0 NodeDisposeEventQueue
PUBLIC 42646 0 TNode::SetLogicalSize(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 426c0 0 TNodeQuery::CancelQuery(void*)
PUBLIC 426d2 0 TNodeQuery::StopQuery()
PUBLIC 4295c 0 TNodeQuery::~TNodeQuery()
PUBLIC 429ea 0 TClientQuery::~TClientQuery()
PUBLIC 42a40 0 NodeContextClose
PUBLIC 42b2a 0 TFSEventsNotificationTask::DisableFSEvents()
PUBLIC 42b82 0 TNodeTask::CancelAllRequests()
PUBLIC 42c3e 0 TNode::ReleaseFavoritesFileList()
PUBLIC 42c6e 0 LockSFLRelease(OpaqueSFLRef*)
PUBLIC 42cb8 0 TNode::ReleaseVolumesFileList()
PUBLIC 42ce8 0 TNode::ReleaseSavedSearchesFileList()
PUBLIC 42d18 0 TNode::ReleaseNetworkNearbyBrowser()
PUBLIC 42d48 0 TNode::ReleaseNetworkSidebarBrowser()
PUBLIC 42d78 0 TNode::ReleaseSharedFoldersList()
PUBLIC 42da8 0 TNodeEvent::NodeEventFinalize()
PUBLIC 42e20 0 TMountPointList::Finalize()
PUBLIC 42e82 0 TNodeSyncTask::CancelSyncs()
PUBLIC 42f2c 0 TNode::Finalize()
PUBLIC 43206 0 VolumesCallback
PUBLIC 43248 0 TTrashOperation::TTrashOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 43252 0 TTrashOperation::LogOperationName(OperationRecord*) const
PUBLIC 43264 0 TTrashOperation::TransformOperations()
PUBLIC 432da 0 TOperation::AcquireDestinationLocks()
PUBLIC 432e2 0 TOperation::AcquireSourceLock(OperationRecord*)
PUBLIC 43326 0 TTrashOperation::ResolveConflict(OperationRecord*)
PUBLIC 43518 0 THFSPlusCatalog::~THFSPlusCatalog()
PUBLIC 43522 0 _ChildRunTrashOperation
PUBLIC 436aa 0 _XNotifyTrashStatus
PUBLIC 437a6 0 _ParentXNotifyTrashStatus
PUBLIC 43864 0 TOperation::ReportStatus(unsigned long, unsigned short const*, long long, long long, long long)
PUBLIC 439b4 0 TStatusLock::TStatusLock()
PUBLIC 439dc 0 TStatusLock::~TStatusLock()
PUBLIC 439fc 0 TDSMutex::~TDSMutex()
PUBLIC 43a06 0 TOperation::UpdateStatusItemsTotal(long long, long long)
PUBLIC 43aa0 0 TOperation::UpdateStatusBytesTotal(long long)
PUBLIC 43afe 0 _XNotifyCancelOperationRequested
PUBLIC 43bba 0 _ParentXNotifyCancelOperationRequested
PUBLIC 43be0 0 _XNotifyPreflightResults
PUBLIC 43cca 0 _ParentXNotifyPreflightResults
PUBLIC 43d7e 0 TOperation::TransformDestinationLocks()
PUBLIC 43d86 0 TOperation::NeedsSizeCheck() const
PUBLIC 43d8e 0 TTrashOperation::PerformOperation(OperationRecord*)
PUBLIC 43fa8 0 _XNotifyTrashDone
PUBLIC 44040 0 _ParentXNotifyTrashDone
PUBLIC 44058 0 TOperation::Finalize()
PUBLIC 4405e 0 TTrashOperation::Cleanup(OperationRecord*)
PUBLIC 440e2 0 TTrashOperation::~TTrashOperation()
PUBLIC 440ec 0 CloseCatalog
PUBLIC 440f6 0 VolumeIsUnmountable
PUBLIC 44128 0 TNode::VolumeIsUnmountable() const
PUBLIC 44194 0 TNode::IsUnmountableVolume() const
PUBLIC 442e8 0 TNode::GetParentKeyName()
PUBLIC 44332 0 TNode::GetOldViewStyle(TPropertyReference&) const
PUBLIC 443a2 0 THFSPlusRef::GetOldViewStyle() const
PUBLIC 443ba 0 THFSPlusRef::GetKindString(TUString&, bool) const
PUBLIC 443fc 0 TMetaData::GetKindString(TUString&, bool) const
PUBLIC 44458 0 _NodeMarkAsUsed
PUBLIC 444fe 0 TNodeSyncTask::HandleInternalMarkAsUsed(TCountedPtr<TNodeEvent> const&, TNodePtr const&)
PUBLIC 4451e 0 TNode::MarkAsUsed()
PUBLIC 4460a 0 TPropertyInfo::EqualValue(TPropertyInfo const&) const
PUBLIC 44686 0 TPropertyValue::operator==(TPropertyValue const&) const
PUBLIC 4482a 0 SetNodePropertyAsInt16
PUBLIC 44868 0 SetNodePropertyAsInt32
PUBLIC 448a0 0 TChildrenList::GetLastResizeDuration() const
PUBLIC 448b6 0 THFSPlusSizer::Size()
PUBLIC 448fe 0 THFSPlusSizer::Sizing(TFSInfo const&)
PUBLIC 44a96 0 TDeepFSIterator::Next(TFSInfo&, bool&)
PUBLIC 44b1c 0 TFSInfo::ShouldSkip(bool, bool, bool) const
PUBLIC 44b9a 0 TFSInfo::IsTrash() const
PUBLIC 44d34 0 TDeepFSIterator::PushIterator(TFSInfo const&)
PUBLIC 44f4e 0 std::vector<TFSIterator*, std::allocator<TFSIterator*> >::push_back(TFSIterator* const&)
PUBLIC 44f92 0 std::vector<TFSIterator*, std::allocator<TFSIterator*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<TFSIterator**, std::vector<TFSIterator*, std::allocator<TFSIterator*> > >, TFSIterator* const&)
PUBLIC 45130 0 std::vector<TFSIterator*, std::allocator<TFSIterator*> >::size() const
PUBLIC 451c2 0 THFSPlusSizer::AccumulateSize(TFSInfo const&, bool, bool)
PUBLIC 45264 0 std::vector<TFSIterator*, std::allocator<TFSIterator*> >::back()
PUBLIC 45272 0 TNode::GetKind(TPropertyReference&) const
PUBLIC 453a0 0 TPropertyValue::TPropertyValue(long long)
PUBLIC 453ba 0 THFSPlusRef::SetPhysicalSize(long long, bool)
PUBLIC 453ce 0 THFSPlusRef::SetLogicalSize(long long, bool)
PUBLIC 453e2 0 TNode::SetDeepItemCount(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 45498 0 TChildrenList::GetDeepChildrenCount(bool) const
PUBLIC 454f2 0 TChildrenList::SetDeepChildrenCount(long long, bool)
PUBLIC 45564 0 TNode::SetDeepVisibleItemCount(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 45618 0 TChildrenList::SetLastResizeTime(double)
PUBLIC 45668 0 TChildrenList::SetHasSized()
PUBLIC 456aa 0 THFSPlusSizer::~THFSPlusSizer()
PUBLIC 456b4 0 TNode::SetUnresolvedTarget()
PUBLIC 4578a 0 TPropertyTask::HandleResolveAlias(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 45860 0 TNode::AdjustForBackup(TNodePtr const&)
PUBLIC 45a1e 0 TNode::GetSystemVersion(TPropertyReference&) const
PUBLIC 45abe 0 TNode::VersionDataFetched() const
PUBLIC 45ae8 0 TPropertyValue::TPropertyValue(TUString const&)
PUBLIC 45af2 0 TNode::GetShortVersion(TPropertyReference&) const
PUBLIC 45b92 0 THFSPlusRef::FetchVersionMetaData() const
PUBLIC 45bbc 0 TMetaData::FetchVersionMetaData() const
PUBLIC 45c5c 0 THFSPlusRef::IsFontFile() const
PUBLIC 45d2c 0 TMetaData::FetchPlistVersion() const
PUBLIC 45fca 0 VersionData::VersionData()
PUBLIC 46002 0 TMetaData::SetVersionData(VersionData*)
PUBLIC 4607a 0 TExtraData::SetVersionData(VersionData*)
PUBLIC 460fc 0 VersionData::~VersionData()
PUBLIC 46134 0 TMetaData::FetchFlatFileVersion() const
PUBLIC 46336 0 TMetaData::FetchOldStyleVersion() const
PUBLIC 465fc 0 TMetaData::GetFontSuffix()
PUBLIC 46676 0 StOpenResourceForkReadOnly::StOpenResourceForkReadOnly(FSRef, bool)
PUBLIC 46690 0 TFSInfo::ResourceForkName()
PUBLIC 466ea 0 StOpenResourceForkReadOnly::Opened() const
PUBLIC 466fc 0 StOpenResourceForkReadOnly::~StOpenResourceForkReadOnly()
PUBLIC 46714 0 THFSPlusRef::GetSystemVersion(TUString&) const
PUBLIC 46744 0 TMetaData::GetSystemVersion(TUString&) const
PUBLIC 467a2 0 THFSPlusRef::GetShortVersion(TUString&) const
PUBLIC 467d2 0 TMetaData::GetShortVersion(TUString&) const
PUBLIC 4682e 0 TNode::DownloadChangedCallback(__CFNotificationCenter*, void*, __CFString const*, void const*, __CFDictionary const*)
PUBLIC 46ac2 0 _NodeSizer
PUBLIC 46ca4 0 TOperationSizer::ComputeSize()
PUBLIC 46e58 0 TFSInfo::RealUserCanRead(bool*) const
PUBLIC 46ea8 0 TFSInfo::UserCanSearch() const
PUBLIC 46ec4 0 TOperationSizer::Sizing(TFSInfo const&)
PUBLIC 4703c 0 TOperationSizer::AccumulateSize(TFSInfo const&, bool)
PUBLIC 473a4 0 TOperationSizer::ShouldSkip(TFSInfo const&) const
PUBLIC 47454 0 ceiling_64(unsigned long long, unsigned long long)
PUBLIC 474d0 0 TOperationSizer::~TOperationSizer()
PUBLIC 474da 0 NodeCopyFromPathName
PUBLIC 4766c 0 TNode::GetNodeFromPathName(TUString const&, TNodePtr&)
PUBLIC 47a90 0 TNodeQuery::DidFinishCallBack(__CFNotificationCenter*, void*, __CFString const*, void const*, __CFDictionary const*)
PUBLIC 47b70 0 TNode::GetLongVersion(TPropertyReference&) const
PUBLIC 47c10 0 THFSPlusRef::GetLongVersion(TUString&) const
PUBLIC 47c40 0 TMetaData::GetLongVersion(TUString&) const
PUBLIC 47c9e 0 NodeIsFontFile
PUBLIC 47cd0 0 TNode::IsFontFile() const
PUBLIC 47cea 0 TNode::GetArchitecturesSupported(TPropertyReference&) const
PUBLIC 47d64 0 THFSPlusRef::GetArchitecturesSupported(unsigned long&, bool) const
PUBLIC 47ffe 0 TNode::GetArchitecturePreference(TPropertyReference&) const
PUBLIC 48094 0 THFSPlusRef::GetArchitecturePreference(HFSUniStr255&, bool) const
PUBLIC 4833c 0 THFSPlusRef::UserIsRoot() const
PUBLIC 48376 0 TNode::UserIsOwner() const
PUBLIC 483d4 0 TMountPointList::UserIsOwner(short, unsigned long, unsigned long)
PUBLIC 4843c 0 THFSPlusCatalog::UserIsOwner(unsigned long, unsigned long) const
PUBLIC 48452 0 THFSPlusRef::SetLabel(short, bool)
PUBLIC 484c6 0 std::allocator<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > > >(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > > > const&)
PUBLIC 484f2 0 THFSPlusRef::IsFramework() const
PUBLIC 485b8 0 TExtraData::~TExtraData()
PUBLIC 4868c 0 TNode::SetTimerToDispatchResizeRequest(TNodeTask*, double)
PUBLIC 48756 0 RetainRequest(void const*)
PUBLIC 48774 0 TNode::GetDeepVisibleItemCount(TPropertyReference&) const
PUBLIC 48796 0 TNode::GetDeepChildrenCount(TPropertyReference&, bool) const
PUBLIC 48856 0 TNode::DispatchResizeRequestNow(__CFRunLoopTimer*, void*)
PUBLIC 4890c 0 ReleaseRequest(void const*)
PUBLIC 4891e 0 VolumeSupportsACLs
PUBLIC 48950 0 TNode::VolumeSupportsACLs() const
PUBLIC 48970 0 NodeGetAccessRights
PUBLIC 489ca 0 TNode::FetchAccessRights()
PUBLIC 48a64 0 TPropertyTask::HandleFetchACLData(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 48b14 0 THFSPlusRef::CreateUserAccessRightsDictionary(__CFDictionary const**) const
PUBLIC 48bae 0 TNodeEvent::CreateNodeEvent(unsigned long, TNodePtr const&, __CFDictionary const*, __CFString const*)
PUBLIC 48c04 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, __CFDictionary const*, __CFString const*)
PUBLIC 48c0e 0 TNode::GetOwnerID(TPropertyReference&) const
PUBLIC 48c56 0 TPropertyReference::SetValue(long)
PUBLIC 48c76 0 TNode::SharingDataFetched() const
PUBLIC 48c98 0 THFSPlusRef::FetchSharingData() const
PUBLIC 48d52 0 LockGetObjectAccess(FSRef const&, long*, long*, long*)
PUBLIC 48db4 0 TNode::GetUserGroupID(TPropertyReference&) const
PUBLIC 48dfc 0 TNode::GetPermissions(TPropertyReference&) const
PUBLIC 48e44 0 TNode::GetVolumeFormat(TPropertyReference&) const
PUBLIC 48e7e 0 THFSPlusCatalog::GetVolumeFormat() const
PUBLIC 48e8a 0 NodeEventGetAccessRights
PUBLIC 48ef4 0 NodeHasChildNew
PUBLIC 48f8c 0 NodeCreateNewContainerInNew
PUBLIC 49002 0 NodeCreateNewFolder
PUBLIC 490fc 0 TChildCreator::TChildCreator(__CFString const*, long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), long (TNode::*)(TChildCreator const&, NodeNameSyntaxHint const&, TNodePtr const&), TCountedPtr<TPropertyMap> const&, TNodePtr const&, unsigned long, __CFDictionary const*, __CFURL const*, TCountedPtr<TClientQuery> const&)
PUBLIC 49106 0 NodeCreateNewChild(unsigned long, OpaqueNodeRef*, TChildCreator const&, OpaqueNodeRef**, OpaqueNodeRequest*)
PUBLIC 49328 0 TNode::CreateNewChild(TChildCreator const&, TNodePtr&)
PUBLIC 494c4 0 TNode::CreateChildContainer(TChildCreator const&, NodeNameSyntaxHint const&, TNodePtr const&)
PUBLIC 495a2 0 TNode::GetDesktopNode()
PUBLIC 495de 0 TNode::CreateNewVirtualChildProxy(TNodePtr const&, unsigned long, TNodePtr&)
PUBLIC 49b54 0 TNode::GetHomeNode()
PUBLIC 49b90 0 TNode::IsDesktop() const
PUBLIC 49bf6 0 LockSFLAddNewItemToList(OpaqueSFLRef*, unsigned long, OpaqueISImageRef*, unsigned short*, unsigned short, void*, unsigned long, unsigned long, unsigned long, unsigned long*)
PUBLIC 49c80 0 TNode::GetApplicationsNode()
PUBLIC 49cbc 0 TNode::SetApplicationsNode()
PUBLIC 49d46 0 TNode::GetDocumentsNode()
PUBLIC 49d84 0 dyld_stub_binding_helper
PUBLIC 49d9a 0 TCopyWriter::CopyUsingCopyFileAtRoot()
PUBLIC 4a06c 0 TFSNotificationTask::FSNotificationTaskProc(void*)
PUBLIC 4a13c 0 TNode::KQueue()
PUBLIC 4a16a 0 TPathName::~TPathName()
PUBLIC 4a174 0 TNode::SubscribeForFSNotification()
PUBLIC 4a1c0 0 TChildrenList::SetSubscriptionFileDescriptor(int)
PUBLIC 4a200 0 GetUTCDateTimeNow(UTCDateTime*)
PUBLIC 4a21c 0 TNode::ScavengeProperties()
PUBLIC 4a38a 0 THFSPlusPropertyStore::CreateUniqueNameList()
PUBLIC 4a4ca 0 IteratorFrame::~IteratorFrame()
PUBLIC 4a52a 0 IAStruct::~IAStruct()
PUBLIC 4a540 0 BTreeIterator::~BTreeIterator()
PUBLIC 4a5ec 0 BTree::~BTree()
PUBLIC 4a6a8 0 Leaf::~Leaf()
PUBLIC 4a6dc 0 Page::~Page()
PUBLIC 4a740 0 SkipList::~SkipList()
PUBLIC 4a7ac 0 Scroll::~Scroll()
PUBLIC 4a828 0 BuddyStorage::~BuddyStorage()
PUBLIC 4a8e2 0 UInt32Set::~UInt32Set()
PUBLIC 4a916 0 StringUInt32Map::~StringUInt32Map()
PUBLIC 4a94e 0 StringSet::~StringSet()
PUBLIC 4a9ac 0 IAStorage::~IAStorage()
PUBLIC 4aa02 0 TPropertyStream::~TPropertyStream()
PUBLIC 4aa46 0 IAStoreStream::~IAStoreStream()
PUBLIC 4aaa0 0 TPropertyInfo::~TPropertyInfo()
PUBLIC 4aaaa 0 std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> >::erase(__gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >, __gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >)
PUBLIC 4ab26 0 TNameList::~TNameList()
PUBLIC 4ab30 0 TNodeOpenSyncTask::~TNodeOpenSyncTask()
PUBLIC 4abf2 0 TNode::IsSymLink() const
PUBLIC 4ac0c 0 NewVolumeIterator
PUBLIC 4ac50 0 TNode::NewVolumeIterator()
PUBLIC 4acbc 0 VolumeIteratorFirst
PUBLIC 4ad4c 0 TFSInfo::UserCanWrite() const
PUBLIC 4ad6a 0 VolumeIteratorNext
PUBLIC 4adf8 0 DisposeVolumeIterator
PUBLIC 4ae48 0 std::vector<TNode*, std::allocator<TNode*> >::erase(__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >, __gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >)
PUBLIC 4aec4 0 TMetaData::Reset()
PUBLIC 4af36 0 NodeStringCompare
PUBLIC 4af68 0 NodeIsFullyFormed
PUBLIC 4af9e 0 TNode::UnsubscribeForFSNotification()
PUBLIC 4afea 0 TChildrenList::GetSubscriptionFileDescriptor() const
PUBLIC 4affe 0 TNodeSyncTask::~TNodeSyncTask()
PUBLIC 4b094 0 TNode::IsClipping() const
PUBLIC 4b0be 0 TDeepFSIterator::Next(TFSInfo&)
PUBLIC 4b148 0 TFolderSizeTask::~TFolderSizeTask()
PUBLIC 4b188 0 TNode::IsLocation() const
PUBLIC 4b1b0 0 _CopyPropertyStore
PUBLIC 4b292 0 _CopyCommentForName
PUBLIC 4b3fa 0 THFSPlusRef::GetFinderFlags() const
PUBLIC 4b46a 0 GetFSRefAsNode
PUBLIC 4b48e 0 GetAEDescAsNode
PUBLIC 4b4fc 0 TNode::GetNodeFromAEDesc(AEDesc const&, TNodePtr&)
PUBLIC 4b56c 0 AEDescToFSRef
PUBLIC 4b61a 0 TNode::HasChild(HFSUniStr255 const&) const
PUBLIC 4b6f6 0 _NodeCreateNewVirtualQueryNode
PUBLIC 4b80e 0 _NodeSetVirtualQuery
PUBLIC 4b8b8 0 TQueryTask::~TQueryTask()
PUBLIC 4b8fc 0 NodeGetMDAttributes
PUBLIC 4b992 0 NodeEventGetMDAttributeValues
PUBLIC 4ba02 0 TPropertyTask::~TPropertyTask()
PUBLIC 4ba42 0 StOpenResourceForkReadOnly::GetResource(unsigned long, short, long&) const
PUBLIC 4ba9e 0 GetNodeAsAEDesc
PUBLIC 4bb00 0 THFSPlusRef::SetType(unsigned long, bool)
PUBLIC 4bb48 0 THFSPlusRef::SetCreator(unsigned long, bool)
PUBLIC 4bb90 0 GetNodePropertyAsDateTime
PUBLIC 4bbf8 0 GetNodePropertyAsByte
PUBLIC 4bc60 0 THFSPlusRef::GetNodeFlags() const
PUBLIC 4bc70 0 THFSPlusRef::GetLogicalForkSize(FSForkType) const
PUBLIC 4bcc0 0 SetNodePropertyAsIconRef
PUBLIC 4bdb0 0 TOperation::UpdateStatusItemsCompleted(long long, long long)
PUBLIC 4be1c 0 TCopyMoveOperation::~TCopyMoveOperation()
PUBLIC 4bea8 0 TOperation::~TOperation()
PUBLIC 4c0ea 0 TNodeOperationTask::~TNodeOperationTask()
PUBLIC 4c11e 0 TOperation::CreateLockItem(TNode*, TNode*, OperationRecord*)
PUBLIC 4c23c 0 TOperation::UpdateStatusBytesCompleted(long long)
PUBLIC 4c2be 0 TCopyQueue::Enqueue(TCopyQueueItem*)
PUBLIC 4c328 0 TOperation::UpdateStatusThroughput(long long)
PUBLIC 4c3c6 0 TCopyWriter::CreateNewDestinationItem()
PUBLIC 4c918 0 TCopyWriter::OpenResourceFork()
PUBLIC 4c94c 0 TCopyWriter::OpenForkForWriting(short&, unsigned long long const&, bool)
PUBLIC 4cade 0 TCopyWriter::OpenDataFork()
PUBLIC 4cb10 0 TCopyWriter::WriteResoureFork()
PUBLIC 4cb46 0 TCopyWriter::WriteForkFromBuffer(short, unsigned long long const&, bool)
PUBLIC 4cea8 0 TCopyReader::OpenResourceFork()
PUBLIC 4cf0c 0 TCopyReader::OpenForkForReading(short&, unsigned long long const&, bool)
PUBLIC 4d06a 0 TCopyReader::ReadResourceFork()
PUBLIC 4d0c0 0 TCopyReader::ReadFork(short, unsigned long long const&, bool)
PUBLIC 4d278 0 TCopyQueue::GetBuffer()
PUBLIC 4d2d6 0 TCopyWriter::CloseResourceFork()
PUBLIC 4d300 0 TCopyWriter::CloseForkForWriting(short&, bool)
PUBLIC 4d3c0 0 TCopyWriter::WriteDataFork()
PUBLIC 4d3f4 0 TCopyReader::CloseResourceFork()
PUBLIC 4d432 0 TCopyReader::OpenDataFork()
PUBLIC 4d496 0 TCopyReader::ReadDataFork()
PUBLIC 4d4ec 0 TCopyReader::CloseDataFork()
PUBLIC 4d52a 0 TCopyWriter::CloseDataFork()
PUBLIC 4d552 0 NodeCancelRequest
PUBLIC 4d5a2 0 TNodeTask::Cancel(unsigned long long const&)
PUBLIC 4d656 0 TNode::UserCanChangePermissions() const
PUBLIC 4d6ca 0 TUString::TUString(unsigned long, char const*)
PUBLIC 4d70a 0 TMountPointList::RemoveVolume(short)
PUBLIC 4d808 0 THFSPlusRef::IsBusyApplication() const
PUBLIC 4d89a 0 TChildrenList::ClearAliasTarget()
PUBLIC 4d8ea 0 VolumeEject
PUBLIC 4d936 0 THFSPlusRef::GetOldIconOrigin() const
PUBLIC 4d968 0 LockDetermineAutoRoutingDestination(short, unsigned long, unsigned long, FSRef&)
PUBLIC 4da84 0 TTrashOperation::~TTrashOperation()
PUBLIC 4dab8 0 THFSPlusRef::InternalGetName() const
PUBLIC 4dba2 0 NodeCreateNewVirtualQueryNode
PUBLIC 4dc7a 0 NodeSetVirtualQuery
PUBLIC 4dd2a 0 THFSPlusCatalog::AnyMountedODSDisks()
PUBLIC 4dd42 0 THFSPlusCatalog::VolumeType() const
PUBLIC 4dd78 0 THFSPlusCatalog::GetCapacity() const
PUBLIC 4ddac 0 THFSPlusCatalog::ReportDeleteOperationProgress(TOperation*, long long, long long)
PUBLIC 4de24 0 THFSPlusCatalog::ReportDeleteError(TOperation*, THFSPlusRef const&, long)
PUBLIC 4de92 0 THFSPlusCatalog::NotifyODSDiskStateChange()
PUBLIC 4df18 0 THFSPlusCatalog::IsHomeVolume() const
PUBLIC 4df62 0 THFSPlusCatalog::GetOpenFolder() const
PUBLIC 4dfe4 0 THFSPlusCatalog::GetVolumeFormatString() const
PUBLIC 4e136 0 THFSPlusCatalog::Deleting(THFSPlusRef&, TOperation*, OperationRecord*, unsigned long&, bool)
PUBLIC 4e68c 0 THFSPlusCatalog::Delete(TNodePtr&, bool, TOperation*, OperationRecord*, bool)
PUBLIC 4e726 0 THFSPlusCatalog::MapUserOrGroupUUIDToName(bool, __CFUUID const*, __CFString const**) const
PUBLIC 4e79e 0 THFSPlusCatalog::MapNameToUserOrGroupUUID(bool, __CFString const*, __CFUUID const**) const
PUBLIC 4e816 0 THFSPlusCatalog::MapUserOrGroupIDToName(bool, unsigned long, TUString&) const
PUBLIC 4e8e0 0 THFSPlusCatalog::MapNameToUserOrGroupID(bool, TUString const&, unsigned long&) const
PUBLIC 4e952 0 THFSPlusCatalog::RemoveProperties(unsigned long, HFSUniStr255 const&)
PUBLIC 4e9d6 0 THFSPlusCatalog::RemoveProperties(THFSPlusRef const&)
PUBLIC 4ea30 0 THFSPlusCatalog::Unmount(int*)
PUBLIC 4eaea 0 THFSPlusCatalog::Eject(int*)
PUBLIC 4ecf6 0 THFSPlusCatalog::~THFSPlusCatalog()
PUBLIC 4efb2 0 THFSPlusCatalog::THFSPlusCatalog(TNode*, short, FSVolumeInfo const&)
PUBLIC 4f61a 0 Deleter::StDeleter<THFSPlusIterator>::~StDeleter()
PUBLIC 4f646 0 Deleter::StDeleter<THFSPlusRef>::~StDeleter()
PUBLIC 4f672 0 HFSUniStr255** std::__copy_backward<true, std::random_access_iterator_tag>::copy_b<HFSUniStr255*>(HFSUniStr255* const*, HFSUniStr255* const*, HFSUniStr255**)
PUBLIC 4f6a2 0 THFSPlusPropertyStore** std::__copy_backward<true, std::random_access_iterator_tag>::copy_b<THFSPlusPropertyStore*>(THFSPlusPropertyStore* const*, THFSPlusPropertyStore* const*, THFSPlusPropertyStore**)
PUBLIC 4f748 0 std::_Vector_base<HFSUniStr255*, std::allocator<HFSUniStr255*> >::~_Vector_base()
PUBLIC 4f760 0 std::vector<HFSUniStr255*, std::allocator<HFSUniStr255*> >::~vector()
PUBLIC 4f796 0 THFSPlusExtendedPropertyIterator::THFSPlusExtendedPropertyIterator(TNodePtr const&)
PUBLIC 4f870 0 THFSPlusExtendedPropertyIterator::THFSPlusExtendedPropertyIterator(HFSUniStr255 const&, THFSPlusPropertyStore*)
PUBLIC 4f912 0 THFSPlusExtendedPropertyIterator::~THFSPlusExtendedPropertyIterator()
PUBLIC 4f93c 0 THFSPlusPropertyStore::RemoveProperties(HFSUniStr255 const&)
PUBLIC 4f982 0 TNameList::~TNameList()
PUBLIC 4f9d4 0 THFSPlusPropertyStore::THFSPlusPropertyStore(TFSInfo&)
PUBLIC 4fa2e 0 THFSPlusPropertyStore::THFSPlusPropertyStore(THFSPlusPropertyStore const&)
PUBLIC 4fb78 0 THFSPlusPropertyStore::RemoveProperty(HFSUniStr255 const&, unsigned long)
PUBLIC 4fc1c 0 THFSPlusPropertyStore::~THFSPlusPropertyStore()
PUBLIC 4fc50 0 TNameList::TNameList()
PUBLIC 4fc78 0 TNode::GetUnknownError(TPropertyReference&) const
PUBLIC 4fc82 0 TNode::ReadOnlyPropertyError(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 4fc8c 0 TNode::SetUnknownError(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 4fc96 0 TNode::GetDataForkSize(TPropertyReference&) const
PUBLIC 4fce2 0 TNode::GetResourceForkSize(TPropertyReference&) const
PUBLIC 4fd2e 0 TNode::GetUnbadgedIcon(OpaqueIconRef*&) const
PUBLIC 4fd40 0 TNode::GetIsPublishedFolder(TPropertyReference&) const
PUBLIC 4fd5e 0 TNode::GetIsFileShare(TPropertyReference&) const
PUBLIC 4fd7c 0 TNode::GetIsScreenShare(TPropertyReference&) const
PUBLIC 4fd9a 0 TNode::NoReconcile(TNodePtr const&)
PUBLIC 4fda2 0 NodeResolveCallBack(__NWNode*, __CFString const*, NWNodeError, void*)
PUBLIC 4fe4e 0 TNode::TestAndSetSyncRequested()
PUBLIC 4fe74 0 TNode::DetermineAutoRoutingDestination(unsigned long, FSRef&) const
PUBLIC 4febc 0 TUniqueNamer::TUniqueNamer(long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), HFSUniStr255 const&, HFSUniStr255*, NodeNameSyntaxHint const&)
PUBLIC 4ff2a 0 TUniqueNamer::TUniqueNamer(long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), HFSUniStr255 const&, HFSUniStr255*, NodeNameSyntaxHint const&)
PUBLIC 4ff34 0 TUniqueNamer::TUniqueNamer(long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), HFSUniStr255 const&, NodeNameSyntaxHint const&)
PUBLIC 4ff92 0 TNode::RequestPermissionsOperation(OpaqueOperationRef*, unsigned long, __FSFileSecurity*)
PUBLIC 50006 0 TChildCreator::operator=(TChildCreator const&)
PUBLIC 500fe 0 TNode::TNode(TNode*)
PUBLIC 50196 0 TNode::TNode(TNode*, THFSPlusRef const&, unsigned long)
PUBLIC 50242 0 TNode::IsiDiskMounted()
PUBLIC 502b0 0 TNode::GetODSRequiresAsk(TPropertyReference&) const
PUBLIC 502cc 0 TNode::VirtualChildLocked() const
PUBLIC 502e8 0 TNode::GetHasScriptingTerminology(TPropertyReference&) const
PUBLIC 50332 0 TNode::GetFSAttributes(TPropertyReference&) const
PUBLIC 5037a 0 TNode::GetFinderFlags(TPropertyReference&) const
PUBLIC 503c2 0 TNode::GetCanSetExtensionHidden(TPropertyReference&) const
PUBLIC 5040c 0 TNode::GetUserAccess(TPropertyReference&) const
PUBLIC 50454 0 TNode::GetCopyrightString(TPropertyReference&) const
PUBLIC 504f4 0 TNode::HeapSizeDataFetched() const
PUBLIC 5051e 0 TNode::GetSuggestedHeapSizes(TPropertyReference&) const
PUBLIC 50592 0 TNode::GetHeapSizes(TPropertyReference&) const
PUBLIC 50606 0 TNode::Compare(TNode const*, unsigned long, short (*)(long long, long long), bool&) const
PUBLIC 508a4 0 TNode::Compare(TNode const*, unsigned long, short (*)(long long, long long)) const
PUBLIC 508da 0 TNode::GetCapacity(TPropertyReference&) const
PUBLIC 50944 0 TNode::IsiPod() const
PUBLIC 50964 0 TNode::GetVolumeFormatString(TPropertyReference&) const
PUBLIC 509ec 0 TNode::SystemBuildVersion(TPropertyReference&) const
PUBLIC 50a36 0 TNode::VolumeHasNoVolumeSizes() const
PUBLIC 50a5a 0 TNode::VolumeIsODSDisk() const
PUBLIC 50a7a 0 TNode::VolumeEject(int*)
PUBLIC 50aa0 0 TNode::MapUserOrGroupUUIDToName(bool, __CFUUID const*, __CFString const**) const
PUBLIC 50ad4 0 TNode::MapNameToUserOrGroupUUID(__CFString const*, bool, __CFUUID const**) const
PUBLIC 50b0e 0 TNode::MapUserOrGroupIDToName(bool, unsigned long, TUString&) const
PUBLIC 50b42 0 TNode::MapNameToUserOrGroupID(TUString const&, bool, unsigned long&) const
PUBLIC 50b7c 0 TNode::FollowAliasNoNetworkIO(THFSPlusRef&, bool, bool) const
PUBLIC 50bfa 0 TNode::GetOldIconOrigin(TPropertyReference&) const
PUBLIC 50c64 0 TNode::iToolsPassword(TUString const&)
PUBLIC 50da6 0 TNode::GetNetworkConnectionState(TPropertyReference&) const
PUBLIC 50dc8 0 TNode::SetTimerToHandleNotifyRequest(TNode*, double)
PUBLIC 50ec0 0 TNode::SetHeapSizes(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 50f16 0 TChildCreator::TChildCreator()
PUBLIC 51016 0 TChildCreator::TChildCreator(__CFString const*, long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), long (TNode::*)(TChildCreator const&, NodeNameSyntaxHint const&, TNodePtr const&), TCountedPtr<TPropertyMap> const&, TNodePtr const&, unsigned long, __CFDictionary const*, __CFURL const*, TCountedPtr<TClientQuery> const&)
PUBLIC 51116 0 TChildCreator::~TChildCreator()
PUBLIC 51182 0 TNode::StSynchronize::~StSynchronize()
PUBLIC 511be 0 TNode::GetCustomVolumeIconFile(FSRef&, unsigned char)
PUBLIC 51444 0 TNode::DumpFlags() const
PUBLIC 5157e 0 TNode::EqualDisplayName(HFSUniStr255 const&) const
PUBLIC 515ea 0 TNode::Compare(TNode const*, unsigned long, short (*)(unsigned long, unsigned short const*, unsigned long, unsigned short const*), bool&) const
PUBLIC 51756 0 TNode::RequestSetPropertyTask(OpaqueNodeRequest* const&, unsigned long, unsigned long, void*)
PUBLIC 51832 0 TNode::SetArchitecturePreference(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 518d8 0 TNode::SetUserGroupID(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 5198c 0 TNode::SetOwnerID(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 51a40 0 TNode::CopyAttributes(__CFArray const*, OpaqueNodeRequest* const&)
PUBLIC 51b32 0 TNode::CopyAttributes(__CFString const*, OpaqueNodeRequest* const&)
PUBLIC 51c1c 0 TNode::CopyAttributes(__CFDictionary*, OpaqueNodeRequest* const&)
PUBLIC 51dfe 0 TNode::CopyAccessRights(__CFArray const**, OpaqueNodeRequest* const&)
PUBLIC 51f12 0 TNode::SetAccessRights(__CFArray const*, OpaqueNodeRequest* const&)
PUBLIC 52010 0 TNode::SetPermissionInfo(FSPermissionInfo*, OpaqueNodeRequest* const&)
PUBLIC 5213e 0 TNode::ApplyAccessRightsWithDictionary(__CFDictionary const*)
PUBLIC 521e2 0 TNode::ReplaceAccessControlListWithDictionary(__CFDictionary const*)
PUBLIC 52286 0 TNode::RemoveUserFromAccessControlList(__CFUUID const*)
PUBLIC 5232a 0 TNode::ModifyAccessRightsWithDictionaries(__CFDictionary const*, __CFDictionary const*)
PUBLIC 523d6 0 TNode::ModifyAccessRightsForUser(__CFUUID const*, unsigned long long, unsigned long long)
PUBLIC 52496 0 TNode::CopyPermissionInfo(FSPermissionInfo*)
PUBLIC 5269c 0 TNode::CopyPermissionInfo(FSPermissionInfo*, OpaqueNodeRequest* const&)
PUBLIC 527aa 0 TNode::CopyLocationData(__CFURL const*&, OpaqueNodeRequest* const&)
PUBLIC 528cc 0 TNode::CopyClippingData(unsigned long&, __CFDictionary const*&, OpaqueNodeRequest* const&)
PUBLIC 529fc 0 TNode::CreateChildLocation(TChildCreator const&, NodeNameSyntaxHint const&, TNodePtr const&)
PUBLIC 52af6 0 TNode::CreateChildClipping(TChildCreator const&, NodeNameSyntaxHint const&, TNodePtr const&)
PUBLIC 52c0a 0 TNode::CreateChildFile(TChildCreator const&, NodeNameSyntaxHint const&, TNodePtr const&)
PUBLIC 52ce8 0 TNode::GetFSRefOfOriginal(FSRef&, unsigned char) const
PUBLIC 52d62 0 TNode::GetAEDesc(AEDesc&) const
PUBLIC 52e4a 0 TNode::SetNewAliasTarget(FSRef const&)
PUBLIC 52f1a 0 TNode::Dump() const
PUBLIC 52ff8 0 TNode::CreateChildAlias(TChildCreator const&, NodeNameSyntaxHint const&, TNodePtr const&)
PUBLIC 53296 0 TNode::GetMediaTypes(long&) const
PUBLIC 532ec 0 TNode::GetServerProtocols() const
PUBLIC 5331c 0 TNode::OpenScreenShareSync(TCountedPtr<TNodeTask>) const
PUBLIC 53436 0 TNode::NWNodeUnmountCallback(__NWNode*, __CFString const*, unsigned long, NWNodeError, void*)
PUBLIC 53536 0 TNode::SetQuery(__CFString const*, TCountedPtr<TClientQuery> const&)
PUBLIC 535ba 0 TNode::CopyMDItemIdentity() const
PUBLIC 536ac 0 TNode::SetIfNetworkODSBrowser(__NWBrowser*, __NWNode*) const
PUBLIC 53772 0 TNode::SetIfNetworkNearbyBrowser(__NWBrowser*, __NWNode*) const
PUBLIC 53838 0 TNode::TNode(TNode*, __MDItem*)
PUBLIC 538fc 0 TNode::SetIsInvisibleInSidebar(bool, bool)
PUBLIC 539c6 0 TNode::SetInvisibleInSidebar(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 53a72 0 TNode::GetSortingGroup(TPropertyReference&) const
PUBLIC 53ab6 0 TNode::GetServerUserName(TPropertyReference&) const
PUBLIC 53b8c 0 TNode::GetDeepItemCount(TPropertyReference&) const
PUBLIC 53bae 0 TNode::GetMDQueryRef() const
PUBLIC 53cd8 0 TNode::GetHitDateValue(TPropertyReference&, __CFDate const* (TNodeQuery::*)(TNodePtr const&) const) const
PUBLIC 53e44 0 TNode::GetLastUsedDate(TPropertyReference&) const
PUBLIC 53e88 0 TNode::OpenServerSync(TCountedPtr<TNodeTask>) const
PUBLIC 54124 0 TNode::StPopulating::StPopulating(TNode const*, TNode::StPopulating*)
PUBLIC 541a4 0 TNode::StPopulating::~StPopulating()
PUBLIC 5421e 0 TNode::ResetVolumeName()
PUBLIC 542e2 0 TNode::NotifyNameChanges() const
PUBLIC 543ac 0 TNode::Resynchronize()
PUBLIC 54466 0 TNode::RequestFullSynchronization()
PUBLIC 545ae 0 TNode::SetNewAliasTarget(TNodePtr const&)
PUBLIC 5469e 0 TNode::GetUnresolvedNode(HFSUniStr255 const&, OpaqueIconRef*)
PUBLIC 54740 0 TNode::ComputerNameChangedCallback(__SCDynamicStore const*, __CFArray const*, void*)
PUBLIC 547b8 0 TNode::GetNetworkODSBrowser()
PUBLIC 54a88 0 TNode::GetTrashNode()
PUBLIC 54bd4 0 SharedFoldersCallback(OpaqueSFLRef*, void*)
PUBLIC 54c16 0 SavedSearchesCallback(OpaqueSFLRef*, void*)
PUBLIC 54c58 0 TNode::SetiDisk(TNodePtr const&, long)
PUBLIC 54db2 0 TNode::HandleiDiskChanged()
PUBLIC 54e6c 0 TNode::iDiskPreferenceChangedCallback(__CFNotificationCenter*, void*, __CFString const*, void const*, __CFDictionary const*)
PUBLIC 54ea4 0 TNode::~TNode()
PUBLIC 54f6c 0 TNode::RemoveVirtualNode()
PUBLIC 550c8 0 TNode::IsMountedSharepoint() const
PUBLIC 551a6 0 TNode::NetworkNodeUnmount() const
PUBLIC 552dc 0 TNode::DisconnectShareSync(TCountedPtr<TNodeTask>) const
PUBLIC 554a6 0 TNode::VolumeUnmount(int*)
PUBLIC 554d8 0 TNode::GetIsMountedSharepoint(TPropertyReference&) const
PUBLIC 55500 0 TNode::StSynchronize::StSynchronize(TNode*, bool, bool)
PUBLIC 556c4 0 TNode::Synchronize(OpaqueNodeRequest* const&, unsigned long)
PUBLIC 55712 0 TNode::MountiDisk(TNodePtr&)
PUBLIC 55876 0 TNode::iDiskChangedCallback(__CFMachPort*, void*, long, void*)
PUBLIC 55902 0 TNode::RemoveProperty(unsigned long)
PUBLIC 55a10 0 TNode::RemovePropertyValue(unsigned long)
PUBLIC 55a84 0 TNode::UpdateSizeInfo()
PUBLIC 55d42 0 TNode::DisconnectShare(OpaqueNodeRequest*, unsigned long) const
PUBLIC 55e9a 0 TNode::OpenServer(OpaqueNodeRequest*, unsigned long) const
PUBLIC 55ff2 0 TNode::OpenScreenShare(OpaqueNodeRequest*, unsigned long) const
PUBLIC 56156 0 TNode::RequestNetworkTask(TCountedPtr<TNodeTask> const&)
PUBLIC 561f8 0 TNode::IsSnapshot() const
PUBLIC 562e6 0 TNode::SnapshotForItem(TNodePtr&) const
PUBLIC 56394 0 TNode::CopyQueryDictionaries(__CFDictionary const**, __CFDictionary const**)
PUBLIC 566b4 0 TNode::CreateNewLockFile(TOperation&, OperationRecord*, HFSUniStr255 const&, bool, TNode*)
PUBLIC 56a54 0 TNode::CopyOriginalPath(__CFString const**) const
PUBLIC 56bba 0 TNode::GetSavedSearchNode(TUString const&)
PUBLIC 56c54 0 TNode::IsInHome() const
PUBLIC 56d1c 0 TNode::VolumeIs(unsigned long&) const
PUBLIC 56e04 0 TNode::SetPermissions(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 56f44 0 TNode::Delete(TOperation*, OperationRecord*, bool, bool)
PUBLIC 5705a 0 TNode::HandleNotifyRequest(__CFRunLoopTimer*, void*)
PUBLIC 570f8 0 TNode::SetIndex(unsigned long)
PUBLIC 573f6 0 NetworkODSCallback(__NWBrowser*, __NWNode*, __CFString const*, unsigned long, NWBrowserError, void*)
PUBLIC 574a8 0 NetworkNearbyCallback(__NWBrowser*, __NWNode*, __CFString const*, unsigned long, NWBrowserError, void*)
PUBLIC 5755a 0 TNode::GetCustomIconFile(FSRef&, unsigned char)
PUBLIC 57886 0 TNode::RemoveCustomIcon()
PUBLIC 579c4 0 TNode::SetCustomIcon(char**)
PUBLIC 57d52 0 TNode::SetIconRef(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 57ee8 0 TNodePtr::operator!=(TNodePtr const&) const
PUBLIC 57efe 0 TNodePtr::operator==(TNode*) const
PUBLIC 57f12 0 TNode::IsUnresolved() const
PUBLIC 57f24 0 __CFString const** std::__copy_backward<true, std::random_access_iterator_tag>::copy_b<__CFString const*>(__CFString const* const*, __CFString const* const*, __CFString const**)
PUBLIC 57fda 0 bool __gnu_cxx::operator!=<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >(__gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > > const&, __gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > > const&)
PUBLIC 57ff0 0 void std::_Destroy<__gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >, std::allocator<__CFString const*> >(__gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >, __gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >, std::allocator<__CFString const*>)
PUBLIC 58090 0 std::vector<TNode*, std::allocator<TNode*> >::erase(__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >)
PUBLIC 5810e 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::_Vector_impl::_Vector_impl(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> const&)
PUBLIC 58142 0 std::vector<__CFString const*, std::allocator<__CFString const*> >::erase(__gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >, __gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >)
PUBLIC 581be 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::swap(std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >&)
PUBLIC 5820e 0 void std::__fill<true>::fill<__gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >, __CFString const*>(__gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >, __gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >, __CFString const* const&)
PUBLIC 58266 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::_Vector_base(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> const&)
PUBLIC 58270 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::~_Vector_base()
PUBLIC 58288 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::vector(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> const&)
PUBLIC 582c8 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::capacity() const
PUBLIC 582f0 0 TNode::IsODS() const
PUBLIC 58330 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::size() const
PUBLIC 58390 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::operator[](unsigned long)
PUBLIC 584d2 0 __CFString const** std::__copy_normal<true, false>::copy_n<__gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >, __CFString const**>(__gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >, __gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >, __CFString const**)
PUBLIC 58518 0 TiDiskMonitor::~TiDiskMonitor()
PUBLIC 5855a 0 TiDiskMonitor::TiDiskMonitor()
PUBLIC 5859c 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::_Vector_base(unsigned long, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> const&)
PUBLIC 58664 0 TChildrenList::GetSearchCount() const
PUBLIC 5867c 0 std::vector<__CFString const*, std::allocator<__CFString const*> >::_M_fill_insert(__gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >, unsigned long, __CFString const* const&)
PUBLIC 58910 0 std::vector<__CFString const*, std::allocator<__CFString const*> >::resize(unsigned long, __CFString const* const&)
PUBLIC 58982 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::vector(unsigned long, __gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >* const&, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> const&)
PUBLIC 589d4 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::~vector()
PUBLIC 58bf0 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::_M_fill_insert(__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> > >, unsigned long, __gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >* const&)
PUBLIC 58e82 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::reserve(unsigned long)
PUBLIC 58fc0 0 TPropertyComparator::TPropertyComparator(unsigned long, short (*)(unsigned long, unsigned short const*, unsigned long, unsigned short const*))
PUBLIC 58fde 0 TPropertyComparator::TPropertyComparator(unsigned long, short (*)(long long, long long))
PUBLIC 58ffc 0 TPropertyComparator::operator()(std::pair<TNodePtr, TPropertyStore> const&, std::pair<TNodePtr, TPropertyStore> const&) const
PUBLIC 5906e 0 TNodeIterator::AtIndex(unsigned long)
PUBLIC 590be 0 TNodeIterator::~TNodeIterator()
PUBLIC 590e0 0 TNodeIterator::TNodeIterator(TNodePtr const&, short (*)(unsigned long, unsigned short const*, unsigned long, unsigned short const*), short (*)(long long, long long), unsigned long, bool)
PUBLIC 593ae 0 THFSPlusCatalog::GetTrashNode() const
PUBLIC 593f8 0 std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::end()
PUBLIC 59404 0 std::pair<TNodePtr, TPropertyStore> const& std::__median<std::pair<TNodePtr, TPropertyStore>, TPropertyComparator>(std::pair<TNodePtr, TPropertyStore> const&, std::pair<TNodePtr, TPropertyStore> const&, std::pair<TNodePtr, TPropertyStore> const&, TPropertyComparator)
PUBLIC 594a4 0 bool __gnu_cxx::operator==<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > > const&, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > > const&)
PUBLIC 594ba 0 bool __gnu_cxx::operator< <std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > > const&, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > > const&)
PUBLIC 594e2 0 std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::operator[](unsigned long)
PUBLIC 594f2 0 std::allocator<std::pair<TNodePtr, TPropertyStore> >::allocator()
PUBLIC 594f8 0 std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::vector(std::allocator<std::pair<TNodePtr, TPropertyStore> > const&)
PUBLIC 59544 0 std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::~vector()
PUBLIC 5958a 0 void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, std::pair<TNodePtr, TPropertyStore>, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, std::pair<TNodePtr, TPropertyStore>, TPropertyComparator)
PUBLIC 59608 0 void std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 59684 0 void std::swap<std::pair<TNodePtr, TPropertyStore> >(std::pair<TNodePtr, TPropertyStore>&, std::pair<TNodePtr, TPropertyStore>&)
PUBLIC 596f6 0 void std::__iter_swap<true>::iter_swap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > > >(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >)
PUBLIC 59788 0 void std::__push_heap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, int, std::pair<TNodePtr, TPropertyStore>, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, int, int, std::pair<TNodePtr, TPropertyStore>, TPropertyComparator)
PUBLIC 59834 0 void std::__adjust_heap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, int, std::pair<TNodePtr, TPropertyStore>, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, int, int, std::pair<TNodePtr, TPropertyStore>, TPropertyComparator)
PUBLIC 59950 0 void std::make_heap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 59a16 0 void std::__pop_heap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, std::pair<TNodePtr, TPropertyStore>, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, std::pair<TNodePtr, TPropertyStore>, TPropertyComparator)
PUBLIC 59aac 0 void std::pop_heap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 59b0c 0 void std::sort_heap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 59b64 0 void std::partial_sort<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 59c68 0 void std::__introsort_loop<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, int, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, int, TPropertyComparator)
PUBLIC 59dca 0 std::pair<TNodePtr, TPropertyStore>* std::__copy_backward<false, std::random_access_iterator_tag>::copy_b<std::pair<TNodePtr, TPropertyStore>*, std::pair<TNodePtr, TPropertyStore>*>(std::pair<TNodePtr, TPropertyStore>*, std::pair<TNodePtr, TPropertyStore>*, std::pair<TNodePtr, TPropertyStore>*)
PUBLIC 59e32 0 void std::__insertion_sort<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 59f4e 0 void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 5a002 0 void std::sort<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 5a0a4 0 TOperation::GetChildPort(unsigned int*, bool)
PUBLIC 5a0e2 0 TOperation::PerformOperation(OperationRecord*)
PUBLIC 5a0ea 0 TOperation::UpdateStatusItemsCompletedIncrementally(long long, long long)
PUBLIC 5a168 0 TOperation::Cleanup(OperationRecord*)
PUBLIC 5a16e 0 TOperation::NeedsAuthentication(OperationRecord*)
PUBLIC 5a176 0 TOperation::DeleteLockFilesIfNeeded(OperationRecord*)
PUBLIC 5a17c 0 TOperation::ResolveConflict(OperationRecord*)
PUBLIC 5a184 0 TOperation::SetCurrentConflict(unsigned long)
PUBLIC 5a1a4 0 TOperation::CheckDestination(OperationRecord*)
PUBLIC 5a1ac 0 TOperation::LogOperationName(OperationRecord*) const
PUBLIC 5a1be 0 TOperation::UpdateDestinationSpaceNeeds(long long, long long, long long, long long, long long, unsigned long long, unsigned long, bool, bool, long)
PUBLIC 5a286 0 TTrashOperation::NeedsAuthentication(OperationRecord*)
PUBLIC 5a290 0 GetRequestedOperation(unsigned long long)
PUBLIC 5a2a2 0 SetOwner()
PUBLIC 5a2a8 0 TDeleteImmediatelyOperation::ResolveConflict(OperationRecord*)
PUBLIC 5a2ba 0 TDeleteImmediatelyOperation::NeedsSizeCheck() const
PUBLIC 5a2c4 0 TDeleteImmediatelyOperation::LogOperationName(OperationRecord*) const
PUBLIC 5a2d6 0 TCopyPermissionsOperation::PerformOperation(OperationRecord*)
PUBLIC 5a2de 0 TCopyPermissionsOperation::NeedsAuthentication(OperationRecord*)
PUBLIC 5a2e8 0 TCopyPermissionsOperation::LogOperationName(OperationRecord*) const
PUBLIC 5a2fa 0 TDeleteBackupSnapShotOperation::ResolveConflict(OperationRecord*)
PUBLIC 5a30c 0 TDeleteBackupSnapShotOperation::NeedsAuthentication(OperationRecord*)
PUBLIC 5a316 0 TDeleteBackupSnapShotOperation::NeedsSizeCheck() const
PUBLIC 5a320 0 TDeleteBackupSnapShotOperation::Cleanup(OperationRecord*)
PUBLIC 5a3a8 0 TDeleteBackupSnapShotOperation::LogOperationName(OperationRecord*) const
PUBLIC 5a3ba 0 TOperation::ReportErrorFromUnprotectedContext(OperationErrorRecord&)
PUBLIC 5a44a 0 ReportOperationError(unsigned long long, OperationErrorRecord&)
PUBLIC 5a460 0 SetOperationCurrentTarget(unsigned long long, unsigned long long)
PUBLIC 5a4b2 0 TOperation::Cancel()
PUBLIC 5a4c2 0 FlushRootLock(unsigned long long, FSRef const&, unsigned long long)
PUBLIC 5a578 0 TCopyMoveOperation::PerformMoveInSameParent(OperationRecord*)
PUBLIC 5a60e 0 TDeleteImmediatelyOperation::NeedsAuthentication(OperationRecord*)
PUBLIC 5a642 0 GetRootLock(FSRef const&, unsigned long long&)
PUBLIC 5a6d8 0 TConflictIterator::First() const
PUBLIC 5a718 0 ConflictIteratorFirst(OpaqueOperationData*)
PUBLIC 5a76e 0 TOperation::KillLocumIfNotInFlight()
PUBLIC 5a7e4 0 TCopyMoveOperation::AdjustIfInSidebar(TNodePtr const&, TNodePtr const&)
PUBLIC 5a896 0 TOperation::~TOperation()
PUBLIC 5aa24 0 TOperation::ReportError(OperationErrorRecord&)
PUBLIC 5aac0 0 TOperation::ReportErrorForNode(long, TNodePtr, long)
PUBLIC 5ab60 0 TOperation::ReportErrorNoThrow(OperationErrorRecord&)
PUBLIC 5abea 0 TOperation::TOperation()
PUBLIC 5adc0 0 TOperation::TOperation()
PUBLIC 5adca 0 TDeleteBackupSnapShotOperation::~TDeleteBackupSnapShotOperation()
PUBLIC 5adfe 0 TDeleteBackupSnapShotOperation::~TDeleteBackupSnapShotOperation()
PUBLIC 5ae1c 0 TDeleteBackupSnapShotOperation::~TDeleteBackupSnapShotOperation()
PUBLIC 5ae26 0 TDeleteBackupSnapShotOperation::TDeleteBackupSnapShotOperation(OperationSelector const&, long, __CFString const*, __CFURL const*)
PUBLIC 5ae72 0 TDeleteBackupSnapShotOperation::TDeleteBackupSnapShotOperation(OperationSelector const&, long, __CFString const*, __CFURL const*)
PUBLIC 5ae7c 0 TCopyPermissionsOperation::~TCopyPermissionsOperation()
PUBLIC 5aeb0 0 TCopyPermissionsOperation::~TCopyPermissionsOperation()
PUBLIC 5aece 0 TCopyPermissionsOperation::~TCopyPermissionsOperation()
PUBLIC 5aed8 0 TCopyPermissionsOperation::TCopyPermissionsOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 5af1a 0 TCopyPermissionsOperation::TCopyPermissionsOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 5af24 0 TDeleteImmediatelyOperation::~TDeleteImmediatelyOperation()
PUBLIC 5af58 0 TDeleteImmediatelyOperation::~TDeleteImmediatelyOperation()
PUBLIC 5af76 0 TDeleteImmediatelyOperation::~TDeleteImmediatelyOperation()
PUBLIC 5af80 0 TDeleteImmediatelyOperation::TDeleteImmediatelyOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 5afc2 0 TDeleteImmediatelyOperation::TDeleteImmediatelyOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 5afcc 0 TCopyMoveOperation::~TCopyMoveOperation()
PUBLIC 5b050 0 TCopyMoveOperation::TCopyMoveOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 5b0a6 0 TTrashOperation::~TTrashOperation()
PUBLIC 5b0c4 0 TTrashOperation::TTrashOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 5b128 0 TOperation::~TOperation()
PUBLIC 5b132 0 TOperation::TransformOperations()
PUBLIC 5b13c 0 TTrashOperation::Cancel()
PUBLIC 5b1d0 0 TOperation::RenameAndMove(OperationRecord*)
PUBLIC 5b4d6 0 TCopyMoveOperation::HandleOverwrite(OperationRecord*)
PUBLIC 5b87a 0 TCopyMoveOperation::HandleRenameConflictedItem(OperationRecord*)
PUBLIC 5bb1a 0 TCopyMoveOperation::PerformRemoteCopyOrForceMove(OperationRecord*)
PUBLIC 5bf5e 0 TDeleteImmediatelyOperation::PerformOperation(OperationRecord*)
PUBLIC 5c072 0 TDeleteImmediatelyOperation::Cleanup(OperationRecord*)
PUBLIC 5c0fa 0 TCopyPermissionsOperation::ResolveConflict(OperationRecord*)
PUBLIC 5c3aa 0 TDeleteBackupSnapShotOperation::PerformOperation(OperationRecord*)
PUBLIC 5c5e6 0 TOperation::SetItemCount(unsigned long)
PUBLIC 5c5f8 0 std::pair<TNodePtr, TNodePtr>::operator=(std::pair<TNodePtr, TNodePtr> const&)
PUBLIC 5c632 0 std::pair<TNodePtr, TNodePtr>* std::__copy_backward<false, std::random_access_iterator_tag>::copy_b<std::pair<TNodePtr, TNodePtr>*, std::pair<TNodePtr, TNodePtr>*>(std::pair<TNodePtr, TNodePtr>*, std::pair<TNodePtr, TNodePtr>*, std::pair<TNodePtr, TNodePtr>*)
PUBLIC 5c66c 0 TOperation::CopyProperties(TNodePtr const&, TCountedPtr<TPropertyMap> const&)
PUBLIC 5c6a6 0 std::allocator<OperationRecord*>::allocator<std::_List_node<OperationRecord*> >(std::allocator<std::_List_node<OperationRecord*> > const&)
PUBLIC 5c6ee 0 TNode::IsInUse() const
PUBLIC 5c738 0 TPathName::FullPath(TUString&, unsigned short) const
PUBLIC 5c82e 0 TPathName::AsOldStyleFullPath(TUString&) const
PUBLIC 5c850 0 TPathName::~TPathName()
PUBLIC 5c888 0 TPathName::~TPathName()
PUBLIC 5c8a8 0 TPathName::TPathName(TUString const&, unsigned short)
PUBLIC 5cade 0 TPathName::TPathName()
PUBLIC 5cb28 0 TPathName::TPathName(TNodePtr const&)
PUBLIC 5ccfc 0 TPathName::TPathName(TNodePtr const&)
PUBLIC 5cd06 0 std::iterator_traits<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*> >::difference_type std::distance<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>)
PUBLIC 5cd50 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>::operator+=(int)
PUBLIC 5cda6 0 void std::advance<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, int>(std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>&, int)
PUBLIC 5cdb0 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>::operator+=(int)
PUBLIC 5ce06 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>::operator-(int) const
PUBLIC 5ce5e 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>::operator+(int) const
PUBLIC 5ceb4 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_new_elements_at_front(unsigned long)
PUBLIC 5cef8 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_reserve_elements_at_front(unsigned long)
PUBLIC 5cf4e 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_new_elements_at_back(unsigned long)
PUBLIC 5cf8a 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_reserve_elements_at_back(unsigned long)
PUBLIC 5cfe0 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__copy_backward<false, std::random_access_iterator_tag>::copy_b<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 5d0ae 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__copy_backward_aux<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 5d132 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__copy_backward_normal<false, false>::copy_b_n<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 5d1b6 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::copy_backward<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 5d23a 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__uninitialized_copy_aux<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, __false_type)
PUBLIC 5d2e2 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::uninitialized_copy<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 5d36a 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__uninitialized_copy_a<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, HFSUniStr255>(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::allocator<HFSUniStr255>)
PUBLIC 5d3ee 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__uninitialized_copy_aux<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, __false_type)
PUBLIC 5d49c 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::uninitialized_copy<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 5d518 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__uninitialized_copy_a<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, HFSUniStr255>(std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::allocator<HFSUniStr255>)
PUBLIC 5d590 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__copy<false, std::random_access_iterator_tag>::copy<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 5d64a 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__copy_aux<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 5d6c2 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__copy_normal<false, false>::copy_n<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 5d73a 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__uninitialized_copy_copy<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::allocator<HFSUniStr255> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::allocator<HFSUniStr255>)
PUBLIC 5d85a 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__uninitialized_copy_copy<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::allocator<HFSUniStr255> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::allocator<HFSUniStr255>)
PUBLIC 5d974 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::copy<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 5d9f8 0 void std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_insert_aux<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, unsigned long)
PUBLIC 5e354 0 void std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_range_insert_aux<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::forward_iterator_tag)
PUBLIC 5e574 0 void std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_insert_dispatch<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, __false_type)
PUBLIC 5e5e4 0 void std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::insert<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>)
PUBLIC 5e654 0 GetListPropertyAsPoint
PUBLIC 5e65e 0 GetListPropertyAsDateTime
PUBLIC 5e668 0 GetListPropertyAsRGBColor
PUBLIC 5e672 0 SetListPropertyAsPoint
PUBLIC 5e67c 0 SetListPropertyAsDateTime
PUBLIC 5e686 0 SetListPropertyAsRGBColor
PUBLIC 5e690 0 NodePropertyListGet(OpaquePropertyListRef*, unsigned long, TPropertyReference&)
PUBLIC 5e6dc 0 NodePropertyListGetAsBoolean
PUBLIC 5e714 0 GetListPropertyAsBoolean
PUBLIC 5e71e 0 NodePropertyListGetAsByte
PUBLIC 5e756 0 GetListPropertyAsByte
PUBLIC 5e760 0 NodePropertyListGetAsOSType
PUBLIC 5e798 0 GetListPropertyAsOSType
PUBLIC 5e7a2 0 NodePropertyListGetAsInt16
PUBLIC 5e7da 0 GetListPropertyAsInt16
PUBLIC 5e7e4 0 NodePropertyListGetAsInt32
PUBLIC 5e81c 0 GetListPropertyAsInt32
PUBLIC 5e826 0 NodePropertyListGetAsInt64
PUBLIC 5e85e 0 GetListPropertyAsInt64
PUBLIC 5e868 0 NodePropertyListGetAsIconRef
PUBLIC 5e8a0 0 GetListPropertyAsIconRef
PUBLIC 5e8aa 0 NodePropertyListGetAsUTCDateTime
PUBLIC 5e8e2 0 GetListPropertyAsUTCDateTime
PUBLIC 5e8ec 0 NodePropertyListGetAsString
PUBLIC 5e958 0 GetListPropertyAsStringNew
PUBLIC 5e962 0 NodePropertyListGetAsData
PUBLIC 5e9d0 0 GetListPropertyAsDataNew
PUBLIC 5e9da 0 NodePropertyListSetAsData
PUBLIC 5ea18 0 SetListPropertyAsDataNew
PUBLIC 5ea22 0 NodePropertyListSetAsUTCDateTime
PUBLIC 5ea50 0 SetListPropertyAsUTCDateTime
PUBLIC 5ea5a 0 NodePropertyListSetAsOSType
PUBLIC 5ea88 0 SetListPropertyAsOSType
PUBLIC 5ea92 0 NodePropertyListSetAsIconRef
PUBLIC 5eac0 0 SetListPropertyAsIconRef
PUBLIC 5eaca 0 NodePropertyListSetAsInt64
PUBLIC 5eb04 0 SetListPropertyAsInt64
PUBLIC 5eb0e 0 NodePropertyListSetAsInt32
PUBLIC 5eb3c 0 SetListPropertyAsInt32
PUBLIC 5eb46 0 NodePropertyListSetAsInt16
PUBLIC 5eb7c 0 SetListPropertyAsInt16
PUBLIC 5eb8c 0 NodePropertyListSetAsByte
PUBLIC 5ebc0 0 SetListPropertyAsByte
PUBLIC 5ebd0 0 NodePropertyListSetAsBoolean
PUBLIC 5ec06 0 SetListPropertyAsBoolean
PUBLIC 5ec16 0 RemoveListPropertyValue
PUBLIC 5ec4a 0 THashTable<unsigned long, TPropertyValue>::erase(THashTable<unsigned long, TPropertyValue>::iterator const&)
PUBLIC 5ec7e 0 THashTable<unsigned long, TPropertyValue>::find(unsigned long const&)
PUBLIC 5ed44 0 THashTable<unsigned long, TPropertyValue>::erase(unsigned long const&)
PUBLIC 5ed8a 0 NodeDiagnosticLogging
PUBLIC 5ed90 0 NodeSetDiagnosticTarget
PUBLIC 5ed96 0 RefName
PUBLIC 5edfc 0 NodeFlags
PUBLIC 5ee2a 0 NodeDump
PUBLIC 5ee58 0 SleepCallback(void*, unsigned int, unsigned int, void*)
PUBLIC 5eec6 0 RegisterForVolumeIconChanges()
PUBLIC 5ef26 0 NodeDefaultSearchCount
PUBLIC 5ef30 0 NodeGetReferenceCount
PUBLIC 5ef38 0 NodeGetParentReferenceCount
PUBLIC 5ef40 0 NodeEventCopyEvent
PUBLIC 5ef5e 0 _NodeSizerWithSkipProc
PUBLIC 5f160 0 _NodeSetMetaDataForBackup
PUBLIC 5f344 0 _NodeCopyPermissions
PUBLIC 5f3ac 0 _NodeContextSetOptions
PUBLIC 5f3dc 0 NodeIteratorAtIndex
PUBLIC 5f440 0 _NodeCopyOpenFolder
PUBLIC 5f4fc 0 DisplayNameChangedCallback(__CFNotificationCenter*, void*, __CFString const*, void const*, __CFDictionary const*)
PUBLIC 5f558 0 NodeContextFlush
PUBLIC 5f598 0 NodeIsDesktop
PUBLIC 5f5ca 0 NodeUserIsOwner
PUBLIC 5f5fc 0 NodeIsLocation
PUBLIC 5f62e 0 NodeIsClipping
PUBLIC 5f660 0 NodeIsSymLink
PUBLIC 5f692 0 VolumeHasNoVolumeSizes
PUBLIC 5f6c4 0 VolumeIs
PUBLIC 5f738 0 NodeCopyPropertyAsCFData
PUBLIC 5f816 0 NodeCopyPropertyAsCFString
PUBLIC 5f8f6 0 NodeGetPropertyAsCFAbsoluteTime
PUBLIC 5f958 0 NodeGetPropertyAsData
PUBLIC 5f9cc 0 NodeGetPropertyAsString
PUBLIC 5fa40 0 NodeGetPropertyAsOSType
PUBLIC 5fa7e 0 NodeGetPropertyAsIconRef
PUBLIC 5fabc 0 NodeGetPropertyAsInt64
PUBLIC 5fafa 0 NodeGetPropertyAsInt32
PUBLIC 5fb38 0 NodeGetPropertyAsInt16
PUBLIC 5fb76 0 NodeGetPropertyAsByte
PUBLIC 5fbb4 0 NodeGetPropertyAsBoolean
PUBLIC 5fc02 0 NodeSetPropertyAsCFData
PUBLIC 5fc9a 0 NodeSetPropertyAsCFString
PUBLIC 5fd3e 0 NodeSetPropertyAsCFAbsoluteTime
PUBLIC 5fd90 0 NodeSetPropertyAsData
PUBLIC 5fdd4 0 NodeSetPropertyAsString
PUBLIC 5fe18 0 NodeSetPropertyAsUTCDateTime
PUBLIC 5fe4e 0 NodeSetPropertyAsOSType
PUBLIC 5fe84 0 NodeSetPropertyAsIconRef
PUBLIC 5feba 0 NodeSetPropertyAsInt64
PUBLIC 5fefc 0 NodeSetPropertyAsInt32
PUBLIC 5ff32 0 NodeSetPropertyAsInt16
PUBLIC 5ff6e 0 NodeSetPropertyAsByte
PUBLIC 5ffaa 0 NodeSetPropertyAsBoolean
PUBLIC 5ffe8 0 NodeSetAccessRights
PUBLIC 60066 0 NodeSetPermissionInfo
PUBLIC 600ee 0 NodeGetChildrenCount
PUBLIC 6018e 0 NodeNewNumberSortedIterator
PUBLIC 601cc 0 NodeNewStringSortedIterator
PUBLIC 6020a 0 NodeCreateNewVirtualFolder
PUBLIC 60310 0 NodeCreateNewVirtualNode
PUBLIC 60414 0 NodeOperateWithAuthorizationData
PUBLIC 6048e 0 NodeRequestPermissionsOperation
PUBLIC 60526 0 _FSOperation
PUBLIC 606a0 0 _FSBackupOperation
PUBLIC 6080e 0 NodeCopyOriginalPath
PUBLIC 60894 0 NodeOpenScreenShare
PUBLIC 608fc 0 NodeOpenServer
PUBLIC 60964 0 NodeDisconnectShare
PUBLIC 609cc 0 NodeGetServerProtocols
PUBLIC 60a2a 0 NodeGetMediaTypes
PUBLIC 60a9a 0 NodeCopyDefaultSearch
PUBLIC 60b18 0 NodeCreateVirtualChildAtIndexIn
PUBLIC 60c10 0 NodeSetVirtualNodeIndex
PUBLIC 60c72 0 NodeRemoveVirtualNode
PUBLIC 60ccc 0 NodeVirtualChildLocked
PUBLIC 60d2a 0 NodeCreateNewNodeQuery
PUBLIC 60dd8 0 NodeCopyNodeQueryRef
PUBLIC 60e24 0 NodeQueryGetQueryString
PUBLIC 60e72 0 NodeQueryGetSortingAttrs
PUBLIC 60ec0 0 NodeQueryGetComparator
PUBLIC 60f0e 0 NodeQueryGetSortContext
PUBLIC 60f82 0 NodeQueryGetScopeDirectories
PUBLIC 60fd0 0 NodeQueryGetScopeOptions
PUBLIC 6101e 0 NodeSetNewQuery
PUBLIC 610d8 0 NodeCopyMDItemIdentity
PUBLIC 61136 0 NodeCopyQueryDictionaries
PUBLIC 611b6 0 NodeGetMDQueryRef
PUBLIC 61214 0 NodeCopyMDQueryRef
PUBLIC 6127e 0 NodeSynchronize
PUBLIC 612de 0 RemoveNodePropertyValue
PUBLIC 61340 0 NodeCopyAttributes
PUBLIC 613bc 0 NodeCopyAttributesWithSelector
PUBLIC 61438 0 NodeCopyAccessRights
PUBLIC 614b4 0 NodeCopyPermissionInfo
PUBLIC 61530 0 NodeCopyAttribute
PUBLIC 615c0 0 NodeCopyLocationData
PUBLIC 6163c 0 NodeCopyClippingData
PUBLIC 616cc 0 _NodeNumberCompareWithError
PUBLIC 6177a 0 NodeNumberCompare
PUBLIC 617ac 0 NodeRequestSynchronization
PUBLIC 617f2 0 NodeCopyUserOrGroupUUIDToName
PUBLIC 6187e 0 NodeMapNameToUserOrGroupUUID
PUBLIC 6190a 0 NodeCopyUserOrGroupIDToName
PUBLIC 619c6 0 NodeMapNameToUserOrGroupID
PUBLIC 61a7a 0 GetNodeDataAsURL
PUBLIC 61af2 0 NodeCopyChangeNotifier
PUBLIC 61b3e 0 _ReleasePropertyStore
PUBLIC 61b98 0 _NodeSetPropertyListForRef
PUBLIC 61cc0 0 NodeCancelOperation
PUBLIC 61d22 0 NodeModifyAccessRightsForUser
PUBLIC 61db8 0 NodeModifyAccessRightsWithDictionaries
PUBLIC 61e20 0 NodeRemoveUserFromAccessControlList
PUBLIC 61e82 0 NodeReplaceAccessControlListWithDictionary
PUBLIC 61ee4 0 NodeApplyAccessRightsWithDictionary
PUBLIC 61f46 0 _NodeSetInterCopyDelayInSeconds
PUBLIC 61f94 0 _NodeGetUnbadgedIconRef
PUBLIC 62008 0 NodeCopyTrash
PUBLIC 620d8 0 NodeIsTrashEmpty
PUBLIC 62218 0 _NodeSetSpatialDataBulk
PUBLIC 6239e 0 _NodeCreateAliasFile
PUBLIC 62470 0 _NodeCopyPropertyListForRef
PUBLIC 62656 0 NodeName
PUBLIC 626f2 0 _NodeSetCommentForRef
PUBLIC 629b8 0 _NodeCopyProperties
PUBLIC 62ac0 0 NodeEventCopyResolvedParent
PUBLIC 62b9e 0 NodeEventGetSuboperation
PUBLIC 62c1e 0 NodeEventGetString
PUBLIC 62c8e 0 NodeEventGetAccessRightsArray
PUBLIC 62cf8 0 NodeEventGetModifiers
PUBLIC 62d4e 0 NodeEventGetTask
PUBLIC 62dde 0 NodeEventGetLocationData
PUBLIC 62e48 0 NodeEventGetClippingData
PUBLIC 62ec4 0 NodeVolumeEject
PUBLIC 63070 0 NodeVolumeUnmount
PUBLIC 63234 0 NodeCreateNewFile
PUBLIC 6332e 0 NodeCreateNewClipping
PUBLIC 63426 0 NodeCreateNewLocation
PUBLIC 6351e 0 NodeCreateNewAlias
PUBLIC 63626 0 ValidateNodeTask(OpaqueNodeTask*)
PUBLIC 6364c 0 NodeTaskGetType
PUBLIC 636b0 0 NodeTaskGetNode
PUBLIC 63754 0 NodeTaskGetStatus
PUBLIC 637be 0 NodeTaskGetProperty
PUBLIC 63818 0 NodeTaskGetPropertyList
PUBLIC 638cc 0 NodeTaskCancel
PUBLIC 63936 0 NodeCopyFromFSRef
PUBLIC 63aa2 0 NodeAliasSetTarget
PUBLIC 63c62 0 NodeCreateNewVirtualChildAtIndex
PUBLIC 63eb4 0 NodeSetVirtualChildIndex
PUBLIC 6404c 0 TMountPointList::GetVolumeParent(THFSPlusCatalog const*, TNodePtr&)
PUBLIC 64056 0 TMountPointList::AllowRootStoreCreation()
PUBLIC 64068 0 TMountPointList::RequestFullSynchronization(short)
PUBLIC 640b4 0 TMountPointList::IsMounted(TNodePtr const&)
PUBLIC 640e0 0 TMountPointList::VolumeIconChangedCallback(__CFNotificationCenter*, void*, __CFString const*, void const*, __CFDictionary const*)
PUBLIC 64216 0 TMountPointList::AddVolume(short, bool)
PUBLIC 64604 0 TMountPointList::HasPersistentStores(TFSInfo const&, TNode::StPopulating*, bool)
PUBLIC 646dc 0 TMountPointList::HasPersistentStores(THFSPlusRef const&, TNode::StPopulating*, bool)
PUBLIC 647bc 0 TMountPointList::VolumeType(short)
PUBLIC 6481a 0 TMountPointList::ResetVolumeName(short)
PUBLIC 648f4 0 short* std::__copy_backward<true, std::random_access_iterator_tag>::copy_b<short>(short const*, short const*, short*)
PUBLIC 64968 0 TNodeEvent::GetModifiers() const
PUBLIC 64984 0 TNodeEvent::GetInternalClientNotifier()
PUBLIC 64be0 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, unsigned long, TCountedPtr<TNotifier> const&, bool, long)
PUBLIC 64cea 0 TNodeEvent::TNodeEvent(unsigned long, OperationErrorRecord*, OperationIterator*, OperationMonitor*, TCountedPtr<TNotifier> const&, unsigned long)
PUBLIC 64e0e 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, __CFDictionary const*, __CFString const*)
PUBLIC 64f3e 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, __CFArray const*)
PUBLIC 65062 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, __CFArray const*)
PUBLIC 6506c 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 65164 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, __CFURL const*, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 6526c 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, __CFURL const*, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 65276 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, unsigned long, __CFDictionary const*, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 65384 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, unsigned long, __CFDictionary const*, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 6538e 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, void*, TCountedPtr<TNotifier> const&, bool)
PUBLIC 6549a 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, AliasRecord**, long, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 655c4 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, FSPermissionInfo*)
PUBLIC 656e2 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, FSPermissionInfo*)
PUBLIC 656ec 0 TNodeThread::~TNodeThread()
PUBLIC 65702 0 TNodeThread::~TNodeThread()
PUBLIC 65718 0 TFSNotificationTask::~TFSNotificationTask()
PUBLIC 6572e 0 TFSNotificationTask::~TFSNotificationTask()
PUBLIC 6574c 0 TSystemNotificationTask::~TSystemNotificationTask()
PUBLIC 65762 0 TSystemNotificationTask::~TSystemNotificationTask()
PUBLIC 65780 0 TFSEventsNotificationTask::~TFSEventsNotificationTask()
PUBLIC 65796 0 TFSEventsNotificationTask::~TFSEventsNotificationTask()
PUBLIC 657b4 0 TNodeSyncTask::HandleInternalComputerNameChanged(TCountedPtr<TNodeEvent> const&, TNodePtr const&)
PUBLIC 65802 0 TNodeSyncTask::HandleInternalVolumeDeleted(TCountedPtr<TNodeEvent> const&, TNodePtr const&)
PUBLIC 6581e 0 TNodeSyncTask::HandleInternalRefetchHome(TCountedPtr<TNodeEvent> const&, TNodePtr const&)
PUBLIC 6585c 0 TNodeSyncTask::TNodeSyncTask()
PUBLIC 6589a 0 TNodeSyncTask::HandleInternalUnsubscribeWithKQueue(TCountedPtr<TNodeEvent> const&, TNodePtr const&)
PUBLIC 659d4 0 TNodeSyncTask::~TNodeSyncTask()
PUBLIC 65a60 0 TNodeSyncTask::~TNodeSyncTask()
PUBLIC 65a6a 0 TNodeOpenSyncTask::TNodeOpenSyncTask(TNodePtr const&, TCountedPtr<TNodeTask> const&)
PUBLIC 65ae4 0 TNodeOpenSyncTask::~TNodeOpenSyncTask()
PUBLIC 65ba6 0 TNodeOpenSyncTask::~TNodeOpenSyncTask()
PUBLIC 65bb0 0 TNodeSyncTask::HandleInternalSubscribeWithKQueue(TCountedPtr<TNodeEvent> const&, TNodePtr const&)
PUBLIC 65dd2 0 TNodeOperationTask::~TNodeOperationTask()
PUBLIC 65df0 0 TNodeOperationTask::~TNodeOperationTask()
PUBLIC 65dfc 0 TNodeOperationTask::PerformOperation(OperationRecord*)
PUBLIC 65e04 0 TNodeOperationTask::AllowSleep()
PUBLIC 65e1c 0 TNodeOperationTask::Cancel()
PUBLIC 65e30 0 TNodeOperationTask::RequestPermissionsOperation(TCountedPtr<TPermissionsRequest> const&)
PUBLIC 65e3a 0 TNodeOperationTask::TNodeOperationTask(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 66026 0 OpaqueOperationRef** std::__copy_backward<true, std::random_access_iterator_tag>::copy_b<OpaqueOperationRef*>(OpaqueOperationRef* const*, OpaqueOperationRef* const*, OpaqueOperationRef**)
PUBLIC 660f2 0 TFolderSizeTask::TFolderSizeTask(THFSPlusCatalog*)
PUBLIC 6614a 0 TFolderSizeTask::~TFolderSizeTask()
PUBLIC 66182 0 TFolderSizeTask::~TFolderSizeTask()
PUBLIC 6618c 0 TFolderSizeTask::CancelTask()
PUBLIC 66198 0 TPropertyTask::TPropertyTask(THFSPlusCatalog*, bool)
PUBLIC 661fe 0 TPropertyTask::TPropertyTask(THFSPlusCatalog*, bool)
PUBLIC 66208 0 TPropertyTask::~TPropertyTask()
PUBLIC 66240 0 TPropertyTask::~TPropertyTask()
PUBLIC 6624a 0 TPropertyTask::HandleSetVirtualIndex(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 6626a 0 TPropertyTask::HandleSetAccessRightsArray(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 66292 0 TPropertyTask::HandleVolumeUnmountRequest(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 662c2 0 TPropertyTask::HandleFetchNodeRequest(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 66390 0 TPropertyTask::HandleStoreProperty(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 668e0 0 TPropertyTask::HandleVolumeEjectRequest(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 66910 0 TPropertyTask::HandleSetVirtualChildAtIndex(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 669b8 0 TPropertyTask::HandleInternalGetFolderRequest(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 66a0e 0 TPropertyTask::HandleSetPermissionInfo(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 66a4c 0 TPropertyTask::HandleCreateChild(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 66a9e 0 TPropertyTask::HandleFetchAttribute(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 66ee8 0 TPropertyTask::HandleFetchAccessRightsArray(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 66f90 0 TPropertyTask::HandleFetchPermisionInfo(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 6701e 0 TNodeTask::TNodeTask()
PUBLIC 67166 0 TNodeTask::TNodeTask(TCountedPtr<TNotifier> const&)
PUBLIC 672c6 0 TNodeTask::SetRequest(TNodePtr const&, unsigned long, unsigned long, void*)
PUBLIC 673a4 0 TNodeTask::SetRequest(TNodePtr const&, unsigned long, __CFArray const*)
PUBLIC 674ae 0 TNodeTask::SetRequest(TNodePtr const&, __CFString const*)
PUBLIC 6759c 0 TNodeTask::SetRequest(TNodePtr const&, unsigned long, TChildCreator const&, TNodePtr)
PUBLIC 676a4 0 TNodeTask::SetRequest(TNodePtr const&, FSRef const*)
PUBLIC 677e4 0 TNodeTask::SetRequest(TNodePtr const&, TUString const&, unsigned long)
PUBLIC 6790a 0 TNodeTask::SetRequest(TNodePtr const&, __CFURL const*)
PUBLIC 67a32 0 TNodeTask::SetRequest(TNodePtr const&, TNodePtr const&)
PUBLIC 67b28 0 TNodeTask::SetRequest(TNodePtr const&, TNodePtr const&, unsigned long)
PUBLIC 67c1e 0 TNodeTask::SetRequest(TNodePtr const&, unsigned long, unsigned long, bool)
PUBLIC 67d2c 0 TNodeTask::SetRequest(TNodePtr const&, unsigned long, FSPermissionInfo*)
PUBLIC 67e12 0 TPropertyTask::HandleOpenServerRequest(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 67e60 0 TNodeRequest::TNodeRequest(TClientChangeNotifier const*)
PUBLIC 67f5c 0 TPropertyTask::CancelTask()
PUBLIC 68004 0 TPropertyTask::HandleDisconnectShareRequest(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 68052 0 TPropertyTask::HandleOpenScreenShareRequest(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 680a0 0 TPropertyTask::HandleFetchLocationData(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 6817a 0 TPropertyTask::HandleFetchClippingData(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 6826c 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > > >::allocator<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >(std::allocator<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > > const&)
PUBLIC 68272 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*>::allocator<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >(std::allocator<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > > const&)
PUBLIC 6829a 0 std::allocator<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > > >(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > > > const&)
PUBLIC 682f2 0 bool __gnu_cxx::operator!=<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> > >(__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> > > const&, __gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> > > const&)
PUBLIC 6833c 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::operator[](unsigned long)
PUBLIC 6834e 0 void std::__fill<true>::fill<__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> > >, __gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*>(__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> > >, __gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> > >, __gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >* const&)
PUBLIC 68384 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*>::allocator(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> const&)
PUBLIC 6838a 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::_Vector_impl::_Vector_impl(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> const&)
PUBLIC 683be 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::swap(std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >&)
PUBLIC 68420 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::size() const
PUBLIC 68596 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::_Vector_base(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> const&)
PUBLIC 685a0 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::~_Vector_base()
PUBLIC 685b8 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::vector(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> const&)
PUBLIC 685c2 0 std::allocator<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >::allocator()
PUBLIC 685c8 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::capacity() const
PUBLIC 68688 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::_Vector_base(unsigned long, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> const&)
PUBLIC 686d0 0 TNodeEvent::CreateNodeEvent(unsigned long, TNodePtr const&, __CFArray const*)
PUBLIC 68724 0 TNodeEvent::CreateNodeEvent(unsigned long, TNodePtr const&, FSPermissionInfo*)
PUBLIC 68778 0 TNodeEvent::CreateNodeEvent(unsigned long, TNodePtr const&, __CFURL const*, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 687d6 0 TNodeEvent::CreateNodeEvent(unsigned long, TNodePtr const&, unsigned long, __CFDictionary const*, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 6883a 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::vector(unsigned long, __gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >* const&, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> const&)
PUBLIC 6888c 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::~vector()
PUBLIC 688c2 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::_M_fill_insert(__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> > >, unsigned long, __gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >* const&)
PUBLIC 68bb4 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::reserve(unsigned long)
PUBLIC 68d4c 0 TCountedPtr<TNodeRequest>::operator=(TCountedPtr<TNodeRequest> const&)
PUBLIC 68d90 0 std::pair<unsigned long long const, TCountedPtr<TNodeRequest> >::pair(std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > const&)
PUBLIC 68e3c 0 std::pair<unsigned long long const, TCountedPtr<TNodeRequest> >::pair(unsigned long long const&, TCountedPtr<TNodeRequest> const&)
PUBLIC 691e6 0 TNetworkBrowserSynchronizer::~TNetworkBrowserSynchronizer()
PUBLIC 6921c 0 THFSPlusSynchronizer::~THFSPlusSynchronizer()
PUBLIC 69242 0 TNetworkBrowserSynchronizer::TNetworkBrowserSynchronizer(TNodePtr const&, __NWBrowser*)
PUBLIC 692f4 0 THFSPlusSynchronizer::THFSPlusSynchronizer(THFSPlusRef const&)
PUBLIC 693da 0 TSFLSynchronizer::TSFLSynchronizer(TNodePtr const&, OpaqueSFLRef*, bool)
PUBLIC 69518 0 TSFLSynchronizer::~TSFLSynchronizer()
PUBLIC 695a4 0 THFSPlusRef* std::__copy_backward<false, std::random_access_iterator_tag>::copy_b<THFSPlusRef*, THFSPlusRef*>(THFSPlusRef*, THFSPlusRef*, THFSPlusRef*)
PUBLIC 695ea 0 TSFLRecord** std::__copy_backward<true, std::random_access_iterator_tag>::copy_b<TSFLRecord*>(TSFLRecord* const*, TSFLRecord* const*, TSFLRecord**)
PUBLIC 6965e 0 THFSPlusRef::SetCatalogDataFetched() const
PUBLIC 69682 0 TMetaData::SetTypeIdentifierString(__CFString const*)
PUBLIC 696be 0 THFSPlusRef::SetNodeQueryFSName(HFSUniStr255 const&)
PUBLIC 696ec 0 THFSPlusRef::SetVirtualNodeName(__CFString const*)
PUBLIC 6973a 0 THFSPlusRef::SetVirtualProxyNode(HFSUniStr255 const&, bool, bool, bool, bool, bool)
PUBLIC 69810 0 THFSPlusRef::CanSetExtensionHidden() const
PUBLIC 69824 0 THFSPlusRef::ChangedUserAccess(FSPermissionInfo*) const
PUBLIC 69874 0 THFSPlusRef::InitializeType(unsigned long)
PUBLIC 69890 0 THFSPlusRef::InitializeCreator(unsigned long)
PUBLIC 698ac 0 THFSPlusRef::GetURLType(TUString)
PUBLIC 69b84 0 THFSPlusRef::ApplyClippingData(void const*, void const*, void*)
PUBLIC 69c84 0 THFSPlusRef::GetAliasType() const
PUBLIC 69d66 0 THFSPlusRef::THFSPlusRef(THFSPlusRef const&)
PUBLIC 6a2b6 0 THFSPlusRef::~THFSPlusRef()
PUBLIC 6a332 0 THFSPlusRef::AddClippingExtensionForType(HFSUniStr255 const&, unsigned long, HFSUniStr255&)
PUBLIC 6a486 0 TMetaData::SetHeapSizeData(HeapSizeData*)
PUBLIC 6a53a 0 THFSPlusRef::SetNamesForVirtualNode(HFSUniStr255 const&, HFSUniStr255 const&)
PUBLIC 6a646 0 THFSPlusRef::CreateFile(FSRef const&, HFSUniStr255 const&, NodeNameSyntaxHint const&, long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), bool)
PUBLIC 6a72c 0 THFSPlusRef::CreateLockFile(FSRef const&, HFSUniStr255 const&, NodeNameSyntaxHint const&, long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*))
PUBLIC 6a78e 0 THFSPlusRef::ResetFSRef(FSRef const&)
PUBLIC 6a7d2 0 THFSPlusRef::GetAliasInfo(bool&, __CFString const**, HFSUniStr255*) const
PUBLIC 6a8f4 0 THFSPlusRef::ApplyAccessRightsWithDictionary(__CFDictionary const*)
PUBLIC 6a980 0 THFSPlusRef::ReplaceAccessControlListWithDictionary(__CFDictionary const*)
PUBLIC 6aa0c 0 THFSPlusRef::RemoveUserFromAccessControlList(__CFUUID const*)
PUBLIC 6aa98 0 THFSPlusRef::ModifyAccessRightsWithDictionaries(__CFDictionary const*, __CFDictionary const*)
PUBLIC 6ab24 0 THFSPlusRef::ModifyAccessRightsForUser(__CFUUID const*, unsigned long long, unsigned long long)
PUBLIC 6abf6 0 THFSPlusRef::SetAccessRightsArray(__CFArray const*)
PUBLIC 6ac8a 0 THFSPlusRef::CreateUserAccessRightsArray(__CFArray const**) const
PUBLIC 6ad2c 0 THFSPlusRef::SetPermissionInfo(FSPermissionInfo const*, bool)
PUBLIC 6adfe 0 THFSPlusRef::AddClippingData(__CFDictionary const*)
PUBLIC 6af08 0 THFSPlusRef::CreateClipping(FSRef const&, HFSUniStr255 const&, NodeNameSyntaxHint const&, long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), unsigned long, __CFDictionary const*)
PUBLIC 6afa2 0 THFSPlusRef::CopyClippingDataFromFile(__CFDictionary const*&)
PUBLIC 6b1b4 0 THFSPlusRef::CopyDataAsURLFromResourceFork(__CFURL const**)
PUBLIC 6b3d2 0 THFSPlusRef::AddURLData(__CFURL const*)
PUBLIC 6b7ac 0 THFSPlusRef::CreateLocation(FSRef const&, HFSUniStr255 const&, NodeNameSyntaxHint const&, long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), __CFURL const*)
PUBLIC 6b8d4 0 THFSPlusRef::FollowAliasNoNetworkIO(THFSPlusRef&, unsigned char, unsigned char, unsigned char&) const
PUBLIC 6ba9c 0 THFSPlusRef::MoveRename(THFSPlusRef const&, HFSUniStr255 const&)
PUBLIC 6bb78 0 THFSPlusRef::SetArchitecturePreference(HFSUniStr255 const&)
PUBLIC 6bc80 0 THFSPlusRef::CopyPermissionInfo(FSPermissionInfo*) const
PUBLIC 6bd9c 0 THFSPlusRef::SetPermissions(unsigned long, bool)
PUBLIC 6be66 0 THFSPlusRef::SetUserGroupID(unsigned long, bool)
PUBLIC 6bf30 0 THFSPlusRef::SetOwnerID(unsigned long, bool)
PUBLIC 6bffa 0 THFSPlusRef::GetHasScriptingTerminology() const
PUBLIC 6c0ec 0 THFSPlusRef::ResetVolumeName()
PUBLIC 6c25a 0 TMetaData::GetClassicApplication(FSRef&) const
PUBLIC 6c344 0 TMetaData::FetchHeapSizeData() const
PUBLIC 6c4ee 0 TMetaData::GetHeapSizeData(HeapSizeData&) const
PUBLIC 6c53e 0 TMetaData::SetHeapSizeData(AppHeapSizes const&)
PUBLIC 6c74e 0 TMetaData::FetchFontVersion() const
PUBLIC 6c914 0 THFSPlusRef::SetHasCustomIcon(bool, bool)
PUBLIC 6c982 0 THFSPlusRef::SetIsAlias(bool, bool)
PUBLIC 6c9f0 0 THFSPlusRef::SetIsStationery(bool, bool)
PUBLIC 6ca70 0 THFSPlusRef::ReadUnbadgedIconRef(OpaqueIconRef*&) const
PUBLIC 6cb82 0 THFSPlusRef::SetIsPackage(bool, bool)
PUBLIC 6cbdc 0 THFSPlusRef::CopyDataAsURLFromDataFork(__CFURL const**)
PUBLIC 6ce6e 0 THFSPlusRef::CopyLocationDataFromFile(__CFURL const*&)
PUBLIC 6ced6 0 THFSPlusRef::SetTypeIdentifierString(__CFString const*)
PUBLIC 6cf06 0 THFSPlusRef::SetHeapSizeData(AppHeapSizes const&)
PUBLIC 6cf36 0 THFSPlusRef::FetchHeapSizeData() const
PUBLIC 6cf60 0 THFSPlusRef::GetHeapSizeData(HeapSizeData&) const
PUBLIC 6cf94 0 TMetaData::FetchKindStringData(bool) const
PUBLIC 6d13c 0 THFSPlusRef::SetIsExtensionHidden(bool, bool)
PUBLIC 6d23e 0 THFSPlusRef::SetIsLocked(bool, bool, bool)
PUBLIC 6d40a 0 THFSPlusRef::SetIsLocked(bool, bool)
PUBLIC 6d4a6 0 THFSPlusRef::Delete(bool, bool)
PUBLIC 6d61e 0 THFSPlusRef::SetAliasInfo(AliasRecord**&, OpaqueIconRef*, bool, unsigned long, bool)
PUBLIC 6d960 0 THFSPlusRef::SetServerAlias(AliasRecord**, FSRef const&, HFSUniStr255 const*, NodeNameSyntaxHint const&, long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*))
PUBLIC 6dab2 0 THFSPlusRef::SetAlias(FSRef const&, FSRef const&, HFSUniStr255 const*, NodeNameSyntaxHint const&, long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*))
PUBLIC 6dd96 0 THFSPlusRef::DeleteDeep(bool)
PUBLIC 6df36 0 THFSPlusRef::SetMDAttributeIfAppropriate(unsigned long, TPropertyInfo const*)
PUBLIC 6e0a8 0 TMetaData::GetCopyrightString(TUString&) const
PUBLIC 6e106 0 THFSPlusRef::GetCopyrightString(TUString&) const
PUBLIC 6e136 0 THFSPlusIterator::Reset()
PUBLIC 6e1c8 0 THFSPlusIterator::NextSingleInternal()
PUBLIC 6e28a 0 THFSPlusIterator::NextSingle(THFSPlusRef&)
PUBLIC 6e372 0 THFSPlusIterator::~THFSPlusIterator()
PUBLIC 6e3d6 0 THFSPlusIterator::RecoverFromDirectoryChange(HFSUniStr255, THFSPlusRef&)
PUBLIC 6e56a 0 StOpenResourceFork::StOpenResourceFork(FSRef, signed char)
PUBLIC 6e5ba 0 StOpenResourceFork::StOpenResourceFork(FSRef, signed char)
PUBLIC 6e5d4 0 StOpenResourceFork::~StOpenResourceFork()
PUBLIC 6e5ec 0 StOpenResourceFork::GetResource(unsigned long, short) const
PUBLIC 6e62a 0 StOpenResourceFork::AddResource(unsigned long, short, char**) const
PUBLIC 6e676 0 StOpenResourceFork::RemoveExistingResource(unsigned long, short)
PUBLIC 6e6dc 0 StOpenResourceFork::ChangedResource(char**) const
PUBLIC 6e6f8 0 StOpenResourceFork::Opened() const
PUBLIC 6e70a 0 StOpenResourceForkReadOnly::StOpenResourceForkReadOnly(FSRef, bool)
PUBLIC 6e76c 0 _ParentXNotifyTrashError
PUBLIC 6e800 0 _ParentXNotifyReportOperationError
PUBLIC 6e8c8 0 _ParentXNotifySetOperationCurrentTarget
PUBLIC 6e8fa 0 _ParentXNotifyFlushRootLock
PUBLIC 6ea1c 0 _ParentXNotifyGetTargetName
PUBLIC 6ea6e 0 _ParentXNotifyGetRequestedOperation
PUBLIC 6ea8a 0 _ParentXNotifyOperationSizerUpdate
PUBLIC 6eb3e 0 _ParentXNotifyOperationSetSizerData
PUBLIC 6ec16 0 _ParentXNotifyOperationStatus
PUBLIC 6ed24 0 _ParentXNotifyGetRootLock
PUBLIC 6edfc 0 _ParentXNotifyFlushLock
PUBLIC 6eef2 0 THFSPlusSizer::THFSPlusSizer(FSRef const&, TCountedPtr<TNodeTask> const&, TFolderSizeTask*)
PUBLIC 6efd2 0 THFSPlusSizer::THFSPlusSizer(FSRef const&, TCountedPtr<TNodeTask> const&, TFolderSizeTask*)
PUBLIC 6efdc 0 THFSPlusSizer::~THFSPlusSizer()
PUBLIC 6f006 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*>::allocator<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >(std::allocator<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > > const&)
PUBLIC 6f05e 0 void std::__fill<true>::fill<__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> > >, __gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*>(__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> > >, __gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> > >, __gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >* const&)
PUBLIC 6f0c8 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::_Vector_impl::_Vector_impl(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> const&)
PUBLIC 6f144 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::_Vector_base(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> const&)
PUBLIC 6f14e 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::~_Vector_base()
PUBLIC 6f166 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::vector(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> const&)
PUBLIC 6f182 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::capacity() const
PUBLIC 6f1aa 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::size() const
PUBLIC 6f1d2 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::operator[](unsigned long)
PUBLIC 6f294 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::~vector()
PUBLIC 6f2ec 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::_M_fill_insert(__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> > >, unsigned long, __gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >* const&)
PUBLIC 6f576 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::reserve(unsigned long)
PUBLIC 6f74c 0 TClientQuery::TClientQuery(__CFString const*, __CFArray const*, unsigned long, __CFArray const*, long (*)(void const* const*, void const* const*, void*), NodeClientContext, long, unsigned long)
PUBLIC 6f808 0 TClientQuery::SetSortContext(NodeClientContext)
PUBLIC 6f864 0 TNodeQuery::CopyContentModificationDateForHitNode(TNodePtr const&) const
PUBLIC 6f906 0 TNodeQuery::HandleRemoveResult(TNode*, bool)
PUBLIC 6f9b8 0 TNodeQuery::HandleAddResult(TNode*, bool)
PUBLIC 6fa26 0 TNodeQuery::DidUpdateCallBack(__CFNotificationCenter*, void*, __CFString const*, void const*, __CFDictionary const*)
PUBLIC 6fc9a 0 TNodeQuery::CopyTypeIdentifierStringForHitNode(TNodePtr const&) const
PUBLIC 6fd3e 0 TNodeQuery::CopyLastUsedDateForHitNode(TNodePtr const&) const
PUBLIC 6fde0 0 QueryReleaseCallBack(void const*)
PUBLIC 6fe24 0 QueryRetainCallBack(void const*)
PUBLIC 6fe48 0 TNodeQuery::SetSortComparator(long (*)(void const* const*, void const* const*, void*), NodeClientContext)
PUBLIC 6fed6 0 TNodeQuery::TNodeQuery(TCountedPtr<TClientQuery> const&)
PUBLIC 700f8 0 TNodeQuery::HandleComparatorChanged(void*)
PUBLIC 7025a 0 std::vector<__CFString const*, std::allocator<__CFString const*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >, __CFString const* const&)
PUBLIC 703c2 0 TQueryTask::TQueryTask(TCountedPtr<TNodeQuery>)
PUBLIC 70416 0 TQueryTask::~TQueryTask()
PUBLIC 70452 0 TQueryTask::~TQueryTask()
PUBLIC 7045c 0 FSSetOperationCurrentTarget(unsigned long long, unsigned long long)
PUBLIC 70462 0 FSFlushLock(FSRef const&, OpaqueIconRef* const&)
PUBLIC 70468 0 FSGetRootLock(FSRef const&, unsigned long long&)
PUBLIC 70470 0 FSFlushRootLock(unsigned long long, FSRef const&, unsigned long long)
PUBLIC 70498 0 FSGetTargetName(unsigned long long, TFSInfo const&, HFSUniStr255&)
PUBLIC 704d0 0 FSGetRequestedOperation(unsigned long long)
PUBLIC 704da 0 FSFinalizeOperation()
PUBLIC 704e0 0 FSSetOwner()
PUBLIC 704e6 0 FSSizerCheckForCancel(unsigned long long)
PUBLIC 704ee 0 TFSCopyOperation::GetVolumeData(THFSPlusRef const&, short&, bool&)
PUBLIC 705ae 0 TFSCopyOperation::CopyPreflight(unsigned long long&, unsigned long long&, unsigned long long&)
PUBLIC 7088c 0 TFSCopyOperation::DeleteExisting(HFSUniStr255 const&)
PUBLIC 708f6 0 MoveToTrashName(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*)
PUBLIC 70a4e 0 TFSCopyOperation::GetTargetPropertyStore(THFSPlusRef&)
PUBLIC 70c1e 0 TFSCopyOperation::MoveProperties(THFSPlusExtendedPropertyIterator&, THFSPlusRef&, HFSUniStr255 const&)
PUBLIC 70c94 0 TFSCopyOperation::TFSCopyOperation(void const*, unsigned long, FSRef const*, FSRef const*, FSRef*, __CFString const*, unsigned long, void (*)(void const*, FSRef const*, long long, long long, long long, long long, unsigned long), long (*)(void const*, FSRef const*, FSRef const*, unsigned long, unsigned short const*, long, unsigned char), unsigned char (*)(void const*, FSRef const*, FSRef const*), void (*)(void const*, FSRef const*, FSRef const*, unsigned long, FSCatalogInfo const*), unsigned char (*)(void const*), unsigned char (*)(void const*, FSRef const*, HFSUniStr255 const*, unsigned long, FSCatalogInfo const*, FSRef const*, unsigned char*, FSRef*), unsigned long)
PUBLIC 70f9a 0 TFSCopyOperation::TFSCopyOperation(void const*, unsigned long, FSRef const*, FSRef const*, FSRef*, __CFString const*, unsigned long, void (*)(void const*, FSRef const*, long long, long long, long long, long long, unsigned long), long (*)(void const*, FSRef const*, FSRef const*, unsigned long, unsigned short const*, long, unsigned char), unsigned char (*)(void const*, FSRef const*, FSRef const*), void (*)(void const*, FSRef const*, FSRef const*, unsigned long, FSCatalogInfo const*), unsigned char (*)(void const*), unsigned char (*)(void const*, FSRef const*, HFSUniStr255 const*, unsigned long, FSCatalogInfo const*, FSRef const*, unsigned char*, FSRef*), unsigned long)
PUBLIC 70fa4 0 FSUpdateOperationStatus(void const*, FSRef const*, long long, long long, long long, long long, unsigned long)
PUBLIC 71036 0 FSSizerUpdate(unsigned long long, TFSInfo const&, long long, long long, long long, bool)
PUBLIC 71124 0 FSPreProcess(void const*, FSRef const*, FSRef const*)
PUBLIC 71158 0 FSPostProcess(void const*, FSRef const*, FSRef const*, unsigned long, FSCatalogInfo const*)
PUBLIC 71190 0 FSBackupPreProcess(void const*, FSRef const*, HFSUniStr255 const*, unsigned long, FSCatalogInfo const*, FSRef const*, unsigned char*, FSRef*)
PUBLIC 711e6 0 FSCancelOperationRequested(unsigned long long)
PUBLIC 71214 0 FSReportError(void const*, FSRef const*, FSRef const*, unsigned long, unsigned short const*, long, unsigned char)
PUBLIC 7126e 0 TFSCopyOperation::~TFSCopyOperation()
PUBLIC 712d6 0 TFSCopyOperation::~TFSCopyOperation()
PUBLIC 712e0 0 TFSCopyOperation::CopyToTarget()
PUBLIC 71636 0 GetHomeVRefNum()
PUBLIC 71710 0 GetVolumeLockedAndLocal(short, bool&, bool&)
PUBLIC 7185e 0 TrashForRef(FSRef const&, FSRef*)
PUBLIC 7194e 0 TFSCopyOperation::GetSourcePropertyStore(THFSPlusRef const&)
PUBLIC 71b1e 0 TFSCopyOperation::CopyExtendedProperties(THFSPlusRef const&, THFSPlusRef&, HFSUniStr255 const&)
PUBLIC 71c1e 0 TFSCopyOperation::CopyProperties(THFSPlusRef const&, THFSPlusRef&, HFSUniStr255 const&, bool)
PUBLIC 71d10 0 TFSCopyOperation::CopyCreateTarget(THFSPlusRef const&, THFSPlusRef&)
PUBLIC 7218a 0 TFSCopyOperation::DoCopy(THFSPlusRef const&)
PUBLIC 7242c 0 TFSCopyOperation::DoMove(THFSPlusRef const&)
PUBLIC 729a0 0 TFSCopyOperation::DoMoveToTrash(THFSPlusRef const&)
PUBLIC 72cc4 0 TFSCopyOperation::Run()
PUBLIC 72dd6 0 LockCreateFileUnicode(FSRef const&, HFSUniStr255 const&, NodeNameSyntaxHint const&, long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), unsigned long, FSCatalogInfo const*, FSRef*)
PUBLIC 72ef0 0 LockDeleteObject(FSRef const&)
PUBLIC 72f46 0 LockFSMoveAndRenameObject(FSRef const&, FSRef const&, unsigned long, unsigned short const*, unsigned long, FSRef*)
PUBLIC 72fb2 0 LockFSNewAlias(FSRef const&, FSRef const&, AliasRecord***)
PUBLIC 7300c 0 LockOpenFork(FSRef const&, unsigned long, unsigned short const*, signed char, short*)
PUBLIC 73076 0 LockCloseFork(short)
PUBLIC 730c4 0 LockSetObjectAccess(FSRef const&, long, long, long)
PUBLIC 73126 0 LockLSRegisterItem(FSRef const&)
PUBLIC 73178 0 LockLSUnregisterItem(FSRef const&)
PUBLIC 731c2 0 LockReadFork(short, unsigned short, long long, unsigned long, void*, unsigned long*)
PUBLIC 7324c 0 LockWriteFork(short, unsigned short, long long, unsigned long, void*, unsigned long*)
PUBLIC 732d6 0 LockCreateResFile(FSRef const&, HFSUniStr255 const&, NodeNameSyntaxHint const&, long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), unsigned long, FSCatalogInfo const*, FSRef*)
PUBLIC 73408 0 LockCFURLCopyScheme(__CFURL const*)
PUBLIC 73452 0 LockCFURLCreateWithString(__CFAllocator const*, __CFString const*, __CFURL const*)
PUBLIC 734aa 0 LockCFURLGetString(__CFURL const*)
PUBLIC 734f4 0 LockSFLMoveItemInList(OpaqueSFLRef*, unsigned long, unsigned long)
PUBLIC 7354c 0 LockSFLRemoveItemFromList(OpaqueSFLRef*, unsigned long)
PUBLIC 7359c 0 LockSFLModifyItemFlags(OpaqueSFLRef*, unsigned long, unsigned long, unsigned long)
PUBLIC 735fa 0 ClientChangeNotifierReleaseCallBack(void const*)
PUBLIC 73604 0 ClientChangeNotifierRetainCallBack(void const*)
PUBLIC 73624 0 TNotifier::TNotifier(TCountedPtr<TClientChangeNotifier> const&, TNodePtr const&, TNodePtr const&)
PUBLIC 736de 0 std::allocator<TClientChangeNotifier*>::allocator(std::allocator<TClientChangeNotifier*> const&)
PUBLIC 73706 0 TClientChangeNotifier** std::__copy_backward<true, std::random_access_iterator_tag>::copy_b<TClientChangeNotifier*>(TClientChangeNotifier* const*, TClientChangeNotifier* const*, TClientChangeNotifier**)
PUBLIC 73736 0 bool __gnu_cxx::operator!=<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > >(__gnu_cxx::__normal_iterator<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > > const&, __gnu_cxx::__normal_iterator<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > > const&)
PUBLIC 7374c 0 bool __gnu_cxx::operator==<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > >(__gnu_cxx::__normal_iterator<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > > const&, __gnu_cxx::__normal_iterator<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > > const&)
PUBLIC 73774 0 void std::_Destroy<__gnu_cxx::__normal_iterator<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > >, std::allocator<TClientChangeNotifier*> >(__gnu_cxx::__normal_iterator<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > >, __gnu_cxx::__normal_iterator<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > >, std::allocator<TClientChangeNotifier*>)
PUBLIC 7397c 0 std::_Vector_base<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> >::_Vector_impl::_Vector_impl(std::allocator<TClientChangeNotifier*> const&)
PUBLIC 739b0 0 std::allocator<TClientChangeNotifier*>::allocator()
PUBLIC 739b6 0 std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> >::erase(__gnu_cxx::__normal_iterator<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > >, __gnu_cxx::__normal_iterator<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > >)
PUBLIC 73a44 0 std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> >::size() const
PUBLIC 73a6c 0 std::_Vector_base<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> >::_Vector_base(std::allocator<TClientChangeNotifier*> const&)
PUBLIC 73a76 0 std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> >::vector(std::allocator<TClientChangeNotifier*> const&)
PUBLIC 73aa2 0 std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > >, TClientChangeNotifier* const&)
PUBLIC 73c18 0 std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> >::push_back(TClientChangeNotifier* const&)
PUBLIC 73c9c 0 TCountedPtr<TNotifier>* std::__copy_backward<false, std::random_access_iterator_tag>::copy_b<TCountedPtr<TNotifier>*, TCountedPtr<TNotifier>*>(TCountedPtr<TNotifier>*, TCountedPtr<TNotifier>*, TCountedPtr<TNotifier>*)
PUBLIC 73cd6 0 VolumeUnmount
PUBLIC 73d26 0 NodeSortedStringIteratorFirst
PUBLIC 73d30 0 NodeSortedStringIteratorNext
PUBLIC 73d3a 0 NodeSortedNumberIteratorFirst
PUBLIC 73d44 0 NodeSortedNumberIteratorNext
PUBLIC 73d4e 0 GetNodeAsFSSpec
PUBLIC 73d56 0 GetFSSpecAsNode
PUBLIC 73d5e 0 GetNodeAsPathName
PUBLIC 73e04 0 AEDescToFSSpec
PUBLIC 73e0c 0 AEDescHasChildNew
PUBLIC 73e8c 0 GetNextTypedDataForIterator(TypedDataIterator const&, TypedDataRecord&)
PUBLIC 73ee0 0 FlushCatalogs
PUBLIC 73eea 0 NodeCreateNewAliasInNew
PUBLIC 73f66 0 NodeCreateNewLocationInNew
PUBLIC 73fe2 0 NodeCreateNewFileInNew
PUBLIC 74058 0 GetNodeAsPathNameNew
PUBLIC 74062 0 NodeEventGetActiveParent
PUBLIC 7406c 0 SetChildrenPermissions
PUBLIC 74076 0 SetNodePropertyAsByte
PUBLIC 740b2 0 SetNodePropertyAsOSType
PUBLIC 740e8 0 SetNodePropertyAsPoint
PUBLIC 7411e 0 SetNodePropertyAsDateTime
PUBLIC 74160 0 SetNodePropertyAsUTCDateTime
PUBLIC 74196 0 SetNodePropertyAsRGBColor
PUBLIC 741cc 0 NewNodeSortedStringIterator
PUBLIC 74242 0 NewNodeSortedNumberIterator
PUBLIC 742b8 0 SetNodePropertyAsInt64
PUBLIC 742fa 0 GetPathNameAsNode
PUBLIC 74354 0 GetNodePropertyAsRGBColor
PUBLIC 743bc 0 GetDataAsClipping(TNode*, TypedDataIterator*)
PUBLIC 74478 0 _NodeSetVirtualQueryPlus
PUBLIC 74568 0 GetNextClippingData(TypedDataIterator*, TypedDataRecord*)
PUBLIC 746ae 0 GetFirstClippingData(TypedDataIterator*, TypedDataRecord*)
PUBLIC 74724 0 DisposeDataIterator(TypedDataIterator*)
PUBLIC 74770 0 GetNodeDataAsClipping
PUBLIC 747d2 0 NodeSetAliasTarget
PUBLIC 74862 0 _NodeSyncSync
PUBLIC 748dc 0 DeleteNode
PUBLIC 74956 0 NodeCopyMDAttribute
PUBLIC 74a00 0 NodeGetDisplayAttributes
PUBLIC 74a86 0 NodeMapUserOrGroupIDToNameNew
PUBLIC 74b4a 0 NodeMapNameToUserOrGroupIDNew
PUBLIC 74bf0 0 GetFirstTypedDataForIterator(TypedDataIterator const&, TypedDataRecord&)
PUBLIC 74c44 0 NodeCreateNewClippingInNew
PUBLIC 74dd2 0 DisposeNodeSortedStringIterator
PUBLIC 74ddc 0 DisposeNodeSortedNumberIterator
PUBLIC 74de8 0 VirtualAliasRecord::VirtualAliasRecord(AliasRecord**, HFSUniStr255 const&, HFSUniStr255 const&, OpaqueIconRef*, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool)
PUBLIC 74f76 0 VirtualAliasRecord::VirtualAliasRecord(AliasRecord**, HFSUniStr255 const&, HFSUniStr255 const&, OpaqueIconRef*, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool)
PUBLIC 74fc2 0 VirtualAliasRecord::VirtualAliasRecord(__NWNode*, __NWBrowser*, HFSUniStr255 const&, OpaqueIconRef*, bool)
PUBLIC 75066 0 VirtualAliasRecord::~VirtualAliasRecord()
PUBLIC 750e4 0 TChildrenList::UnsubscribeWithKQueue()
PUBLIC 7512e 0 TChildrenList::DecrementSubscriptionCount()
PUBLIC 7514c 0 TChildrenList::GetDefaultSearchCount()
PUBLIC 75156 0 TChildrenList::GetDefaultSearch(unsigned long, TNodePtr&)
PUBLIC 752ae 0 TChildrenList::SubscribeWithKQueue()
PUBLIC 752fa 0 TChildrenList::FindDisplayName(HFSUniStr255 const&)
PUBLIC 753c6 0 TChildrenList::SetLastResizeDuration(double)
PUBLIC 75414 0 TChildrenList::IncrementSubscriptionCount()
PUBLIC 7545a 0 TChildrenList::TChildrenList(TNode const*)
PUBLIC 754aa 0 TChildrenList::~TChildrenList()
PUBLIC 75508 0 TChildrenList::SetSearchCount(long)
PUBLIC 7557c 0 TChildrenList::SetNodeQuery(TCountedPtr<TNodeQuery> const&)
PUBLIC 755fe 0 TChildrenList::SetQuery(TCountedPtr<TClientQuery> const&)
PUBLIC 7581e 0 TPermissionsRequest::TPermissionsRequest(OpaqueOperationRef*, unsigned long, __FSFileSecurity*)
PUBLIC 7584c 0 TPermissionsRequest::AddPtrReference()
PUBLIC 75860 0 TPermissionsOperation::ConvertACLToText(__FSFileSecurity*, long&) const
PUBLIC 758ea 0 TPermissionsOperation::PerformOperation(OperationRecord*)
PUBLIC 758f2 0 TPermissionsOperation::NeedsAuthentication(OperationRecord*)
PUBLIC 758fc 0 TPermissionsOperation::TransformOperations()
PUBLIC 75904 0 TPermissionsOperation::LogOperationName(OperationRecord*) const
PUBLIC 75916 0 TPermissionsOperation::ResolveConflict(OperationRecord*)
PUBLIC 75dd0 0 TPermissionsRequest::RemovePtrReference()
PUBLIC 75e0e 0 TPermissionsOperation::TPermissionsOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 75e5a 0 TPermissionsOperation::TPermissionsOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 75e64 0 TPermissionsOperation::~TPermissionsOperation()
PUBLIC 75ea2 0 TPermissionsOperation::~TPermissionsOperation()
PUBLIC 75eac 0 TPermissionsOperation::~TPermissionsOperation()
PUBLIC 75ef2 0 TCountedPtr<TNodeEvent>::operator=(TCountedPtr<TNodeEvent> const&)
PUBLIC 75f30 0 TPermissionsOperation::GetSuboperation() const
PUBLIC 75f48 0 TPermissionsOperationTask::TPermissionsOperationTask(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 75fa4 0 TPermissionsOperationTask::TPermissionsOperationTask(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 75fae 0 TPermissionsOperationTask::~TPermissionsOperationTask()
PUBLIC 75fe6 0 TPermissionsOperationTask::~TPermissionsOperationTask()
PUBLIC 75ff0 0 TPermissionsOperationTask::~TPermissionsOperationTask()
PUBLIC 76030 0 TPermissionsOperationTask::HandlePermissionsRequest(TCountedPtr<TPermissionsRequest> const&)
PUBLIC 76072 0 TPermissionsOperationTask::TransformOperations()
PUBLIC 7607a 0 TPermissionsOperationTask::OperationTaskProcedure()
PUBLIC 761a0 0 TPermissionsOperationTask::RequestPermissionsOperation(TCountedPtr<TPermissionsRequest> const&)
PUBLIC 76214 0 TCountedPtr<TPermissionsRequest>::operator=(TCountedPtr<TPermissionsRequest> const&)
PUBLIC 76252 0 LocumParentDefs_server_routine
PUBLIC 7627a 0 _XNotifySetOperationCurrentTarget
PUBLIC 76332 0 _XNotifyGetRequestedOperation
PUBLIC 763ed 0 _XNotifyGetTargetName
PUBLIC 764cf 0 _XNotifyTrashError
PUBLIC 765ce 0 _XNotifyOperationStatus
PUBLIC 76774 0 _XNotifyGetRootLock
PUBLIC 76832 0 _XNotifyReportOperationError
PUBLIC 7697f 0 _XNotifyFlushLock
PUBLIC 76a3f 0 _XNotifyFlushRootLock
PUBLIC 76aff 0 _XNotifyOperationSizerUpdate
PUBLIC 76c5f 0 _XNotifyOperationSetSizerData
PUBLIC 76def 0 _ChildRunCopyMoveOperation
PUBLIC 76fbc 0 _ChildDeleteBackupOperation
PUBLIC 770d9 0 _ChildSecureEraseCancel
PUBLIC 77137 0 _ChildPermissionsOperation
PUBLIC 773dd 0 _ChildMove
PUBLIC 7765a 0 _ChildMoveRename
PUBLIC 778fa 0 _ChildCreateLock
PUBLIC 77b75 0 _ChildDelete
PUBLIC 77d50 0 _ChildCopyPermissions
PUBLIC 77f2b 0 _ChildRename
PUBLIC 7811d 0 _ChildLock
PUBLIC 782f8 0 TCopyQueue::TCopyQueue(OperationReporter*)
PUBLIC 783a8 0 TCopyQueue::SetCurrentTarget(unsigned long long)
PUBLIC 783da 0 TCopyQueue::ReportErrorFromUnprotectedContext(long, FSRef const&, FSRef const&, FSRef const&, unsigned long, unsigned short const*, bool)
PUBLIC 784dc 0 TCopyQueue::ShouldSkip(FSRef const&, HFSUniStr255 const&, unsigned long, FSCatalogInfo const&, FSRef const&, unsigned char&, FSRef*) const
PUBLIC 78554 0 TCopyQueue::DestinationSupportsSymlinks() const
PUBLIC 78568 0 TCopyQueue::DestinationSupportsLargeFiles() const
PUBLIC 7857c 0 TCopyQueue::DestinationSupportsPreAllocation() const
PUBLIC 78590 0 TCopyQueueItem::~TCopyQueueItem()
PUBLIC 785e8 0 TCopyQueue::~TCopyQueue()
PUBLIC 78772 0 TCopyErrorMonitor::TCopyErrorMonitor()
PUBLIC 787e4 0 TCopyItem::TCopyItem(TFSInfo const&, HFSUniStr255 const&, bool, bool, bool, bool, bool, bool, bool, bool, FSRef*)
PUBLIC 789b2 0 TCopyItem::~TCopyItem()
PUBLIC 78a62 0 TCopyItem::CheckBackupRightsFromPermset(_acl_permset*, unsigned char)
PUBLIC 78c5a 0 TCopyItem::CopySavedSecurityRefFromBackupSecurityRef(__FSFileSecurity*, bool)
PUBLIC 78e90 0 TCopyItem::SetSourceIsPackage(FSRef*)
PUBLIC 78f22 0 TCopyItem::CopySavedSecurityRefFromBackup() const
PUBLIC 78f4e 0 TCopyReader::ShouldSkip(TFSInfo const&, unsigned char&, FSRef*) const
PUBLIC 79098 0 TCopyReader::TCopyReader(TCopyQueue*, bool, bool, bool)
PUBLIC 791c0 0 TCopyReader::HandleError(long)
PUBLIC 79282 0 TCopyReader::~TCopyReader()
PUBLIC 79340 0 TCopyWriter::GetIconFileName()
PUBLIC 793d0 0 TCopyWriter::GetPropertyStoreName()
PUBLIC 79460 0 TCopyWriter::SetInterCopyDelayInSeconds(unsigned long)
PUBLIC 794e2 0 TCopyWriter::SetSuppressPropertyCopyForBackup()
PUBLIC 794f8 0 TCopyWriter::SetAppendProtectionForBackup()
PUBLIC 7950a 0 LinkObject(FSRef const*, FSRef const*, FSRef*)
PUBLIC 79604 0 TCopyWriter::ShouldExplicitlyCopyProperties()
PUBLIC 7961c 0 TCopyWriter::AddProtectionToPermSet(_acl_permset*, bool)
PUBLIC 796ca 0 TCopyWriter::CreateGuardACL(bool)
PUBLIC 797cc 0 TCopyWriter::AppendACEs(_acl*, _acl*)
PUBLIC 79842 0 TCopyWriter::CreateFileSecurityRefForBackupWithFinalDestRef(__FSFileSecurity*, unsigned char)
PUBLIC 798fc 0 TCopyWriter::SetLowPriorityForBackup()
PUBLIC 79964 0 TCopyWriter::GetCatalogInfoForSymlink(unsigned long&, FSCatalogInfo&) const
PUBLIC 79a7a 0 TCopyWriter::HandleFileSkip(unsigned long long const&)
PUBLIC 79bae 0 TCopyWriter::CopyUsingCopyFile()
PUBLIC 79d6e 0 TCopyWriter::SetVisibilityIfNeeded(FSRef const&)
PUBLIC 79e96 0 TCopyWriter::CopySymlinkFile(bool, unsigned long long)
PUBLIC 7a1e2 0 TCopyWriter::CopySymlinkFileAtRoot()
PUBLIC 7a2ec 0 std::allocator<std::pair<std::pair<unsigned int, int> const, FSRef> >::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> > >(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> > > const&)
PUBLIC 7a33a 0 TCopyItem** std::__copy_backward<true, std::random_access_iterator_tag>::copy_b<TCopyItem*>(TCopyItem* const*, TCopyItem* const*, TCopyItem**)
PUBLIC 7a444 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::operator[](unsigned long)
PUBLIC 7a468 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::swap(std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >&)
PUBLIC 7a4b8 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::size() const
PUBLIC 7a4e0 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::capacity() const
PUBLIC 7a60c 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::_Vector_impl::_Vector_impl(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> const&)
PUBLIC 7a640 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::_Vector_impl::~_Vector_impl()
PUBLIC 7a64a 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::_Vector_base(unsigned long, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> const&)
PUBLIC 7a728 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::_Vector_base(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> const&)
PUBLIC 7a732 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::vector(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> const&)
PUBLIC 7a79e 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::_M_fill_insert(__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> > >, unsigned long, __gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >* const&)
PUBLIC 7aa80 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::reserve(unsigned long)
PUBLIC 7abcc 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::~vector()
PUBLIC 7af24 0 TOperationSizer::~TOperationSizer()
PUBLIC 7afa2 0 TOperationSizer::TOperationSizer(FSRef const&, long long, bool, unsigned long long, void (*)(unsigned long long, TFSInfo const&, long long, long long, long long, bool), bool (*)(unsigned long long), long long, long long, long long, long long, long long, long long, bool, bool, unsigned char (*)(FSRef const*, FSRef const*, unsigned char, HFSUniStr255 const*, unsigned long, FSCatalogInfo const*, void*), unsigned char (*)(void*), NodeClientContext*)
PUBLIC 7b1d2 0 TOperationSizer::TOperationSizer(FSRef const&, long long, bool, unsigned long long, void (*)(unsigned long long, TFSInfo const&, long long, long long, long long, bool), bool (*)(unsigned long long), long long, long long, long long, long long, long long, long long, bool, bool, unsigned char (*)(FSRef const*, FSRef const*, unsigned char, HFSUniStr255 const*, unsigned long, FSCatalogInfo const*, void*), unsigned char (*)(void*), NodeClientContext*)
PUBLIC 7b1ee 0 TPropertyValue::TPropertyValue(RGBColor const&)
PUBLIC 7b20c 0 TPropertyValue::TPropertyValue(TPropertyReference const&)
PUBLIC 7b342 0 TPropertyValue::TPropertyValue(unsigned char)
PUBLIC 7b356 0 TPropertyValue::TPropertyValue(unsigned long const&)
PUBLIC 7b36c 0 TPropertyValue::TPropertyValue(Point const&)
PUBLIC 7b382 0 TPropertyValue::TPropertyValue(UTCDateTime const&)
PUBLIC 7b39e 0 TPropertyValue::TPropertyValue(TUString const&)
PUBLIC 7b3fe 0 TOperationTimer::TOperationTimer(char const*)
PUBLIC 7b488 0 TOperationTimer::~TOperationTimer()
PUBLIC 7b610 0 TFSInfo::TFSInfo()
PUBLIC 7b6e0 0 TFSInfo::TFSInfo(TFSInfo const&)
PUBLIC 7b814 0 TFSInfo::~TFSInfo()
PUBLIC 7b858 0 TFSInfo::IsBusyApplication(FSRef const&)
PUBLIC 7b8c8 0 TFSInfo::TranslatePOSIXError(int)
PUBLIC 7bafc 0 TFSInfo::Unlink(FSRef const*)
PUBLIC 7bb42 0 TFSInfo::StripACLForCopy(_acl*, FSRef const&, bool, bool, bool)
PUBLIC 7bd36 0 TFSInfo::CreateStrippedFileSecurityRef(__CFAllocator const*, __FSFileSecurity*, FSRef const&, bool, bool, bool)
PUBLIC 7be0a 0 TReservationRecord::~TReservationRecord()
PUBLIC 7be22 0 TReservationRecord::TReservationRecord(FSRef const&, __FSReservation*)
PUBLIC 7be4e 0 TReservationRecord::CreateAndAcquireReservationRef(FSRef const&, unsigned long, __FSReservation*&)
PUBLIC 7beec 0 TFSIterator::Reset()
PUBLIC 7bf48 0 TFSIterator::NextSingle(TFSInfo&)
PUBLIC 7c09c 0 TFSInfo::CopySecurityRefForCopy(bool, bool, bool, FSRef const*, bool) const
PUBLIC 7c1f0 0 TFSInfo::CopyFinalFileSecurityRefForCopy(bool, bool, bool, FSRef const*, bool) const
PUBLIC 7c216 0 TFSInfo::CopySourceFileSecurityRefForCopy(bool, bool, bool) const
PUBLIC 7c252 0 TFSInfo::SetIsLocked(bool)
PUBLIC 7c2ae 0 TFSInfo::Delete(bool, bool)
PUBLIC 7c352 0 TFSIterator::RecoverFromDirectoryChange(HFSUniStr255, TFSInfo&)
PUBLIC 7c44a 0 TFSInfo::IsBusyApplication() const
PUBLIC 7c478 0 TFSInfo::DeleteDeep(bool, bool)
PUBLIC 7c5d4 0 TDeepFSIterator::TDeepFSIterator(TFSInfo const&, unsigned long, bool, bool, __gnu_cxx::hash_map<std::pair<unsigned int, int>, std::pair<unsigned int, int>, TINodeHasher, std::equal_to<std::pair<unsigned int, int> >, std::allocator<std::pair<unsigned int, int> > >*, std::stack<TReservationRecord*, std::deque<TReservationRecord*, std::allocator<TReservationRecord*> > >*, bool)
PUBLIC 7c6ae 0 TDeepFSIterator::~TDeepFSIterator()
PUBLIC 7c734 0 TFSInfo::CopyPermissions()
PUBLIC 7cc6e 0 TFSInfo::GetLogicalSize() const
PUBLIC 7cc88 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::back()
PUBLIC 7ccaa 0 TFSIterator** std::__copy_backward<true, std::random_access_iterator_tag>::copy_b<TFSIterator*>(TFSIterator* const*, TFSIterator* const*, TFSIterator**)
PUBLIC 7ccda 0 TReservationRecord*** std::__copy_backward<true, std::random_access_iterator_tag>::copy_b<TReservationRecord**>(TReservationRecord** const*, TReservationRecord** const*, TReservationRecord***)
PUBLIC 7cd2c 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::swap(std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >&)
PUBLIC 7cdf2 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::_Vector_impl::~_Vector_impl()
PUBLIC 7ce70 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_reallocate_map(unsigned long, bool)
PUBLIC 7cfec 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_reserve_map_at_back(unsigned long)
PUBLIC 7d02e 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_push_back_aux(TReservationRecord* const&)
PUBLIC 7d09a 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::push_back(TReservationRecord* const&)
PUBLIC 7d0de 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_pop_back_aux()
PUBLIC 7d120 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::pop_back()
PUBLIC 7d2b0 0 Deleter::StDeleter<TFSInfo>::~StDeleter()
PUBLIC 7d2dc 0 Deleter::StDeleter<TFSIterator>::~StDeleter()
PUBLIC 7d308 0 TUString::TUString(unsigned char const*)
PUBLIC 7d332 0 TUString::TUString(unsigned char const*)
PUBLIC 7d33c 0 TUString::GetCString(char*, long) const
PUBLIC 7d368 0 TUString::GetFilenameTimeFormatter()
PUBLIC 7d3f6 0 TUString::GetCurrentUTCTime(UTCDateTime&)
PUBLIC 7d412 0 TUString::TUString(__CFString const*, bool)
PUBLIC 7d4f4 0 TUString::FormatAsDateTimeString(UTCDateTime, TUString&, __CFDateFormatter*)
PUBLIC 7d616 0 TUString::Append(unsigned short)
PUBLIC 7d6e6 0 TUString::SetLength(unsigned long)
PUBLIC 7d754 0 TUString::TrimSuffix(TUString const&)
PUBLIC 7d7ca 0 TDSMutex::TDSMutex(bool)
PUBLIC 7d828 0 TDSMutex::TDSMutex(bool)
PUBLIC 7d832 0 Page::IsLeaf()
PUBLIC 7d83a 0 Page::EntryStoreSize(PageEntry*)
PUBLIC 7d848 0 Page::LessThan(void*, void*)
PUBLIC 7d86c 0 Page::Equal(void*, void*)
PUBLIC 7d890 0 Leaf::IsLeaf()
PUBLIC 7d89a 0 Page::InsertEntry(PageEntry*)
PUBLIC 7d8da 0 Page::ReplaceObj(PageEntry*, IAOrderedStorable*)
PUBLIC 7d936 0 Page::PushEntry(PageEntry*)
PUBLIC 7d970 0 Page::PopEntry(PageEntry*)
PUBLIC 7d9b2 0 PageCache::LessThan(void*, void*)
PUBLIC 7d9ce 0 PageCache::Equal(void*, void*)
PUBLIC 7d9ea 0 PageCache::ReportStats()
PUBLIC 7da66 0 Scroll::~Scroll()
PUBLIC 7dada 0 Scroll::~Scroll()
PUBLIC 7dae4 0 BTree::ReportStats()
PUBLIC 7dbcc 0 BTree::Count()
PUBLIC 7dbd8 0 BTree::TotalSize()
PUBLIC 7dbea 0 BTree::PositionEstimate(IAOrderedStorable const*)
PUBLIC 7dc9a 0 PageCache::~PageCache()
PUBLIC 7dd02 0 PageCache::~PageCache()
PUBLIC 7dd0c 0 PageCache::~PageCache()
PUBLIC 7dd7c 0 BTree::~BTree()
PUBLIC 7de30 0 PageCache::SetFinger(void*, void**)
PUBLIC 7deaa 0 Page::~Page()
PUBLIC 7deb4 0 Page::ShiftContentsLeft(Page*, PageEntry*, Page*, PageEntry*)
PUBLIC 7df7c 0 Scroll::Initialize(Page*, PageEntry*, Page*)
PUBLIC 7e102 0 BTree::BestTwoPagination()
PUBLIC 7e1f8 0 PageCache::AddMru(PageCacheEntry*)
PUBLIC 7e2ba 0 Page::RemoveEntryAtFinger(void**)
PUBLIC 7e354 0 Page::RemoveEntry(PageEntry*)
PUBLIC 7e38e 0 Page::EntryStore(PageEntry*, IAOutputBlock*)
PUBLIC 7e3c8 0 PageCache::MaybeWritePage(PageCacheEntry*)
PUBLIC 7e44e 0 PageCache::Purge()
PUBLIC 7e4fa 0 BTree::Purge()
PUBLIC 7e528 0 PageCache::WriteDirtyPages()
PUBLIC 7e560 0 PageCache::PurgeEntry(PageCacheEntry*)
PUBLIC 7e604 0 PageCache::PurgeLru(unsigned long)
PUBLIC 7e652 0 Page::EntryRestore(PageEntry*, IAOrderedStorable*, IAInputBlock*)
PUBLIC 7e6a6 0 Page::ShiftContentsRight(Page*, PageEntry*, Page*, PageEntry*)
PUBLIC 7e7ae 0 BTree::PaginateTwo(Page*, PageEntry*, Page*, Page*, unsigned long)
PUBLIC 7e82a 0 PageCache::Put(Page*, unsigned long, bool)
PUBLIC 7e898 0 PageCache::Get(unsigned long, unsigned long, bool)
PUBLIC 7e9ca 0 BTreeIterator::GetLockedPage(unsigned long, unsigned long)
PUBLIC 7ea52 0 BTree::DestroySubPage(unsigned long, unsigned long)
PUBLIC 7eaba 0 BTree::DestroyNonLeaf(Page*, unsigned long)
PUBLIC 7eb32 0 BTree::Destroy()
PUBLIC 7eb92 0 PageCache::Unlock(unsigned long, unsigned long, bool)
PUBLIC 7eca8 0 BTreeIterator::UnlockPage(unsigned long, unsigned long)
PUBLIC 7ed40 0 BTreeIterator::PushTo(Page*, IAOrderedStorable const*)
PUBLIC 7ee46 0 BTreeIterator::BTreeIterator(BTree*, IAOrderedStorable const*)
PUBLIC 7eea2 0 BTreeIterator::~BTreeIterator()
PUBLIC 7ef46 0 PageCache::Remove(unsigned long)
PUBLIC 7f01a 0 PageCache::Delete(unsigned long)
PUBLIC 7f046 0 BTree::MakeIterator(IAOrderedStorable const*)
PUBLIC 7f094 0 BTree::ShrinkTree()
PUBLIC 7f136 0 BTree::MergeTwo(Page*, PageEntry*, Page*, Page*, unsigned long)
PUBLIC 7f1e2 0 BTree::RebalanceTwo(Page*, PageEntry*, Page*, Page*, unsigned long)
PUBLIC 7f28e 0 BTree::SplitOne(Page*, Page*, unsigned long)
PUBLIC 7f338 0 BTree::GrowTree()
PUBLIC 7f446 0 BTree::Get(IAOrderedStorable const*)
PUBLIC 7f4f6 0 BTree::RebalanceNonRoot(Page*, Page*, PageEntry*, unsigned long)
PUBLIC 7f680 0 BTree::ReplaceWithPrevObj(Page*, PageEntry*, Page*, Page*, PageEntry*, unsigned long)
PUBLIC 7f76c 0 BTree::RemoveInternal(Page*, Page*, PageEntry*, IAOrderedStorable const*, unsigned long)
PUBLIC 7f926 0 BTree::Remove(IAOrderedStorable const*)
PUBLIC 7f966 0 PageCacheEntry::~PageCacheEntry()
PUBLIC 7f9be 0 PageCacheEntry::~PageCacheEntry()
PUBLIC 7f9c8 0 PageCacheEntry::~PageCacheEntry()
PUBLIC 7fa28 0 PageCache::PageCache(IAStorage*, IAStoreStream*, IAOrderedStorable*, unsigned long, unsigned long)
PUBLIC 7fa98 0 IteratorFrame::~IteratorFrame()
PUBLIC 7faf0 0 IteratorFrame::~IteratorFrame()
PUBLIC 7fafa 0 IAOrderedStorableIterator::~IAOrderedStorableIterator()
PUBLIC 7fb32 0 IAOrderedStorableIterator::~IAOrderedStorableIterator()
PUBLIC 7fb52 0 IAOrderedStorableIterator::~IAOrderedStorableIterator()
PUBLIC 7fb5c 0 Leaf::~Leaf()
PUBLIC 7fb7a 0 PageCacheEntry::PageCacheEntry(Page*, unsigned long)
PUBLIC 7fbc8 0 PageCacheEntry::PageCacheEntry(unsigned long)
PUBLIC 7fbfa 0 BuddyStorage::CopyBytes(unsigned long, unsigned long, unsigned long)
PUBLIC 7fcce 0 BuddyStorage::OldFreeSpace()
PUBLIC 7fd5a 0 BuddyStorage::newFreeSpace()
PUBLIC 7fde6 0 BuddyStorage::PrintFreeList()
PUBLIC 7fe86 0 BuddyStorage::~BuddyStorage()
PUBLIC 7ff38 0 BuddyStorage::~BuddyStorage()
PUBLIC 7ff42 0 BuddyStorage::TotalSpace()
PUBLIC 7ff56 0 BuddyStorage::Deallocate(unsigned long)
PUBLIC 8003c 0 BuddyStorage::TOC_Remove(char const*)
PUBLIC 800aa 0 BuddyStorage::FreeSpace()
PUBLIC 80124 0 BuddyStorage::CompactInternal(unsigned long)
PUBLIC 80348 0 BuddyStorage::Compact()
PUBLIC 8040c 0 AddressIdMap::AddressIdMap()
PUBLIC 80444 0 AddressIdMap::LessThan(void*, void*)
PUBLIC 8045a 0 AddressIdMap::Equal(void*, void*)
PUBLIC 80470 0 StringUInt32Map::~StringUInt32Map()
PUBLIC 80490 0 StringUInt32Map::~StringUInt32Map()
PUBLIC 8049a 0 AddressIdMap::~AddressIdMap()
PUBLIC 804ba 0 AddressIdMap::~AddressIdMap()
PUBLIC 804c4 0 AddressIdMap::~AddressIdMap()
PUBLIC 804fc 0 IAStorable::DeepCopying(IAStorable const*)
PUBLIC 80502 0 IAStorable::Restoring(IAInputBlock*, IAStorable const*)
PUBLIC 80508 0 IAOrderedStorableSet::ReportStats()
PUBLIC 8050e 0 IAOrderedStorableSet::~IAOrderedStorableSet()
PUBLIC 80542 0 IAOrderedStorableSet::~IAOrderedStorableSet()
PUBLIC 80560 0 IAOrderedStorableSet::~IAOrderedStorableSet()
PUBLIC 8056a 0 IAStorable::~IAStorable()
PUBLIC 8059e 0 IAStorable::~IAStorable()
PUBLIC 805a8 0 IAStorage::PrintFreeList()
PUBLIC 805ae 0 IAOutputBlock::IAOutputBlock(IAStorage*, unsigned long, unsigned long, IAStoreStream*)
PUBLIC 80614 0 IAInputBlock::IAInputBlock(IAStorage*, unsigned long, IAStoreStream*)
PUBLIC 80674 0 IAStorage::~IAStorage()
PUBLIC 806d2 0 IAStorage::~IAStorage()
PUBLIC 806dc 0 IAStoreStream::~IAStoreStream()
PUBLIC 8073e 0 IAStoreStream::~IAStoreStream()
PUBLIC 80748 0 IAStoreStream::ReadUInt64()
PUBLIC 8091c 0 IAStoreStream::WriteUInt64(unsigned long long)
PUBLIC 80a7c 0 IAException::~IAException()
PUBLIC 80a92 0 IADeleteOnUnwind::~IADeleteOnUnwind()
PUBLIC 80aac 0 IADeleteArrayOnUnwind::IADeleteArrayOnUnwind(void*)
PUBLIC 80aba 0 IADeleteArrayOnUnwind::~IADeleteArrayOnUnwind()
PUBLIC 80acc 0 IADeletePointerArrayOnUnwind::~IADeletePointerArrayOnUnwind()
PUBLIC 80b10 0 IAException::SetLocation(char const*)
PUBLIC 80b38 0 IAException::IAException(char const*)
PUBLIC 80b8c 0 IAException::IAException(char const*)
PUBLIC 80b96 0 IAException::~IAException()
PUBLIC 80bb4 0 IAException::what() const
PUBLIC 80bc0 0 IAException::What() const
PUBLIC 80bcc 0 IAException::GetLocation() const
PUBLIC 80bda 0 IAException::GetCode() const
PUBLIC 80be8 0 IAThrowException(IAException)
PUBLIC 80c34 0 IAStruct::~IAStruct()
PUBLIC 80c4a 0 _IAAssertionFunc(char const*, int, char const*, char const*, long)
PUBLIC 80cf2 0 IAException::IAException(IAException const&)
PUBLIC 80de4 0 SkipList::FingerEnd(void**)
PUBLIC 80e38 0 SkipList::LastNode()
PUBLIC 80e68 0 SkipList::PreviousNode(void*)
PUBLIC 80eee 0 SkipList::~SkipList()
PUBLIC 80f62 0 SkipList::~SkipList()
PUBLIC 80f6c 0 UInt32Set::LessThan(void*, void*)
PUBLIC 80f82 0 StringSet::~StringSet()
PUBLIC 80f8c 0 StringUInt32Map::Remove(char const*)
PUBLIC 80fb4 0 UInt32Set::~UInt32Set()
PUBLIC 80fd2 0 UInt32Set::~UInt32Set()
PUBLIC 80fdc 0 TFSCatalogInfo::ClearInvisibleBit()
PUBLIC 80fea 0 DumpWhichInfo
PUBLIC 812f4 0 FSPermissions::~FSPermissions()
PUBLIC 81310 0 TFSCatalogInfo::~TFSCatalogInfo()
PUBLIC 8132c 0 TPropertyInfo::Equal(IAOrderedStorable const*) const
PUBLIC 8138c 0 TPropertyStream::GetEOF()
PUBLIC 81398 0 TPropertyStream::SetEOF(unsigned long)
PUBLIC 8139e 0 TPropertyStream::Clone()
PUBLIC 813e6 0 TPropertyStream::WriteZeroes(long)
PUBLIC 8146c 0 TPropertyInfo::~TPropertyInfo()
PUBLIC 814cc 0 TPropertyInfo::TPropertyInfo(TPropertyInfo const&)
PUBLIC 8155c 0 TPropertyInfo::TPropertyInfo(HFSUniStr255 const&, unsigned long, TPropertyReference const&)
PUBLIC 81612 0 TPropertyInfo::TPropertyInfo(HFSUniStr255 const&, unsigned long)
PUBLIC 81688 0 TPropertyInfo::TPropertyInfo()
PUBLIC 81704 0 TPropertyStream::~TPropertyStream()
PUBLIC 81740 0 TPropertyInfoList::TPropertyInfoList()
PUBLIC 8177e 0 TPropertyInfoList::~TPropertyInfoList()
PUBLIC 81808 0 IAObject::~IAObject()
PUBLIC 81840 0 IAObject::~IAObject()
PUBLIC 81860 0 IAObject::~IAObject()
PUBLIC 8186a 0 IAStorable::~IAStorable()
PUBLIC 8188a 0 IAOrderedStorable::~IAOrderedStorable()
PUBLIC 818c2 0 IAOrderedStorable::~IAOrderedStorable()
PUBLIC 818e2 0 IAOrderedStorable::~IAOrderedStorable()
PUBLIC 818ec 0 FSCopyFormatNameForFSType
PUBLIC 82013 0 _FSCopyLocalizedNameForVolumeFormatAtURL
PUBLIC 837b0 0 kMinimumTickleDelta
PUBLIC 837b8 0 kMaximumTickleDelta
PUBLIC 837c0 0 kBasicBufferSize
PUBLIC 83850 0 kUTCBusyCreationDate
PUBLIC 83858 0 TPathName::kPOSIXPathNameSeparator
PUBLIC 838d0 0 kUTCBusyCreationDate
PUBLIC 83960 0 kUTCBusyCreationDate
PUBLIC 83ab0 0 TUString::FormatAsDateTimeString(UTCDateTime, TUString&, __CFDateFormatter*)::emptyDateTime
PUBLIC 83ab8 0 IACloneOSSetStoreStreams
PUBLIC 83aba 0 kUTCBusyCreationDate
PUBLIC 83b88 0 kMinimalRemoteIOChunkSize
PUBLIC 83b8c 0 kLocalIOChunkSize
PUBLIC 8b000 0 dyld__mach_header
PUBLIC 8b004 0 TNode::gMainRunloop
PUBLIC 8b008 0 TNode::gKQueue
PUBLIC 8b00c 0 TOperation::LogOperationName(OperationRecord*) const::name
PUBLIC 8b010 0 TTrashOperation::LogOperationName(OperationRecord*) const::name
PUBLIC 8b014 0 TCopyMoveOperation::LogOperationName(OperationRecord*) const::move
PUBLIC 8b018 0 TCopyMoveOperation::LogOperationName(OperationRecord*) const::forcemove
PUBLIC 8b01c 0 TCopyMoveOperation::LogOperationName(OperationRecord*) const::copy
PUBLIC 8b020 0 TCopyMoveOperation::LogOperationName(OperationRecord*) const::moveinsameparent
PUBLIC 8b024 0 TCopyMoveOperation::LogOperationName(OperationRecord*) const::generic
PUBLIC 8b028 0 TDeleteImmediatelyOperation::LogOperationName(OperationRecord*) const::name
PUBLIC 8b02c 0 TCopyPermissionsOperation::LogOperationName(OperationRecord*) const::name
PUBLIC 8b030 0 TDeleteBackupSnapShotOperation::LogOperationName(OperationRecord*) const::name
PUBLIC 8b034 0 TFSCopyOperation::gCopyExactPermissions
PUBLIC 8b038 0 TFSCopyOperation::DoCopy(THFSPlusRef const&)::copy
PUBLIC 8b03c 0 TFSCopyOperation::DoMove(THFSPlusRef const&)::move
PUBLIC 8b040 0 TFSCopyOperation::DoMoveToTrash(THFSPlusRef const&)::move
PUBLIC 8b044 0 TPermissionsOperation::LogOperationName(OperationRecord*) const::name
PUBLIC 8b4c0 0 kNodeAttributesArrayKey
PUBLIC 8b4c4 0 kNodeQueryFXScopeArrayKey
PUBLIC 8b4c8 0 kNodeQueryCriteriaDictKey
PUBLIC 8b4cc 0 kNodeQueryScopeArrayKey
PUBLIC 8b4d0 0 kNodeQueryStringKey
PUBLIC 8b4d4 0 kNodeQueryVersionStringKey
PUBLIC 8b9c0 0 _ParentXLocumParentDefs_subsystem
PUBLIC 8dd10 0 THFSPlusCatalog::gNoNetworkPropertyStores
PUBLIC 8dd11 0 THFSPlusCatalog::gPreferencesInitialized
PUBLIC 8dd14 0 THFSPlusCatalog::gMountedODSDisks
PUBLIC 8dd18 0 THFSPlusCatalog::gLastSavedID
PUBLIC 8dd20 0 THFSPlusCatalog::gLastSavedStore
PUBLIC 8dd24 0 TPropertyMonitor::gPropertyLock
PUBLIC 8dd28 0 TNode::gNWODSNodeMap
PUBLIC 8dd2c 0 TNode::gNWSidebarNodeMap
PUBLIC 8dd30 0 TNode::gNWNearbyNodeMap
PUBLIC 8dd34 0 TNode::fNetworkResolveTask
PUBLIC 8dd38 0 TNode::gKQueueRegistrationCount
PUBLIC 8dd3c 0 TNode::gHomeIsOnReadOnlyVolume
PUBLIC 8dd3e 0 TNode::gBootRefNum
PUBLIC 8dd40 0 TNode::gHomeVRefNum
PUBLIC 8dd42 0 TNode::gIsDiskMounted
PUBLIC 8dd44 0 TNode::gMemberName
PUBLIC 8dd48 0 TNode::gVolumesListRef
PUBLIC 8dd4c 0 TNode::gSavedSearchesListRef
PUBLIC 8dd50 0 TNode::gFavoritesListRef
PUBLIC 8dd54 0 TNode::gTrashNode
PUBLIC 8dd58 0 TNode::gSharedFoldersListRef
PUBLIC 8dd5c 0 TNode::gSlashVolumesNode
PUBLIC 8dd60 0 TNode::gSharedFoldersNode
PUBLIC 8dd64 0 TNode::gNetworkODSRootNode
PUBLIC 8dd68 0 TNode::gNetworkODSBrowserRef
PUBLIC 8dd6c 0 TNode::gNetworkODSNode
PUBLIC 8dd70 0 TNode::gNetworkSidebarRootNode
PUBLIC 8dd74 0 TNode::gNetworkSidebarBrowserRef
PUBLIC 8dd78 0 TNode::gNetworkSidebarNode
PUBLIC 8dd7c 0 TNode::gNetworkNearbyRootNode
PUBLIC 8dd80 0 TNode::gNetworkNearbyBrowserRef
PUBLIC 8dd84 0 TNode::gNetworkNearbyNode
PUBLIC 8dd88 0 TNode::giDiskNode
PUBLIC 8dd8c 0 TNode::gDesktopNode
PUBLIC 8dd90 0 TNode::gDownloadsNode
PUBLIC 8dd94 0 TNode::gPicturesNode
PUBLIC 8dd98 0 TNode::gMusicNode
PUBLIC 8dd9c 0 TNode::gMoviesNode
PUBLIC 8dda0 0 TNode::gDocumentsNode
PUBLIC 8dda4 0 TNode::gApplicationsNode
PUBLIC 8dda8 0 TNode::gSavedSearchesNode
PUBLIC 8ddac 0 TNode::gFavoritesNode
PUBLIC 8ddb0 0 TNode::gVolumesNode
PUBLIC 8ddb4 0 TNode::gHomeNode
PUBLIC 8ddb8 0 TNode::gRootNode
PUBLIC 8ddbc 0 TNode::gBootNode
PUBLIC 8ddc0 0 TiDiskMonitor::giDiskLock
PUBLIC 8ddc4 0 TNode::gPropertyRecordsArray
PUBLIC 8ddc8 0 TNode::gParentKeyName
PUBLIC 8ddcc 0 TNode::gFlags
PUBLIC 8ddd0 0 TNode::kCustomVolumeIconFileName
PUBLIC 8ddd4 0 TNode::kCustomIconFileName
PUBLIC 8ddd8 0 gPropertyStoreCalled
PUBLIC 8ddd9 0 gLocksInitialized
PUBLIC 8dddc 0 gRootPort
PUBLIC 8dde0 0 gInitialized
PUBLIC 8dde4 0 TMountPointList::gAllowRootStoreCreation
PUBLIC 8dde8 0 TNodeEvent::gInternalClientChangeNotifier
PUBLIC 8ddec 0 TNodeEvent::gInternalNotifier
PUBLIC 8ddf0 0 TNodeEvent::ginternalQueueCreated
PUBLIC 8ddf4 0 TNodeEvent::gInternalTickleProc
PUBLIC 8ddf8 0 TNodeEvent::gInternalEventQueue
PUBLIC 8ddfc 0 TTaskMonitor::gTaskLock
PUBLIC 8de00 0 TFSEventsNotificationTask::gFSEventsDisabled
PUBLIC 8de04 0 TFSEventsNotificationTask::gFSEventsLock
PUBLIC 8de08 0 TNodeSyncTask::gQueue
PUBLIC 8de0c 0 TNodeSyncTask::gSyncTask
PUBLIC 8de10 0 TNodeSyncTask::gSyncsAreCancelled
PUBLIC 8de11 0 TNodeSyncTask::gRequestSyncsCancelled
PUBLIC 8de12 0 TNodeSyncTask::gFlags
PUBLIC 8de14 0 TNodeOperationTask::gOperationCount
PUBLIC 8de18 0 TNodeOperationTask::sOperations
PUBLIC 8de20 0 TNodeTask::gTaskList
PUBLIC 8de28 0 TNodeRequest::gLatestRequestID
PUBLIC 8de30 0 THFSPlusRef::gUID
PUBLIC 8de34 0 THFSPlusRef::gIDsInited
PUBLIC 8de36 0 THFSPlusRef::gLength
PUBLIC 8de38 0 THFSPlusRef::gBootRefNum
PUBLIC 8de3c 0 TMetaData::gFontSuffix
PUBLIC 8de40 0 THFSPlusRef::kSavedSearchExtension
PUBLIC 8de44 0 THFSPlusRef::kBurnFolderExtension
PUBLIC 8de48 0 THFSPlusRef::kFrameworkExtension
PUBLIC 8de4c 0 THFSPlusRef::kInternetLocationExtension
PUBLIC 8de50 0 THFSPlusRef::kVNCInternetLocationExtension
PUBLIC 8de54 0 THFSPlusRef::kATInternetLocationExtension
PUBLIC 8de58 0 THFSPlusRef::kAFPInternetLocationExtension
PUBLIC 8de5c 0 THFSPlusRef::kNNTPInternetLocationExtension
PUBLIC 8de60 0 THFSPlusRef::kMailInternetLocationExtension
PUBLIC 8de64 0 THFSPlusRef::kFileInternetLocationExtension
PUBLIC 8de68 0 THFSPlusRef::kFTPInternetLocationExtension
PUBLIC 8de6c 0 THFSPlusRef::kHTTPInternetLocationExtension
PUBLIC 8de70 0 THFSPlusRef::kSoundClippingExtension
PUBLIC 8de74 0 THFSPlusRef::kTextClippingExtension
PUBLIC 8de78 0 THFSPlusRef::kPictureClippingExtension
PUBLIC 8de7c 0 THFSPlusRef::kClippingExtension
PUBLIC 8de80 0 THFSPlusRef::kURLKey
PUBLIC 8de84 0 TNodeMonitor::gNodeLock
PUBLIC 8de88 0 TFSCopyOperation::gTargetParentStore
PUBLIC 8de8c 0 TFSCopyOperation::gSourceParentStore
PUBLIC 8de90 0 TNotifier::gTickleLock
PUBLIC 8de94 0 TClientChangeNotifier::gClientNotifierList
PUBLIC 8de98 0 TChildrenList::gIteratorLock
PUBLIC 8de9c 0 TChildrenList::gFlags
PUBLIC 8dea0 0 TCopyQueue::gUsedBigBuffer
PUBLIC 8dea4 0 TCopyErrorMonitor::gCopyErrorLock
PUBLIC 8dea8 0 TCopyWriter::gInterCopyDelay
PUBLIC 8deac 0 TCopyWriter::gPropertyStoreName
PUBLIC 8deb0 0 TCopyWriter::gIconFileName
PUBLIC 8deb4 0 TCopyWriter::gCopyToBackup
PUBLIC 8deb8 0 gDiagnosticLoggingFlags
PUBLIC 8dec0 0 gDiagnosticsInitialized
PUBLIC 8dec4 0 TFSInfo::gFlags
PUBLIC 8dec8 0 TFSInfo::gResourceForkName
PUBLIC 8decc 0 TFSInfo::gDataForkName
PUBLIC 8ded0 0 TPropertyInfo::gPropertyStoreName
PUBLIC 8dee0 0 THFSPlusCatalog::GetVolumeFormatString() const::format
PUBLIC 8dee4 0 TNode::GetVolumeFormatString(TPropertyReference&) const::unknownFormat
PUBLIC 8dee8 0 TNode::DoExternalRegistration(TCountedPtr<TNotifier> const&)::gFNSubscriptionUPP
PUBLIC 8deec 0 TNode::AsFullPOSIXPath(unsigned long, unsigned long&, unsigned short*&) const::bootVRefNum
PUBLIC 8def0 0 TNode::GetSavedSearchNode(TUString const&)::finderBundle
PUBLIC 8def4 0 TNode::HandleChange(char*)::dev
PUBLIC 8def8 0 TNodeEvent::GetInternalClientNotifier()::internalNotifierLock
PUBLIC 8defc 0 TNodeTask::GetTaskList()::internalNotifierLock
PUBLIC 8df00 0 THFSPlusRef::GetURLType(TUString)::kvncUrlString
PUBLIC 8df04 0 THFSPlusRef::GetURLType(TUString)::katUrlString
PUBLIC 8df08 0 THFSPlusRef::GetURLType(TUString)::kafpUrlString
PUBLIC 8df0c 0 THFSPlusRef::GetURLType(TUString)::knewsUrlString
PUBLIC 8df10 0 THFSPlusRef::GetURLType(TUString)::kmailtoUrlString
PUBLIC 8df14 0 THFSPlusRef::GetURLType(TUString)::kfiletoUrlString
PUBLIC 8df18 0 THFSPlusRef::GetURLType(TUString)::kftpUrlString
PUBLIC 8df1c 0 THFSPlusRef::GetURLType(TUString)::khttpsUrlString
PUBLIC 8df20 0 THFSPlusRef::GetURLType(TUString)::khttpUrlString
PUBLIC 8df24 0 THFSPlusRef::GetArchitecturesSupported(unsigned long&, bool) const::generation
PUBLIC 8df28 0 THFSPlusRef::GetArchitecturePreference(HFSUniStr255&, bool) const::generation
PUBLIC 8df2c 0 THFSPlusSizer::Sizing(TFSInfo const&)::lastID
PUBLIC 8df40 0 gLastVolumeLocal
PUBLIC 8df41 0 gLastVolumeLocked
PUBLIC 8df42 0 gLastVRefNum
PUBLIC 8df44 0 gHomeVRefNum
PUBLIC 8df46 0 TFSCopyOperation::GetTargetPropertyStore(THFSPlusRef&)::inited
PUBLIC 8df60 0 TFSCopyOperation::GetTargetPropertyStore(THFSPlusRef&)::oldTargetParentRef
PUBLIC 8dfb0 0 TFSCopyOperation::GetSourcePropertyStore(THFSPlusRef const&)::inited
PUBLIC 8dfc0 0 TFSCopyOperation::GetSourcePropertyStore(THFSPlusRef const&)::oldSourceParentRef
PUBLIC 8e010 0 TNotifier::GetTickleLock()::internalNotifierLock
PUBLIC 8e014 0 TClientChangeNotifier::GetClientNotifierList()::internalNotifierLock
PUBLIC 8e018 0 TCopyQueue::GetCopyBufferSize()::machineBufferSize
PUBLIC 8e020 0 TCopyItem::CopySavedSecurityRefFromBackupSecurityRef(__FSFileSecurity*, bool)::everybodyUUIDValid
PUBLIC 8e021 0 TCopyItem::CopySavedSecurityRefFromBackupSecurityRef(__FSFileSecurity*, bool)::everybodyUUID
PUBLIC 8e031 0 TCopyWriter::SetInterCopyDelayInSeconds(unsigned long)::isMirrorAgent
PUBLIC 8e032 0 TCopyWriter::SetInterCopyDelayInSeconds(unsigned long)::checkedFirstTime
PUBLIC 8e033 0 TCopyWriter::CreateGuardACL(bool)::everybodyUUIDValid
PUBLIC 8e034 0 TCopyWriter::CreateGuardACL(bool)::everybodyUUID
PUBLIC 8e044 0 TFSInfo::GetName() const::length
PUBLIC 8e046 0 TFSInfo::StripACLForCopy(_acl*, FSRef const&, bool, bool, bool)::everybodyUUIDValid
PUBLIC 8e047 0 TFSInfo::StripACLForCopy(_acl*, FSRef const&, bool, bool, bool)::everybodyUUID
PUBLIC 8e05a 0 TFSInfo::GetDisplayName() const::length
PUBLIC 8e05c 0 TFSInfo::IsTrash() const::trashesName
PUBLIC 8e060 0 TFSInfo::IsTrash() const::trashName
PUBLIC 8e064 0 TUString::GetFilenameTimeFormatter()::filenameDateFormatter
PUBLIC 8e068 0 TUString::GetFilenameTimeFormatter()::flags
PUBLIC 8e06c 0 ConvertUniCharsToDecomposed(unsigned long, unsigned short*, unsigned long, unsigned long*, unsigned short*)::textinfo
PUBLIC 8e070 0 __FSLocalizedNameTable
PUBLIC 8e074 0 __FSLocalizedNameTableLock
PUBLIC 8e078 0 unknownTypeString.19076
PUBLIC 8e07c 0 searchPaths.19040
