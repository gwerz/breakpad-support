MODULE mac x86 D9C18268699BA99610354EA3695F40740 DesktopServicesPriv
PUBLIC 1600 0 _NodeSetInstantOffCallback
PUBLIC 1614 0 _NodeContextOpenExtended
PUBLIC 162f 0 NodeContextOpen
PUBLIC 1896 0 InitializeLocks()
PUBLIC 18e8 0 TNodeMonitor::InitializeLock()
PUBLIC 194a 0 TDSMutex::TDSMutex(bool)
PUBLIC 1954 0 TDSMutex::TDSMutex(bool)
PUBLIC 19fa 0 TTaskMonitor::InitializeLock()
PUBLIC 1a5c 0 TPropertyMonitor::InitializeLock()
PUBLIC 1abe 0 TCopyErrorMonitor::InitializeLock()
PUBLIC 1b22 0 TiDiskMonitor::InitializeLock()
PUBLIC 1b84 0 TNotifier::GetTickleLock()
PUBLIC 1c14 0 TNotifier::GetRegistrationLock()
PUBLIC 1ca4 0 TFSVolumeInfo::InitializeVolumeMaps()
PUBLIC 1dc4 0 std::tr1::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const
PUBLIC 1e84 0 unsigned long const* std::lower_bound<unsigned long const*, unsigned long>(unsigned long const*, unsigned long const*, unsigned long const&)
PUBLIC 1ee2 0 TDSMutex::Acquire()
PUBLIC 1f1c 0 InitializeDebugFlags()
PUBLIC 1f68 0 TSystemNotificationTask::Run()
PUBLIC 2026 0 TSystemNotificationTask::SystemNotificationTaskProc(void*)
PUBLIC 2470 0 TNode::GetSystemNotificationRunLoop(bool)
PUBLIC 24b2 0 TNode::SystemNotificationRunLoop(__CFRunLoop*)
PUBLIC 2507 0 RegisterForComputerNameChanges()
PUBLIC 2646 0 RegisterForIDiskChanges()
PUBLIC 27c0 0 TNode::GetSuperRootNode()
PUBLIC 2ae4 0 TUString::TUString(__CFString const*, bool)
PUBLIC 2aee 0 TUString::TUString(__CFString const*, bool)
PUBLIC 2bbe 0 TFSCatalogInfo::TFSCatalogInfo()
PUBLIC 2be2 0 TFSCatalogInfo::SetIsContainer()
PUBLIC 2bee 0 TFSCatalogInfo::SetUserAccess(unsigned long)
PUBLIC 2bfe 0 TFSInfo::TFSInfo()
PUBLIC 2c08 0 TFSInfo::TFSInfo()
PUBLIC 2cc4 0 TFSInfo::AddPtrReference()
PUBLIC 2cda 0 TFSInfo::Initialize(unsigned long, TUString const&, OpaqueIconRef*, TFSCatalogInfo const&, unsigned long, unsigned long)
PUBLIC 2de0 0 TFSInfo::operator=(TFSInfo const&)
PUBLIC 3376 0 TCountedPtr<TFileListItem>::operator=(TCountedPtr<TFileListItem> const&)
PUBLIC 33ba 0 TCountedPtr<TNWNode>::operator=(TCountedPtr<TNWNode> const&)
PUBLIC 33fe 0 TCountedPtr<TMDItemRecord>::operator=(TCountedPtr<TMDItemRecord> const&)
PUBLIC 3442 0 TFSCatalogInfo::operator=(TFSCatalogInfo const&)
PUBLIC 349e 0 TCountedPtr<TFolderSizeRecord>::operator=(TCountedPtr<TFolderSizeRecord> const&)
PUBLIC 34e2 0 TCountedPtr<TVersionData>::operator=(TCountedPtr<TVersionData> const&)
PUBLIC 3526 0 TCountedPtr<TKindData>::operator=(TCountedPtr<TKindData> const&)
PUBLIC 356c 0 TFSInfo::~TFSInfo()
PUBLIC 36ee 0 TFSCatalogInfo::~TFSCatalogInfo()
PUBLIC 3718 0 TUString::TUString(TUString const&)
PUBLIC 3742 0 TFSInfo::SetIconRef(OpaqueIconRef* const&)
PUBLIC 37b6 0 TNodePtr::TNodePtr(TNode*)
PUBLIC 37da 0 TNode::CreateNode(TNodePtr const&, TCountedPtr<TFSInfo> const&)
PUBLIC 3828 0 TNode::TNode(TNodePtr const&, TCountedPtr<TFSInfo> const&)
PUBLIC 3832 0 TNode::TNode(TNodePtr const&, TCountedPtr<TFSInfo> const&)
PUBLIC 38fe 0 TNode::SetupIsa()
PUBLIC 3938 0 TCountedPtr<TFSInfo>::operator=(TCountedPtr<TFSInfo> const&)
PUBLIC 3976 0 TNodePtr::operator=(TNodePtr const&)
PUBLIC 39be 0 TNodePtr::~TNodePtr()
PUBLIC 39d6 0 TNode::RemovePtrReference()
PUBLIC 3a12 0 TFSInfo::RemovePtrReference()
PUBLIC 3a48 0 TUString::~TUString()
PUBLIC 3a60 0 TNodePtr::TNodePtr(TNodePtr const&)
PUBLIC 3a86 0 TNode::GetBootNode()
PUBLIC 3ba0 0 TFSInfo::GetBootRefNum()
PUBLIC 3bd0 0 TNode::GetVolume(short, unsigned long, bool)
PUBLIC 3dc2 0 TNode::GetChildren() const
PUBLIC 3dfc 0 TNode::IsContainer() const
PUBLIC 3e48 0 TNode::CreateChildrenList()
PUBLIC 3ee8 0 TChildrenList::TChildrenList(TNode const*)
PUBLIC 3f32 0 TDSMutex::Release()
PUBLIC 3f66 0 TFSVolumeInfo::TFSVolumeInfo()
PUBLIC 407c 0 TUString::TUString()
PUBLIC 408c 0 TVolumeLock::TVolumeLock()
PUBLIC 40fe 0 THFSPlusPropertyStoreCache::THFSPlusPropertyStoreCache()
PUBLIC 414e 0 TCountedPtr<TFSVolumeInfo>::operator=(TCountedPtr<TFSVolumeInfo> const&)
PUBLIC 418c 0 TFSVolumeInfo::AddPtrReference()
PUBLIC 41a0 0 TFSVolumeInfo::RemovePtrReference()
PUBLIC 41d6 0 TFSInfo::GetVolumeInfo(short, unsigned long, FSVolumeInfo&, TCountedPtr<TFSInfo>*)
PUBLIC 4276 0 TFSInfo::Initialize(FSRef const&, unsigned long)
PUBLIC 440c 0 TFSCatalogInfo::TFSCatalogInfo(FSCatalogInfo const&)
PUBLIC 442e 0 TUString::TUString(HFSUniStr255 const&)
PUBLIC 445a 0 TFSInfo::Initialize(FSRef const&, FSRef const&, TUString const&, TFSCatalogInfo const&, unsigned long)
PUBLIC 474a 0 TUString::Length() const
PUBLIC 4764 0 TUString::GetUniChar(unsigned long) const
PUBLIC 478c 0 TFSCatalogInfo::SetDataLogicalSize(long long)
PUBLIC 47a0 0 TFSCatalogInfo::SetDataPhysicalSize(long long)
PUBLIC 47b6 0 TFSInfo::FetchExtendedUserAccess()
PUBLIC 48c2 0 TFSInfo::FetchLSItemFlags()
PUBLIC 49d6 0 TUString::InitializeStaticString(TUString*&, char const*)
PUBLIC 4a6a 0 TUString::CopyToHFSUniStr255(HFSUniStr255*) const
PUBLIC 4b3e 0 ConvertUniCharsToDecomposed(unsigned long, unsigned short*, unsigned long, unsigned long*, unsigned short*)
PUBLIC 4c68 0 TFSCatalogInfo::SetType(unsigned long)
PUBLIC 4c76 0 TFSCatalogInfo::SetCreator(unsigned long)
PUBLIC 4c84 0 TFSInfo::MakePOSIXPath(char*, unsigned long) const
PUBLIC 4ca6 0 TUString::operator=(TUString const&)
PUBLIC 4cec 0 TUString::TUString(char const*, unsigned long)
PUBLIC 4d1e 0 TFSInfo::ItemExists(short, unsigned long, TUString const&)
PUBLIC 4d92 0 TFSVolumeInfo::RecalculateFreeSpaceAndCapacity() const
PUBLIC 4e7c 0 TFSInfo::GetOpenFolderInfo(short, FSVolumeInfo const&, TCountedPtr<TFSInfo>&)
PUBLIC 4fe6 0 TFSInfo::IsVolumeiDisk(short)
PUBLIC 5050 0 TFSInfo::iToolsMemberName()
PUBLIC 5160 0 TFSVolumeInfo::SystemBuildVersion()
PUBLIC 54cc 0 TUString::Append(TUString const&)
PUBLIC 558a 0 TFSVolumeInfo::GetPhysicalVolumeKeyForVolumeInfo(TCountedPtr<TFSVolumeInfo> const&, short, unsigned long, bool&)
PUBLIC 5860 0 TThreadMonitor::TThreadMonitor()
PUBLIC 5876 0 TThreadMonitor::GetThreadLock()
PUBLIC 58fe 0 std::tr1::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const
PUBLIC 5b0a 0 TThreadMonitor::~TThreadMonitor()
PUBLIC 5b1e 0 TNode::StPopulating::StPopulating(TNode const*, TNode::StPopulating*)
PUBLIC 5bb6 0 TChildrenList::GetIteratorLock()
PUBLIC 5c62 0 TNode::TNode(TNodePtr const&)
PUBLIC 5d8c 0 TFSInfo::TFSInfo(TFSInfo const&)
PUBLIC 5d98 0 TFSInfo::TFSInfo(TFSInfo const&)
PUBLIC 63b4 0 TChildrenList::AddNewChild(TNode*, bool&)
PUBLIC 656e 0 TNode::StPopulating::StPopulating(TNode const*, TNode::StPopulating*)
PUBLIC 6578 0 TChildrenList::Find(TNodePtr const&)
PUBLIC 660c 0 TChildrenList::Find(TCountedPtr<TFSInfo> const&)
PUBLIC 66e2 0 TNode::StPopulating::~StPopulating()
PUBLIC 66ec 0 TNode::StPopulating::~StPopulating()
PUBLIC 677e 0 std::vector<TNode*, std::allocator<TNode*> >::insert(__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >, TNode* const&)
PUBLIC 67da 0 std::vector<TNode*, std::allocator<TNode*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >, TNode* const&)
PUBLIC 6918 0 TNode::SetTrashNode()
PUBLIC 698a 0 TNode::FindFolder(unsigned long, bool, TNodePtr&) const
PUBLIC 6a50 0 TNode::FindFolder(unsigned long, bool, TCountedPtr<TFSInfo>&) const
PUBLIC 6bb4 0 TNode::IsVirtual() const
PUBLIC 6bfe 0 TNode::GetVolumeInfo() const
PUBLIC 6c9a 0 TFSInfo::GetVolumeInfo() const
PUBLIC 6cd6 0 TFSVolumeInfo::GetMapKey(short, unsigned long)
PUBLIC 6cf2 0 TFSVolumeInfo::GetVolumeInfoFor(long)
PUBLIC 6da0 0 TFSVolumeInfo::GetVolumeInfoForNoSynch(long)
PUBLIC 6e3e 0 TFSInfo::FindFolder(short, unsigned long, unsigned char, TCountedPtr<TFSInfo>&)
PUBLIC 6ec8 0 TFSInfo::UserCanWrite() const
PUBLIC 6ee6 0 TFSPermissions::GetUserAccess() const
PUBLIC 6ef2 0 TFSInfo::UserCanRead() const
PUBLIC 6f10 0 TFSInfo::UserCanSearch() const
PUBLIC 6f2c 0 TNode::GetNodeFromFSInfo(TCountedPtr<TFSInfo> const&, TNodePtr&, unsigned long, bool)
PUBLIC 717a 0 TPathName::TPathName()
PUBLIC 71c6 0 std::_Deque_base<TUString, std::allocator<TUString> >::_Deque_base(std::allocator<TUString> const&, unsigned long)
PUBLIC 7230 0 std::_Deque_base<TUString, std::allocator<TUString> >::_M_initialize_map(unsigned long)
PUBLIC 7336 0 std::_Deque_base<TUString, std::allocator<TUString> >::_M_create_nodes(TUString**, TUString**)
PUBLIC 739a 0 std::_Deque_base<TUString, std::allocator<TUString> >::_M_allocate_node()
PUBLIC 73e0 0 TPathName::InitializeVolumeRelativePathNameFromFSInfo(TCountedPtr<TFSInfo> const&, TCountedPtr<TFSInfo>&)
PUBLIC 755a 0 std::deque<TUString, std::allocator<TUString> >::operator=(std::deque<TUString, std::allocator<TUString> > const&)
PUBLIC 77cc 0 std::_Deque_iterator<TUString, TUString&, TUString*>::difference_type std::operator-<TUString, TUString&, TUString*>(std::_Deque_iterator<TUString, TUString&, TUString*> const&, std::_Deque_iterator<TUString, TUString&, TUString*> const&)
PUBLIC 77fc 0 std::_Deque_iterator<TUString, TUString&, TUString*> std::copy<std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString&, TUString*> >(std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString&, TUString*>)
PUBLIC 7873 0 std::_Deque_iterator<TUString, TUString&, TUString*> std::__copy_normal<false, false>::__copy_n<std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString&, TUString*> >(std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString&, TUString*>)
PUBLIC 78ea 0 std::_Deque_iterator<TUString, TUString&, TUString*> std::__copy_aux<std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString&, TUString*> >(std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString&, TUString*>)
PUBLIC 7962 0 std::_Deque_iterator<TUString, TUString&, TUString*> std::__copy<false, std::random_access_iterator_tag>::copy<std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString&, TUString*> >(std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString&, TUString*>)
PUBLIC 7a0c 0 std::_Deque_iterator<TUString, TUString const&, TUString const*>::difference_type std::operator-<TUString, TUString const&, TUString const*>(std::_Deque_iterator<TUString, TUString const&, TUString const*> const&, std::_Deque_iterator<TUString, TUString const&, TUString const*> const&)
PUBLIC 7a3c 0 std::deque<TUString, std::allocator<TUString> >::_M_erase_at_end(std::_Deque_iterator<TUString, TUString&, TUString*>)
PUBLIC 7ad6 0 std::deque<TUString, std::allocator<TUString> >::_M_destroy_data(std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::allocator<TUString> const&)
PUBLIC 7b3e 0 std::deque<TUString, std::allocator<TUString> >::_M_destroy_data_aux(std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>)
PUBLIC 7be4 0 TPathName::~TPathName()
PUBLIC 7c08 0 std::deque<TUString, std::allocator<TUString> >::~deque()
PUBLIC 7c80 0 std::_Deque_base<TUString, std::allocator<TUString> >::~_Deque_base()
PUBLIC 7cc8 0 TFSInfo::GetName() const
PUBLIC 7d10 0 std::deque<TUString, std::allocator<TUString> >::push_front(TUString const&)
PUBLIC 7d5a 0 std::deque<TUString, std::allocator<TUString> >::_M_push_front_aux(TUString const&)
PUBLIC 7e40 0 std::deque<TUString, std::allocator<TUString> >::_M_reserve_map_at_front(unsigned long)
PUBLIC 7e70 0 TFSInfo::GetParent(TCountedPtr<TFSInfo>&) const
PUBLIC 7f36 0 TNode::GetNodeFromRelativePathName(TPathName const&, bool, TNodePtr&) const
PUBLIC 8340 0 TNode::IsAlias() const
PUBLIC 839a 0 TFSInfo::IsAlias() const
PUBLIC 83ca 0 TNode::FindChild(TUString const&) const
PUBLIC 882c 0 TChildrenList::Find(TUString const&)
PUBLIC 88c6 0 TNode::CreateNode(TNodePtr const&)
PUBLIC 890e 0 TNode::TNode(TNodePtr const&)
PUBLIC 891a 0 TFSInfo::Initialize(TCountedPtr<TFSInfo> const&, TUString const&)
PUBLIC 89d4 0 TNode::AddChild(TNodePtr&, THFSPlusExtendedPropertyIterator*, TCountedPtr<TPropertyMap> const&)
PUBLIC 8b08 0 TNode::SendNotification(unsigned long, TNodePtr const&, unsigned long, long) const
PUBLIC 8de4 0 TPropertyValue::TPropertyValue(long)
PUBLIC 8dfe 0 TNodeEvent::CreateNodeEvent(unsigned long, TNodePtr const&, unsigned long, TPropertyValue const&, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 8e76 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, unsigned long, TPropertyValue const&, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 8e80 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, unsigned long, TPropertyValue const&, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 8f60 0 TPropertyValue::TPropertyValue()
PUBLIC 8f74 0 TPropertyValue::operator=(TPropertyValue const&)
PUBLIC 8fb6 0 TPropertyValue::Release()
PUBLIC 9078 0 TPropertyValue::TPropertyValue(TPropertyValue const&)
PUBLIC 9208 0 TCountedPtr<TNodeTask>::operator=(TCountedPtr<TNodeTask> const&)
PUBLIC 9246 0 TCountedPtr<TNotifier>::operator=(TCountedPtr<TNotifier> const&)
PUBLIC 9284 0 TNodeEvent::AddPtrReference()
PUBLIC 9298 0 TPropertyValue::~TPropertyValue()
PUBLIC 92b6 0 TNode::GetNotifierList() const
PUBLIC 9334 0 TNodeEvent::Notify(TNotifierList const&)
PUBLIC 9494 0 StRegistrationLock::StRegistrationLock()
PUBLIC 949e 0 StRegistrationLock::StRegistrationLock()
PUBLIC 94fa 0 std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::operator=(std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > const&)
PUBLIC 961c 0 TCountedPtr<TNotifier>* std::__copy<false, std::random_access_iterator_tag>::copy<TCountedPtr<TNotifier> const*, TCountedPtr<TNotifier>*>(TCountedPtr<TNotifier> const*, TCountedPtr<TNotifier> const*, TCountedPtr<TNotifier>*)
PUBLIC 9656 0 StRegistrationLock::~StRegistrationLock()
PUBLIC 9660 0 StRegistrationLock::~StRegistrationLock()
PUBLIC 96bc 0 std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::~vector()
PUBLIC 9708 0 std::_Vector_base<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::~_Vector_base()
PUBLIC 9720 0 TNodeEvent::RemovePtrReference()
PUBLIC 9756 0 TNodeEvent::~TNodeEvent()
PUBLIC 97de 0 TNode::CopyProperties(TCountedPtr<TPropertyMap> const&)
PUBLIC 9886 0 TPathName::~TPathName()
PUBLIC 9890 0 TChildrenList::SetTrash(TNodePtr const&)
PUBLIC 98a2 0 TNode::GetPublishedFoldersNode()
PUBLIC 9a84 0 TFSVolumeInfo::SetRootDirectoryForSidebarInfo(unsigned long, TUString const&)
PUBLIC 9c50 0 TFSCatalogInfo::SetIsVolume()
PUBLIC 9c60 0 TNode::RequestInternalTask(unsigned long, TPropertyValue const&) const
PUBLIC 9d42 0 TNodeTask::TNodeTask(TCountedPtr<TNotifier> const&)
PUBLIC 9d4c 0 TNodeTask::TNodeTask(TCountedPtr<TNotifier> const&)
PUBLIC 9de6 0 TNodeTask::AddPtrReference()
PUBLIC 9dfa 0 TNodeTask::SetRequest(TNodePtr const&, unsigned long, unsigned long, TPropertyValue const&)
PUBLIC 9e4a 0 TNodeTask::ResetRequest()
PUBLIC 9f52 0 TNode::PostNodeTaskRequest(TCountedPtr<TNodeTask> const&) const
PUBLIC a008 0 TFSVolumeInfo::GetVolumeSyncThread()
PUBLIC a10e 0 TVolumeSyncThread::TVolumeSyncThread(TCountedPtr<TFSVolumeInfo> const&)
PUBLIC a118 0 TVolumeSyncThread::TVolumeSyncThread(TCountedPtr<TFSVolumeInfo> const&)
PUBLIC a170 0 TFSVolumeInfo::GetSynchingGCDQueue() const
PUBLIC a1f0 0 TVolumeSyncThread::AddPtrReference()
PUBLIC a20c 0 TCountedPtr<TVolumeSyncThread>::operator=(TCountedPtr<TVolumeSyncThread> const&)
PUBLIC a24a 0 TVolumeSyncThread::RemovePtrReference()
PUBLIC a288 0 TVolumeSyncThread::PostNodeTaskRequest(TNodeTask*)
PUBLIC a310 0 TNodeTask::RemovePtrReference()
PUBLIC a347 0 __PostNodeTaskRequest_block_invoke_2
PUBLIC a410 0 TNode::RegisterForInternalNotifications(TNodePtr const&)
PUBLIC a484 0 TNodeEvent::GetInternalClientNotifier()
PUBLIC a738 0 TNodeEvent::GetInternalEventQueue()
PUBLIC a770 0 TNodeEvent::InitializeInternalQueue()
PUBLIC a7da 0 TClientChangeNotifier::GetClientChangeNotifier(NodeClientContext, OpaqueEventQueue*, void (*)(OpaqueEventQueue*), __CFRunLoop*)
PUBLIC a95c 0 TNodeTask::SetRequestStatus(long)
PUBLIC a9da 0 TNode::GetPublishedFoldersList()
PUBLIC aab4 0 TClientChangeNotifier::TClientChangeNotifier(NodeClientContext, OpaqueEventQueue*, void (*)(OpaqueEventQueue*), __CFRunLoop*)
PUBLIC ab28 0 TClientChangeNotifier::AddEventHandlerToRunLoop()
PUBLIC ac43 0 ClientChangeNotifierRetainCallBack(void const*)
PUBLIC ac64 0 TClientChangeNotifier::GetClientNotifierList()
PUBLIC acd4 0 std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> >::push_back(TClientChangeNotifier* const&)
PUBLIC ad10 0 std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > >, TClientChangeNotifier* const&)
PUBLIC ae4e 0 TNotifier::TNotifier(TCountedPtr<TClientChangeNotifier> const&, TNodePtr const&, TNodePtr const&)
PUBLIC ae58 0 TNotifier::TNotifier(TCountedPtr<TClientChangeNotifier> const&, TNodePtr const&, TNodePtr const&)
PUBLIC af02 0 TCountedPtr<TClientChangeNotifier>::operator=(TCountedPtr<TClientChangeNotifier> const&)
PUBLIC af40 0 TClientChangeNotifier::AddPtrReference()
PUBLIC af54 0 TNotifier::AddPtrReference()
PUBLIC af70 0 TNotifier::RemovePtrReference()
PUBLIC afaa 0 TClientChangeNotifier::~TClientChangeNotifier()
PUBLIC b05f 0 ClientChangeNotifierReleaseCallBack(void const*)
PUBLIC b0ba 0 TClientChangeNotifier::RemovePtrReference()
PUBLIC b1ae 0 std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> >::erase(__gnu_cxx::__normal_iterator<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > >, __gnu_cxx::__normal_iterator<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > >)
PUBLIC b1fa 0 TNotifier::Register(TCountedPtr<TClientChangeNotifier> const&, TNodePtr const&, TNodePtr const&, unsigned long)
PUBLIC b79c 0 std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::push_back(TCountedPtr<TNotifier> const&)
PUBLIC b7f8 0 std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::_M_insert_aux(__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier>*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >, TCountedPtr<TNotifier> const&)
PUBLIC ba26 0 TCountedPtr<TNotifier>* std::__uninitialized_copy_aux<TCountedPtr<TNotifier>*, TCountedPtr<TNotifier>*>(TCountedPtr<TNotifier>*, TCountedPtr<TNotifier>*, TCountedPtr<TNotifier>*, std::__false_type)
PUBLIC baa6 0 TNode::StSynchronize::StSynchronize(TNodePtr const&, unsigned long)
PUBLIC bcfc 0 TFSInfo::SetPublishedFoldersListRef(OpaqueLSSharedFileListRef*)
PUBLIC bd44 0 TNode::WaitToBeSynced(bool)
PUBLIC be1c 0 TNode::HandleSyncStarted(unsigned long)
PUBLIC befe 0 TNode::HandleSync(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC bf3e 0 TPropertyReference::AsSInt32(long&) const
PUBLIC bf6a 0 TNode::HandleSync(unsigned long)
PUBLIC c438 0 TChildrenList::LastSyncStartTime() const
PUBLIC c444 0 TNode::AdjustedSyncQuanta() const
PUBLIC c4e4 0 TChildrenList::GetLastSyncDuration() const
PUBLIC c4f0 0 TFSRefNumIterator::TFSRefNumIterator()
PUBLIC c4fe 0 TFSRefNumIterator::GetNextVRefNum(short&)
PUBLIC c53a 0 TFSInfo::GetVolumeAtIndex(unsigned long, short&)
PUBLIC c586 0 std::vector<short, std::allocator<short> >::push_back(short const&)
PUBLIC c5c4 0 std::vector<short, std::allocator<short> >::_M_insert_aux(__gnu_cxx::__normal_iterator<short*, std::vector<short, std::allocator<short> > >, short const&)
PUBLIC c6ee 0 short* std::uninitialized_copy<short*, short*>(short*, short*, short*)
PUBLIC c720 0 TNode::UnmarkChildren() const
PUBLIC c79c 0 TFSInfo::GetNWNode() const
PUBLIC c7be 0 TNode::SynchronizeChildren(unsigned long, TNodeEventPtrSet&)
PUBLIC da58 0 TNode::NeedsChildReconcile() const
PUBLIC daae 0 TNode::GetPermissions(unsigned long&) const
PUBLIC e714 0 TNode::SendFullSyncRequests()
PUBLIC e7b2 0 TNode::HandleRecursiveListeners()
PUBLIC eab4 0 TNode::IsVolume() const
PUBLIC eb00 0 TNode::SetSizesFetchedInvalid()
PUBLIC eb40 0 TNode::HandleListeners(unsigned long)
PUBLIC ebea 0 TNode::DispatchSyncRequestNowWithOptions(TNode*, unsigned long)
PUBLIC ec6a 0 TNode::UserCanBrowse() const
PUBLIC ed64 0 TNode::ModifyPermissionsIfBusy(unsigned long&) const
PUBLIC ede4 0 TNode::ScavengeProperties(bool)
PUBLIC f186 0 TNode::HandleSyncCompleted(unsigned long)
PUBLIC f228 0 TNode::RequestSynchronize(unsigned long)
PUBLIC f2da 0 TNodeEventPtrSet::SendNotifications()
PUBLIC f5be 0 std::_Rb_tree<TCountedPtr<TNodeEvent>, TCountedPtr<TNodeEvent>, std::_Identity<TCountedPtr<TNodeEvent> >, std::less<TCountedPtr<TNodeEvent> >, std::allocator<TCountedPtr<TNodeEvent> > >::_M_erase(std::_Rb_tree_node<TCountedPtr<TNodeEvent> >*)
PUBLIC f5fc 0 TNode::StSynchronize::~StSynchronize()
PUBLIC f657 0 NodeEventNewEventQueue
PUBLIC f672 0 TNode::SendNotification(TCountedPtr<TNodeTask> const&) const
PUBLIC f798 0 TNodeEvent::NewEventQueue(OpaqueEventQueue*&)
PUBLIC f7ce 0 TNodeTask::GetNotifier() const
PUBLIC f8a8 0 GetRootNode
PUBLIC f8de 0 RemoveTaskPtrReference(TNodeTask*)
PUBLIC f938 0 NodeCopySpecialFolder
PUBLIC f9ee 0 TNode::DispatchSyncRequest(double, bool)
PUBLIC fa4c 0 TNode::SetTimerToDispatchSyncRequest(TNode*, double)
PUBLIC fad0 0 TNode::GetSpecialNodeWithStatus(unsigned long, OpaqueNodeRequest* const&, unsigned long, TNodePtr&)
PUBLIC 10230 0 TNodePtr::ReturnAsNodeRef() const
PUBLIC 1025a 0 CopyNodeRef
PUBLIC 10264 0 TNodeTask::~TNodeTask()
PUBLIC 102ce 0 NodeCopyNodeRef
PUBLIC 102f8 0 TVolumeSyncThread::SetTimerToDispatchSyncRequest(TNode*, double)
PUBLIC 10428 0 TNode::WeakValidate(TNode*)
PUBLIC 10440 0 DisposeNode
PUBLIC 10449 0 NodeDisposeNodeRef
PUBLIC 104ee 0 TNodeRequest::TNodeRequest(TClientChangeNotifier const*)
PUBLIC 104f8 0 TNodeRequest::TNodeRequest(TClientChangeNotifier const*)
PUBLIC 10680 0 CreateClientNodeRef
PUBLIC 10704 0 TNodeRequest::AddPtrReference()
PUBLIC 10719 0 NodeCreateNewVirtualNode
PUBLIC 10a46 0 TNodeRequest::SetTask(TCountedPtr<TNodeTask> const&)
PUBLIC 10a58 0 TNode::PostFolderSizingTaskRequest(TCountedPtr<TNodeTask> const&, bool) const
PUBLIC 10b74 0 TNode::SetAliasTarget(TNodePtr const&, bool)
PUBLIC 10d70 0 TNode::GetClientNodeSet()
PUBLIC 10dea 0 std::set<TNode*, std::less<TNode*>, std::allocator<TNode*> >::insert(TNode* const&)
PUBLIC 10e26 0 std::_Rb_tree<TNode*, TNode*, std::_Identity<TNode*>, std::less<TNode*>, std::allocator<TNode*> >::_M_insert_unique(TNode* const&)
PUBLIC 10eb2 0 std::_Rb_tree<TNode*, TNode*, std::_Identity<TNode*>, std::less<TNode*>, std::allocator<TNode*> >::_M_insert(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, TNode* const&)
PUBLIC 10f26 0 std::_Rb_tree<TNode*, TNode*, std::_Identity<TNode*>, std::less<TNode*>, std::allocator<TNode*> >::_M_create_node(TNode* const&)
PUBLIC 10f7e 0 NodeNewChangeNotifier
PUBLIC 110a6 0 TFSVolumeInfo::GetFolderSizingThread()
PUBLIC 111ae 0 TFSInfo::GetFSIdentity() const
PUBLIC 111dc 0 TFolderSizingThread::TFolderSizingThread(TCountedPtr<TFSVolumeInfo> const&)
PUBLIC 111e6 0 TNode::ReconcileProperties(TCountedPtr<TFSInfo> const&, TNodeEventPtrSet&)
PUBLIC 112ea 0 TFSInfo::SynchronizeProperties(TCountedPtr<TFSInfo> const&, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >&)
PUBLIC 11362 0 TFSInfo::SynchronizeFSMetaData(TCountedPtr<TFSInfo> const&, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >&)
PUBLIC 113b2 0 TFolderSizingThread::TFolderSizingThread(TCountedPtr<TFSVolumeInfo> const&)
PUBLIC 113f0 0 TFSInfo::SynchronizeNames(TCountedPtr<TFSInfo> const&, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >&)
PUBLIC 115fa 0 TUString::StringCompare(TUString const&, unsigned long) const
PUBLIC 1162c 0 TFSVolumeInfo::GetSizingGCDQueue() const
PUBLIC 11698 0 TFolderSizingThread::AddPtrReference()
PUBLIC 116b6 0 TFSInfo::GetDisplayName() const
PUBLIC 1188c 0 TCountedPtr<TFolderSizingThread>::operator=(TCountedPtr<TFolderSizingThread> const&)
PUBLIC 118ca 0 TFolderSizingThread::RemovePtrReference()
PUBLIC 11908 0 TFolderSizingThread::PostFolderSizingTaskRequest(TNodeTask*)
PUBLIC 11995 0 __PostFolderSizingTaskRequest_block_invoke_5
PUBLIC 119d0 0 TNode::HandleFolderSizingRequests(TNodeTask*, TFolderSizingThread*)
PUBLIC 11b54 0 TFSInfo::SynchronizeCatalog(TCountedPtr<TFSInfo> const&, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >&)
PUBLIC 12242 0 TUString::UTCCompare(UTCDateTime const&, UTCDateTime const&)
PUBLIC 1227e 0 TFSInfo::IsVisible() const
PUBLIC 123c0 0 TFSInfo::SynchronizeLaunchServices(TCountedPtr<TFSInfo> const&, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >&)
PUBLIC 12524 0 TFSInfo::SynchronizePermissions(TCountedPtr<TFSInfo> const&, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >&)
PUBLIC 128e2 0 TFSPermissions::GetOwner() const
PUBLIC 128ec 0 TFSPermissions::GetUserGroups() const
PUBLIC 128f8 0 TFSPermissions::GetMode() const
PUBLIC 12904 0 TFSInfo::SynchronizeSidebar(TCountedPtr<TFSInfo> const&, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >&)
PUBLIC 12ac6 0 TNodeEventPtrSet::AddPropertyChanges(TNodePtr const&, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> > const&)
PUBLIC 12c42 0 std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, std::less<unsigned long>, std::allocator<unsigned long> >::_M_erase(std::_Rb_tree_node<unsigned long>*)
PUBLIC 12c7c 0 TNodeRequest::RemovePtrReference()
PUBLIC 12cb2 0 TNodeRequest::~TNodeRequest()
PUBLIC 12d0a 0 TNotifier::~TNotifier()
PUBLIC 12d78 0 TChildrenList::LastResizeTime() const
PUBLIC 12d84 0 TNode::AdjustedResizeQuanta() const
PUBLIC 12e32 0 TNode::HandleFolderSizingRequest(TCountedPtr<TNodeTask> const&, TFolderSizingThread*)
PUBLIC 1325c 0 TNode::IsDeferredForSymlink(TNode const*, bool (TFSInfo::*)() const)
PUBLIC 13378 0 TNode::IsSymlink() const
PUBLIC 133d2 0 TFSInfo::IsSymlink() const
PUBLIC 13414 0 IsSymlink(unsigned long, unsigned long)
PUBLIC 13466 0 TFSInfo::IsPackage() const
PUBLIC 134d8 0 TNode::RecalculateFreeSpace()
PUBLIC 135bc 0 TNode::GetNetworkNode(unsigned long)
PUBLIC 13664 0 TNode::GetNetworkNearbyBrowser()
PUBLIC 137da 0 TVolumeSyncThread::CreateNWBrowser()
PUBLIC 1386e 0 NWBrowserRetainCallBack(void const*)
PUBLIC 1388a 0 TFSInfo::Initialize(unsigned long, __NWNode*)
PUBLIC 13b70 0 TNWNode::TNWNode(__NWNode*)
PUBLIC 13e10 0 TNWNode::RemovePtrReference()
PUBLIC 13e48 0 TFSInfo::SetNetworkNearbyBrowserRef(__NWBrowser*)
PUBLIC 13e94 0 TFSVolumeInfo::RecalculateFreeSpace()
PUBLIC 13eaa 0 TChildrenList::SetLastResizeTime(double)
PUBLIC 13eb8 0 RemoveTaskPtrReference(TNodeTask*, TFolderSizingThread*)
PUBLIC 13f2a 0 TFSVolumeInfo::GetExtendedPropertyStore(unsigned long, bool) const
PUBLIC 14352 0 TNode::RemoveUnmarkedMountPoints(TNodeEventPtrSet&)
PUBLIC 145ff 0 NodeIs
PUBLIC 146c6 0 TNode::NodeIs(unsigned long long&) const
PUBLIC 14e9a 0 TFSInfo::Initialize(short, unsigned long)
PUBLIC 14f12 0 THFSPlusPropertyStore::THFSPlusPropertyStore(TCountedPtr<TFSInfo> const&, TCountedPtr<TFSVolumeInfo> const&)
PUBLIC 14f1c 0 THFSPlusPropertyStore::THFSPlusPropertyStore(TCountedPtr<TFSInfo> const&, TCountedPtr<TFSVolumeInfo> const&)
PUBLIC 15072 0 TFSInfo::CreateCFURLRef() const
PUBLIC 1509c 0 GetBootNode
PUBLIC 150d1 0 GetHomeNode
PUBLIC 15108 0 TCFURLInfo::TCFURLInfo()
PUBLIC 15140 0 TNode::GetWhichSpecialNode(unsigned long)
PUBLIC 154ca 0 TCFURLInfo::AddPtrReference()
PUBLIC 154de 0 TNode::SetSpecialNode(unsigned long, TNodePtr&)
PUBLIC 156f6 0 TCountedPtr<TCFURLInfo>::operator=(TCountedPtr<TCFURLInfo> const&)
PUBLIC 15734 0 TNode::SetHomeNode()
PUBLIC 157e8 0 TNode::SetSpecialNodeFromOStype(unsigned long)
PUBLIC 1585e 0 TCFURLInfo::RemovePtrReference()
PUBLIC 15894 0 TNode::FindUserFolder(unsigned long, bool, TNodePtr&)
PUBLIC 1599c 0 TCFURLInfo::Initialize(__CFURL const*, bool, bool)
PUBLIC 15a88 0 TCFURLInfo::FetchProperties(bool)
PUBLIC 15e38 0 TCFURLInfo::GetCopyItemRequestedPropertyKeys()
PUBLIC 15ea1 0 CreateBasicInfoPropertyKeys()
PUBLIC 1618e 0 TNode::LessThan(TUString const&) const
PUBLIC 162ec 0 TNode::GetDisplayName(TUString&) const
PUBLIC 164ee 0 TFSInfo::SetDisplayName(TUString const&)
PUBLIC 16586 0 TNode::GetName() const
PUBLIC 165dc 0 TNode::Equal(TUString const&) const
PUBLIC 1665a 0 TNode::SetSpecialGlobalNodeForType(unsigned long, TNodePtr const&, long)
PUBLIC 167ff 0 NodeCopyFromURL
PUBLIC 1699e 0 TNode::GetNodeFromURL(__CFURL const* const&, TNodePtr&, unsigned long)
PUBLIC 16dec 0 TPathName::TPathName(TUString const&, unsigned short)
PUBLIC 16df6 0 TPathName::TPathName(TUString const&, unsigned short)
PUBLIC 1706e 0 TUString::CopyToUniString(UniString*) const
PUBLIC 170de 0 std::deque<TUString, std::allocator<TUString> >::push_back(TUString const&)
PUBLIC 1712e 0 TFSInfo::LessThan(TCountedPtr<TFSInfo> const&) const
PUBLIC 17236 0 IsMountPointLink(unsigned long, unsigned long)
PUBLIC 17284 0 NodeGetVRefNum
PUBLIC 17334 0 TNode::IsNodeQuery() const
PUBLIC 17380 0 TFSInfo::IsSavedSearch() const
PUBLIC 17448 0 NodeRegisterChangeNotification
PUBLIC 17520 0 TNode::RegisterChangeNotification(TCountedPtr<TClientChangeNotifier> const&, unsigned long)
PUBLIC 17578 0 TNode::AliasIsContainer() const
PUBLIC 17794 0 TNode::IsPopulated() const
PUBLIC 177b8 0 TNode::IsInitialPopulating() const
PUBLIC 177dc 0 TReferenceCounted::TReferenceCounted(unsigned long, void*, void (*)(void*), void (*)(void*))
PUBLIC 1780a 0 TNotifier::Retain(void*)
PUBLIC 1782a 0 TReferenceCounted::AddPtrReference()
PUBLIC 1783e 0 TPropertyValue::TPropertyValue(TCountedPtr<TReferenceCounted> const&)
PUBLIC 17848 0 TPropertyValue::TPropertyValue(TCountedPtr<TReferenceCounted> const&)
PUBLIC 1789c 0 TNotifier::Release(void*)
PUBLIC 178ae 0 TReferenceCounted::RemovePtrReference()
PUBLIC 178e6 0 TNode::IsNodeQueryHit() const
PUBLIC 17931 0 NodeCreateNewRequest
PUBLIC 179bc 0 NodeNewIterator
PUBLIC 179fe 0 NodeNewSortedIterator(OpaqueNodeRef*, short (*)(unsigned long, unsigned short const*, unsigned long, unsigned short const*), short (*)(long long, long long), unsigned long, OpaqueNodeIterator**, OpaqueNodeRequest*, unsigned long)
PUBLIC 17ab8 0 TNode::NewNodeIterator(TNodeIterator*&, short (*)(unsigned long, unsigned short const*, unsigned long, unsigned short const*), short (*)(long long, long long), unsigned long, OpaqueNodeRequest* const&, unsigned long) const
PUBLIC 17bd0 0 TNode::LowLevelIsLockFile() const
PUBLIC 17d04 0 TNode::IsServer() const
PUBLIC 17d50 0 TFSInfo::IsServer() const
PUBLIC 17d78 0 TNode::IsSharePoint() const
PUBLIC 17dc4 0 TFSInfo::IsSharePoint() const
PUBLIC 17dec 0 TFSInfo::LowLevelIsLockFile() const
PUBLIC 17e52 0 TNode::IsNodeQueryHitsContainer() const
PUBLIC 17e9c 0 TNode::PopulateChildren(OpaqueNodeRequest* const&) const
PUBLIC 18002 0 TNode::RequestPopulate(TCountedPtr<TNodeTask> const&) const
PUBLIC 180ac 0 TNodeIterator::TNodeIterator(TNodePtr const&, short (*)(unsigned long, unsigned short const*, unsigned long, unsigned short const*), short (*)(long long, long long), unsigned long, bool)
PUBLIC 180b6 0 TNodeIterator::TNodeIterator(TNodePtr const&, short (*)(unsigned long, unsigned short const*, unsigned long, unsigned short const*), short (*)(long long, long long), unsigned long, bool)
PUBLIC 18282 0 TNodeIterator::GetUnsortedChildrenForNode(TNodePtr const&, short (*)(unsigned long, unsigned short const*, unsigned long, unsigned short const*), short (*)(long long, long long), unsigned long, bool)
PUBLIC 1875a 0 TCountedPtr<TNotifier>* std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier> const*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > > >(unsigned long, __gnu_cxx::__normal_iterator<TCountedPtr<TNotifier> const*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >, __gnu_cxx::__normal_iterator<TCountedPtr<TNotifier> const*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >)
PUBLIC 187d0 0 std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::push_back(std::pair<TNodePtr, TPropertyStore> const&)
PUBLIC 18846 0 std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::_M_insert_aux(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, std::pair<TNodePtr, TPropertyStore> const&)
PUBLIC 18b0d 0 std::pair<TNodePtr, TPropertyStore>* std::__uninitialized_copy_aux<std::pair<TNodePtr, TPropertyStore>*, std::pair<TNodePtr, TPropertyStore>*>(std::pair<TNodePtr, TPropertyStore>*, std::pair<TNodePtr, TPropertyStore>*, std::pair<TNodePtr, TPropertyStore>*, std::__false_type)
PUBLIC 18ba2 0 TNodeEvent::RedispatchEventToNotifier(unsigned long, OpaqueEventQueue*, TCountedPtr<TNotifier> const&) const
PUBLIC 18cb8 0 TNodeEvent::TNodeEvent(TNodeEvent const&)
PUBLIC 18da0 0 TNotifier::Tickle(bool)
PUBLIC 18f70 0 TFSInfo::IsIndexSorted() const
PUBLIC 18fcf 0 NodeDisposeRequest
PUBLIC 1902f 0 NodeIteratorFullyPopulated
PUBLIC 19046 0 NodeIteratorFirst
PUBLIC 19132 0 TNodeIterator::First()
PUBLIC 1916e 0 TCountedPtr<TChar>::operator=(TCountedPtr<TChar> const&)
PUBLIC 191b2 0 TNodeIterator::Next(long long*, UniString**)
PUBLIC 192ba 0 THFSPlusPropertyStore::AddPtrReference()
PUBLIC 192ce 0 TCountedPtr<THFSPlusPropertyStore>::operator=(TCountedPtr<THFSPlusPropertyStore> const&)
PUBLIC 1930e 0 NodeIteratorNext
PUBLIC 1941e 0 THFSPlusPropertyStore::RemovePtrReference()
PUBLIC 19454 0 TNodeIterator::Next()
PUBLIC 1948a 0 THFSPlusPropertyStore::IsInPackage() const
PUBLIC 1958e 0 DisposeNodeIterator
PUBLIC 19598 0 TFSInfo::Initialize(__CFURL const*)
PUBLIC 19662 0 NodeDisposeIterator
PUBLIC 196c8 0 TNodeIterator::~TNodeIterator()
PUBLIC 196d2 0 TNodeIterator::~TNodeIterator()
PUBLIC 19710 0 std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::~vector()
PUBLIC 19756 0 std::_Vector_base<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::~_Vector_base()
PUBLIC 1976e 0 NodeIsiDisk
PUBLIC 197b2 0 TNode::IsiDisk() const
PUBLIC 1980c 0 TFSInfo::IsiDisk() const
PUBLIC 1992c 0 TSystemNotificationTask::HandleFileChanged(__FSEventStream const*, void*, unsigned long, void*, unsigned long const*, unsigned long long const*)
PUBLIC 19a08 0 TUString::BeginsWith(TUString const&) const
PUBLIC 19a34 0 TNode::Equal(TNodePtr const&) const
PUBLIC 19ac8 0 TFSInfo::Equal(TCountedPtr<TFSInfo> const&) const
PUBLIC 19be6 0 TNode::GetSlashVolumesNode()
PUBLIC 19d72 0 TNode::SetTimerToDispatchResizeRequest(TNodeTask*, double)
PUBLIC 19e2c 0 TFolderSizingThread::SetTimerToDispatchResizeRequest(TNodeTask*, double)
PUBLIC 19fca 0 TChildrenList::IncrementRegisteredChildrenCount()
PUBLIC 19fd8 0 TNode::FindChildButDontSynchronize(TUString const&) const
PUBLIC 1a15e 0 TNotifier::SetTimerToHandleTickle(TCountedPtr<TNotifier> const&, double)
PUBLIC 1a275 0 NotifierRetainCallBack(void const*)
PUBLIC 1a29a 0 TNode::MakePOSIXPath(unsigned char*, unsigned long) const
PUBLIC 1a322 0 TNode::GetPathName(TUString&, bool, bool) const
PUBLIC 1a414 0 TNode::AsFullPOSIXPath(TUString&) const
PUBLIC 1a878 0 TNode::GetCanonicalName(TUString&) const
PUBLIC 1a89e 0 SlashesToColons(TUString const&, TUString&)
PUBLIC 1a988 0 TNode** std::__copy_backward<true, std::random_access_iterator_tag>::__copy_b<TNode*>(TNode* const*, TNode* const*, TNode**)
PUBLIC 1a9b8 0 unsigned long const* std::lower_bound<unsigned long const*, float, std::tr1::__detail::_LessThan>(unsigned long const*, unsigned long const*, float const&, std::tr1::__detail::_LessThan)
PUBLIC 1aa12 0 std::vector<short, std::allocator<short> >::~vector()
PUBLIC 1aa1c 0 std::_Vector_base<short, std::allocator<short> >::~_Vector_base()
PUBLIC 1aa34 0 TNode::HandleRegisterForNotification(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 1ab7a 0 TNodeTask::GetClientChangeNotifier() const
PUBLIC 1ac42 0 TPropertyValue::AsReferenceCounted() const
PUBLIC 1ac7e 0 TNodeTask::GetNotificationOptions() const
PUBLIC 1acda 0 TNode::FindRegistration(TCountedPtr<TClientChangeNotifier> const&, bool)
PUBLIC 1ad8a 0 TNode::DoExternalRegistration(TCountedPtr<TNotifier> const&)
PUBLIC 1b238 0 TNode::GetNetworkSidebarBrowser()
PUBLIC 1b3d8 0 TFSInfo::SetNetworkSidebarBrowserRef(__NWBrowser*)
PUBLIC 1b424 0 TNode::GetNetworkRemoteDiskBrowser()
PUBLIC 1b59c 0 TFSInfo::SetNetworkRemoteDiskBrowserRef(__NWBrowser*)
PUBLIC 1b5e8 0 TNode::IsNetworkNeighborhood() const
PUBLIC 1b634 0 TFSInfo::IsNetworkNeighborhood() const
PUBLIC 1b65a 0 TNodeEvent::Notify(TCountedPtr<TNotifier> const&)
PUBLIC 1b6fe 0 TNode::HandlePopulate(bool) const
PUBLIC 1b77c 0 __SetTimerToDispatchSyncRequest_block_invoke_3
PUBLIC 1b7ec 0 RemoveNodePtrReference(TNode*)
PUBLIC 1b846 0 TNode::IsVisible() const
PUBLIC 1ba5a 0 TFSInfo::IsAll() const
PUBLIC 1ba82 0 NodeCopyAsPathName
PUBLIC 1bb9e 0 TNode::Validate(TNode*)
PUBLIC 1bbca 0 NodeFindFolder
PUBLIC 1bce8 0 TUString::EndsWith(TUString const&) const
PUBLIC 1bd17 0 VolumeIs
PUBLIC 1bd9e 0 TNode::VolumeIs(unsigned long&) const
PUBLIC 1bec4 0 TNode::IsLocalVolume() const
PUBLIC 1bf02 0 VolumeIsEjectable
PUBLIC 1bf36 0 TNode::IsEjectable() const
PUBLIC 1c1be 0 TFSInfo::IsEjectable() const
PUBLIC 1c220 0 TFSInfo::IsNetworkRoot() const
PUBLIC 1c248 0 TNode::IsUnresolved() const
PUBLIC 1c292 0 TNode::IsNodeQuerySavedSearch() const
PUBLIC 1c2ec 0 NodeValidate
PUBLIC 1c310 0 TNode::Validate() const
PUBLIC 1c33c 0 TNode::IsUnconnectedAuthSymLink() const
PUBLIC 1c3c2 0 NodeCopyFromAlias
PUBLIC 1c4e6 0 TNode::FollowAlias(TNodePtr&, OpaqueNodeRequest* const&, unsigned long) const
PUBLIC 1cae0 0 TNode::IsComputer() const
PUBLIC 1cb2a 0 TFSInfo::GetLSSharedFileListItemRef() const
PUBLIC 1cb4c 0 GetNodePropertyAsOSType
PUBLIC 1cbc6 0 GetNodeProperty(OpaqueNodeRef*, unsigned long, TPropertyReference&, OpaqueNodeRequest*, unsigned long)
PUBLIC 1ccb6 0 TNode::GetProperty(unsigned long, TPropertyReference&, OpaqueNodeRequest* const&, unsigned long) const
PUBLIC 1cfaa 0 TNode::GetProperty(unsigned long, TPropertyReference&, unsigned long) const
PUBLIC 1d322 0 TFSInfo::GetProperty(unsigned long, TPropertyReference&, unsigned long) const
PUBLIC 1d37c 0 TFSInfo::GetPropertyRecord(unsigned long const&, TPropertyRecord&)
PUBLIC 1d488 0 TFSInfo::TPropertyRecordSet::TPropertyRecordSet()
PUBLIC 1e5da 0 std::set<TPropertyRecord, PropertyRecordCompare, std::allocator<TPropertyRecord> >::insert(TPropertyRecord const&)
PUBLIC 1e616 0 std::_Rb_tree<TPropertyRecord, TPropertyRecord, std::_Identity<TPropertyRecord>, PropertyRecordCompare, std::allocator<TPropertyRecord> >::_M_insert_unique(TPropertyRecord const&)
PUBLIC 1e6a2 0 std::_Rb_tree<TPropertyRecord, TPropertyRecord, std::_Identity<TPropertyRecord>, PropertyRecordCompare, std::allocator<TPropertyRecord> >::_M_insert(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, TPropertyRecord const&)
PUBLIC 1e716 0 std::_Rb_tree<TPropertyRecord, TPropertyRecord, std::_Identity<TPropertyRecord>, PropertyRecordCompare, std::allocator<TPropertyRecord> >::_M_create_node(TPropertyRecord const&)
PUBLIC 1e796 0 TNode::GetExtendedProperty(unsigned long, TPropertyReference&, bool) const
PUBLIC 1e82c 0 TNode::GetExtendedPropertyStore(bool) const
PUBLIC 1e9e4 0 TNode::IsHome() const
PUBLIC 1ed80 0 TNode::IsBurnFolder() const
PUBLIC 1edda 0 TFSInfo::IsBurnFolder() const
PUBLIC 1f0ba 0 TNode::GetPropertyStoreKeyName() const
PUBLIC 1f134 0 THFSPlusPropertyStore::GetProperty(TUString const&, unsigned long, TPropertyReference&) const
PUBLIC 1f276 0 TPropertyInfo::TPropertyInfo(TUString const&, unsigned long)
PUBLIC 1f280 0 TPropertyInfo::TPropertyInfo(TUString const&, unsigned long)
PUBLIC 1f30a 0 THFSPlusPropertyStore::GetProperties(bool) const
PUBLIC 1f36e 0 THFSPlusPropertyStore::Open(bool, bool) const
PUBLIC 1f4b0 0 THFSPlusPropertyStore::GetPropertyStoreLock()
PUBLIC 1f538 0 TPropertyInfoList::TPropertyInfoList()
PUBLIC 1f55e 0 TFSVolumeInfo::SupportsInvisibleBit() const
PUBLIC 1f572 0 TFSVolumeInfo::HasPersistentStores() const
PUBLIC 1f5d8 0 TPropertyInfo::CreatePropertyList(TCountedPtr<TCFURLInfo> const&, UTCDateTime&, bool, bool, TPropertyInfoList*)
PUBLIC 1f6ca 0 TPropertyInfo::CreatePropertyList(TCountedPtr<TFSInfo> const&, UTCDateTime&, bool, bool, TPropertyInfoList*)
PUBLIC 1fa3c 0 TFSInfo::GetPropertyStoreName()
PUBLIC 1fa7a 0 TFSInfo::OpenFork(bool, signed char, short&, bool) const
PUBLIC 1fcdc 0 TFSInfo::DataForkName()
PUBLIC 1fd76 0 TFSInfo::ReadForkFromMark(short, unsigned long, void*, unsigned long*)
PUBLIC 1fde4 0 TFSInfo::CloseFork(short)
PUBLIC 1fe06 0 TPropertyInfo::MakeProperties(TPropertyInfoList*, unsigned char*, unsigned long, bool)
PUBLIC 2004a 0 IAMalloc(unsigned long)
PUBLIC 2006c 0 IAStoreStream::IAStoreStream()
PUBLIC 200e3 0 IAMallocArraySizedOfType(unsigned long, unsigned long)
PUBLIC 20184 0 IAMallocSized(unsigned long)
PUBLIC 201a6 0 IAMakeStorage(IAStoreStream*)
PUBLIC 201ee 0 BuddyStorage::BuddyStorage(IAStoreStream*)
PUBLIC 20384 0 IAStorage::IAStorage(IAStoreStream*, unsigned long)
PUBLIC 203ab 0 IAMallocArrayOfType(unsigned long, unsigned long)
PUBLIC 2044c 0 SkipList::SkipList(unsigned char)
PUBLIC 204f6 0 SL_Ceiling(unsigned char, unsigned char)
PUBLIC 20512 0 BuddyStorage::Open(bool)
PUBLIC 2064a 0 TPropertyStream::Open(bool)
PUBLIC 20650 0 IAStoreStream::SetPosition(unsigned long, unsigned long)
PUBLIC 2069e 0 IAStoreStream::MaybeFlushBuffer()
PUBLIC 20722 0 IAStoreStream::ReadUInt32()
PUBLIC 207c8 0 IAStoreStream::ReadPastEndOfBuffer()
PUBLIC 208b0 0 TPropertyStream::Read(unsigned long, unsigned char*, unsigned long)
PUBLIC 20932 0 TPropertyStream::ReadData(unsigned char*, long&)
PUBLIC 209a6 0 BuddyStorage::BlockInfoRead(IAStoreStream*)
PUBLIC 20ad8 0 BuddyStorage::TOCRead(IAStoreStream*)
PUBLIC 20c00 0 IAStoreStream::ReadBytes(void*, unsigned long)
PUBLIC 20c42 0 StringUInt32Map::Put(char const*, unsigned long)
PUBLIC 20cba 0 SkipList::Put(void*, void*)
PUBLIC 20d58 0 SkipList::SetFinger(void*, void**)
PUBLIC 20de4 0 SkipList::Insert(void*, void**)
PUBLIC 20eca 0 SkipList::NewNode(unsigned char, void*)
PUBLIC 20f16 0 BuddyStorage::FreeAddressesRead(IAStoreStream*)
PUBLIC 20f88 0 UInt32Set::SetFinger(void*, void**)
PUBLIC 21002 0 TPropertyInfo::TPropertyInfo()
PUBLIC 2106d 0 IAMakeOrderedStorableSet(IAOrderedStorable*)
PUBLIC 210bc 0 BTree::BTree(IAOrderedStorable*, unsigned long)
PUBLIC 21178 0 IAStruct::operator new(unsigned long)
PUBLIC 21182 0 IAStorage::GetNamedBlock(char const*)
PUBLIC 211be 0 BuddyStorage::TOC_Get(char const*)
PUBLIC 21232 0 TPropertyStream::IsOpen()
PUBLIC 2123c 0 StringUInt32Map::Get(char const*)
PUBLIC 2126a 0 SkipList::Get(void*, void*)
PUBLIC 212e4 0 StringSet::LessThan(void*, void*)
PUBLIC 21306 0 StringSet::Equal(void*, void*)
PUBLIC 2132c 0 BTree::Open(IAStorage*, unsigned long, bool, bool)
PUBLIC 21586 0 TPropertyStream::IsWritable()
PUBLIC 21590 0 IAInputBlock::IAInputBlock(IAStorage*, unsigned long, IAStoreStream*)
PUBLIC 2159a 0 IAInputBlock::IAInputBlock(IAStorage*, unsigned long, IAStoreStream*)
PUBLIC 215fc 0 BuddyStorage::GetReadAddress(unsigned long)
PUBLIC 216fc 0 BuddyStorage::GetBlockSize(unsigned long)
PUBLIC 21726 0 BTHeader::Restore(IAInputBlock*)
PUBLIC 2177c 0 IAInputBlock::~IAInputBlock()
PUBLIC 21783 0 ReadPage(unsigned long, IAStorage*, IAStoreStream*, IAOrderedStorable*)
PUBLIC 218ca 0 Page::ReadEntries(IAInputBlock*, IAOrderedStorable*)
PUBLIC 2193a 0 SkipList::FingerStart(void**)
PUBLIC 2195e 0 Leaf::EntryRestore(PageEntry*, IAOrderedStorable*, IAInputBlock*)
PUBLIC 219ba 0 TPropertyInfo::Restore(IAInputBlock*) const
PUBLIC 220ec 0 IAStoreStream::ReadBufferOfUInt16(void*, unsigned long)
PUBLIC 2211c 0 IAStoreStream::ReadUInt16()
PUBLIC 22172 0 TPropertyValue::TPropertyValue(unsigned long, unsigned char*)
PUBLIC 22198 0 BTree::MakeIterator()
PUBLIC 221e0 0 BTreeIterator::BTreeIterator(BTree*)
PUBLIC 22238 0 BTreeIterator::BuildStack(IAOrderedStorable const*)
PUBLIC 222aa 0 BTreeIterator::PushForward(Page*)
PUBLIC 2232a 0 TPropertyInfo::DeepCopy() const
PUBLIC 22372 0 TPropertyInfo::TPropertyInfo(TPropertyInfo const&)
PUBLIC 22414 0 BTreeIterator::Next()
PUBLIC 224b8 0 BTreeIterator::Increment()
PUBLIC 2255a 0 std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> >::push_back(TPropertyInfo* const&)
PUBLIC 22596 0 std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >, TPropertyInfo* const&)
PUBLIC 226d4 0 BTreeIterator::PopForward()
PUBLIC 22730 0 IteratorFrame::~IteratorFrame()
PUBLIC 22790 0 IAStruct::~IAStruct()
PUBLIC 227a9 0 IAStruct::operator delete(void*)
PUBLIC 227b2 0 IAFree(void*)
PUBLIC 227c4 0 BTreeIterator::~BTreeIterator()
PUBLIC 22874 0 IAOrderedStorableIterator::~IAOrderedStorableIterator()
PUBLIC 22894 0 IAObject::~IAObject()
PUBLIC 228b4 0 BTree::~BTree()
PUBLIC 22972 0 TPropertyInfo::~TPropertyInfo()
PUBLIC 229e4 0 IAOrderedStorable::~IAOrderedStorable()
PUBLIC 22a04 0 IAStorable::~IAStorable()
PUBLIC 22a24 0 Leaf::~Leaf()
PUBLIC 22a5c 0 Page::~Page()
PUBLIC 22ac2 0 SkipList::~SkipList()
PUBLIC 22b30 0 SkipList::Pop(void*)
PUBLIC 22bfe 0 IAFreeSized(void*, unsigned long)
PUBLIC 22c10 0 Scroll::~Scroll()
PUBLIC 22c8c 0 IAOrderedStorableSet::~IAOrderedStorableSet()
PUBLIC 22cac 0 BuddyStorage::~BuddyStorage()
PUBLIC 22d68 0 BuddyStorage::FreeChunks(unsigned long**)
PUBLIC 22db8 0 UInt32Set::~UInt32Set()
PUBLIC 22df0 0 StringUInt32Map::~StringUInt32Map()
PUBLIC 22e28 0 StringSet::~StringSet()
PUBLIC 22e8a 0 IAStorage::~IAStorage()
PUBLIC 22ee2 0 TPropertyStream::~TPropertyStream()
PUBLIC 22f28 0 IAStoreStream::~IAStoreStream()
PUBLIC 22f84 0 TPropertyInfoList::AddPtrReference()
PUBLIC 22fa0 0 TPropertyInfo::Find(TCountedPtr<TPropertyInfoList> const&, TPropertyInfo const&)
PUBLIC 23078 0 TPropertyInfo::Equal(TPropertyInfo const&) const
PUBLIC 230b8 0 TPropertyInfoList::RemovePtrReference()
PUBLIC 230f2 0 TPropertyInfo::~TPropertyInfo()
PUBLIC 230fc 0 TPropertyInfo::~TPropertyInfo()
PUBLIC 23166 0 +[FINode nodeFromNodeRef:]
PUBLIC 2316f 0 -[FINode retain]
PUBLIC 2318a 0 TNode::FSNotificationsSupported()
PUBLIC 2321a 0 TFSInfo::FNSubscribe(void (*)(unsigned long, unsigned long, void*, OpaqueFNSubscriptionRef*), void*, unsigned long, OpaqueFNSubscriptionRef**) const
PUBLIC 23254 0 GetNodeParent
PUBLIC 23260 0 NodeCopyParentNode
PUBLIC 23430 0 TFSInfo::GetVolumeParent(TCountedPtr<TFSInfo>&) const
PUBLIC 235f8 0 TFSInfoSynchronizer::TFSInfoSynchronizer(TCountedPtr<TFSInfo> const&)
PUBLIC 23602 0 TFSInfoSynchronizer::TFSInfoSynchronizer(TCountedPtr<TFSInfo> const&)
PUBLIC 23670 0 TFSInfoSynchronizer::FetchChildren()
PUBLIC 23a4e 0 TFSIterator::TFSIterator(TCountedPtr<TFSInfo> const&, unsigned long, unsigned long)
PUBLIC 23a58 0 TFSIterator::TFSIterator(TCountedPtr<TFSInfo> const&, unsigned long, unsigned long)
PUBLIC 23b62 0 TFSIterator::Next(TCountedPtr<TFSInfo>&)
PUBLIC 23b86 0 TFSIterator::First(TCountedPtr<TFSInfo>&)
PUBLIC 23bbe 0 TFSIterator::Reset()
PUBLIC 23c2e 0 TFSIterator::NextSingle(TCountedPtr<TFSInfo>&)
PUBLIC 23f06 0 TFSVolumeInfo::SynchingCanceled() const
PUBLIC 23f16 0 std::vector<TCountedPtr<TFSInfo>, std::allocator<TCountedPtr<TFSInfo> > >::push_back(TCountedPtr<TFSInfo> const&)
PUBLIC 23f68 0 std::vector<TCountedPtr<TFSInfo>, std::allocator<TCountedPtr<TFSInfo> > >::_M_insert_aux(__gnu_cxx::__normal_iterator<TCountedPtr<TFSInfo>*, std::vector<TCountedPtr<TFSInfo>, std::allocator<TCountedPtr<TFSInfo> > > >, TCountedPtr<TFSInfo> const&)
PUBLIC 24175 0 TCountedPtr<TFSInfo>* std::__uninitialized_copy_aux<TCountedPtr<TFSInfo>*, TCountedPtr<TFSInfo>*>(TCountedPtr<TFSInfo>*, TCountedPtr<TFSInfo>*, TCountedPtr<TFSInfo>*, std::__false_type)
PUBLIC 241f6 0 TFSInfo::GetType(TPropertyReference&, unsigned long) const
PUBLIC 2422a 0 TFSIterator::~TFSIterator()
PUBLIC 24234 0 TPropertyReference::SetValue(unsigned long const&)
PUBLIC 24258 0 TFSIterator::~TFSIterator()
PUBLIC 242de 0 TFSInfoSynchronizer::Next()
PUBLIC 24340 0 TFSInfo::GetLSSharedFileListRef() const
PUBLIC 24386 0 TNode::RemoveUnmarkedChildren(TNodeEventPtrSet&)
PUBLIC 244ce 0 std::set<TCountedPtr<TNodeEvent>, std::less<TCountedPtr<TNodeEvent> >, std::allocator<TCountedPtr<TNodeEvent> > >::insert(TCountedPtr<TNodeEvent> const&)
PUBLIC 2450a 0 std::_Rb_tree<TCountedPtr<TNodeEvent>, TCountedPtr<TNodeEvent>, std::_Identity<TCountedPtr<TNodeEvent> >, std::less<TCountedPtr<TNodeEvent> >, std::allocator<TCountedPtr<TNodeEvent> > >::_M_insert_unique(TCountedPtr<TNodeEvent> const&)
PUBLIC 24596 0 std::_Rb_tree<TCountedPtr<TNodeEvent>, TCountedPtr<TNodeEvent>, std::_Identity<TCountedPtr<TNodeEvent> >, std::less<TCountedPtr<TNodeEvent> >, std::allocator<TCountedPtr<TNodeEvent> > >::_M_insert(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, TCountedPtr<TNodeEvent> const&)
PUBLIC 2460a 0 std::_Rb_tree<TCountedPtr<TNodeEvent>, TCountedPtr<TNodeEvent>, std::_Identity<TCountedPtr<TNodeEvent> >, std::less<TCountedPtr<TNodeEvent> >, std::allocator<TCountedPtr<TNodeEvent> > >::_M_create_node(TCountedPtr<TNodeEvent> const&)
PUBLIC 246a0 0 TChildrenList::SetLastSyncTime(double)
PUBLIC 246ae 0 TChildrenList::SetLastSyncDuration(double)
PUBLIC 246bc 0 std::vector<TNodePtr, std::allocator<TNodePtr> >::~vector()
PUBLIC 24702 0 std::_Vector_base<TNodePtr, std::allocator<TNodePtr> >::~_Vector_base()
PUBLIC 2471a 0 std::vector<std::pair<TNodePtr, TCountedPtr<TFSInfo> >, std::allocator<std::pair<TNodePtr, TCountedPtr<TFSInfo> > > >::~vector()
PUBLIC 24760 0 std::_Vector_base<std::pair<TNodePtr, TCountedPtr<TFSInfo> >, std::allocator<std::pair<TNodePtr, TCountedPtr<TFSInfo> > > >::~_Vector_base()
PUBLIC 24778 0 TFSInfoSynchronizer::~TFSInfoSynchronizer()
PUBLIC 24782 0 TFSInfoSynchronizer::~TFSInfoSynchronizer()
PUBLIC 247c4 0 std::vector<TCountedPtr<TFSInfo>, std::allocator<TCountedPtr<TFSInfo> > >::~vector()
PUBLIC 24810 0 std::_Vector_base<TCountedPtr<TFSInfo>, std::allocator<TCountedPtr<TFSInfo> > >::~_Vector_base()
PUBLIC 24828 0 TNode::LogNotification(unsigned long, TNodePtr const&, unsigned long)
PUBLIC 2482e 0 std::_Rb_tree<TCountedPtr<TNodeEvent>, TCountedPtr<TNodeEvent>, std::_Identity<TCountedPtr<TNodeEvent> >, std::less<TCountedPtr<TNodeEvent> >, std::allocator<TCountedPtr<TNodeEvent> > >::_M_destroy_node(std::_Rb_tree_node<TCountedPtr<TNodeEvent> >*)
PUBLIC 2485e 0 TNode::GetDevicesNode()
PUBLIC 24a3e 0 TNode::GetPlacesNode()
PUBLIC 24c1e 0 TNode::GetDevicesFileList()
PUBLIC 24cf8 0 TNode::GetSavedSearchesNode()
PUBLIC 24ed8 0 TNode::GetPlacesFileList()
PUBLIC 24fb2 0 TNode::GetSavedSearchesFileList()
PUBLIC 2508c 0 TFSInfo::GetNWBrowserRef() const
PUBLIC 250c4 0 TFSInfo::SetPlacesListRef(OpaqueLSSharedFileListRef*)
PUBLIC 2510c 0 TFSInfo::SetSavedSearchesListRef(OpaqueLSSharedFileListRef*)
PUBLIC 25154 0 TFSInfo::SetDevicesListRef(OpaqueLSSharedFileListRef*)
PUBLIC 2519c 0 TNode::GetNWNodeMap(__NWBrowser*)
PUBLIC 25378 0 TFSInfo::Initialize(unsigned long, OpaqueLSSharedFileListItemRef*)
PUBLIC 25702 0 TFileListItem::TFileListItem(OpaqueLSSharedFileListItemRef*)
PUBLIC 2588e 0 TFileListItem::CopyAliasHandle(OpaqueLSSharedFileListItemRef*)
PUBLIC 25904 0 TFSInfo::CopyAliasInfo(AliasRecord**, TUString&, unsigned long&, FSExtendedAliasInfo&)
PUBLIC 259aa 0 TFileListItem::RemovePtrReference()
PUBLIC 259e0 0 TFSCatalogInfo::SetIsAlias(bool)
PUBLIC 25a02 0 TFSInfo::SetIndex(long)
PUBLIC 25a3e 0 TFSCatalogInfo::SetParentDirID(unsigned long)
PUBLIC 25a4c 0 std::vector<TNodePtr, std::allocator<TNodePtr> >::push_back(TNodePtr const&)
PUBLIC 25a9a 0 std::vector<TNodePtr, std::allocator<TNodePtr> >::_M_insert_aux(__gnu_cxx::__normal_iterator<TNodePtr*, std::vector<TNodePtr, std::allocator<TNodePtr> > >, TNodePtr const&)
PUBLIC 25c7c 0 TNodePtr* std::__uninitialized_copy_aux<TNodePtr*, TNodePtr*>(TNodePtr*, TNodePtr*, TNodePtr*, std::__false_type)
PUBLIC 25cf2 0 TNode::ResolveSharedFileListAliasIfNeeded()
PUBLIC 2610a 0 TFSInfo::GetLSAliasHandle() const
PUBLIC 2616c 0 TFileListItem::GetAliasHandle() const
PUBLIC 26194 0 TNode::IsPublishedFolder() const
PUBLIC 26278 0 TNode::FindVirtualProxyIn(TNodePtr const&, TNodePtr&, unsigned long&) const
PUBLIC 2655c 0 TFSInfo::MatchAlias(AliasRecord**, bool, TCountedPtr<TFSInfo>&)
PUBLIC 26610 0 TNode::IsDesktop() const
PUBLIC 266c8 0 TNode::GetSpecialNode(unsigned long, OpaqueNodeRequest* const&, unsigned long)
PUBLIC 2671a 0 TFileListItem::SetAliasHandle(AliasRecord**)
PUBLIC 26786 0 std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >::insert(unsigned long const&)
PUBLIC 267c2 0 std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, std::less<unsigned long>, std::allocator<unsigned long> >::_M_insert_unique(unsigned long const&)
PUBLIC 2684e 0 std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, std::less<unsigned long>, std::allocator<unsigned long> >::_M_insert(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, unsigned long const&)
PUBLIC 268c2 0 std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, std::less<unsigned long>, std::allocator<unsigned long> >::_M_create_node(unsigned long const&)
PUBLIC 2691a 0 TFSInfo::GetIndex() const
PUBLIC 26952 0 std::pair<TNodePtr, TCountedPtr<TFSInfo> >::pair(TNodePtr const&, TCountedPtr<TFSInfo> const&)
PUBLIC 269a0 0 std::vector<std::pair<TNodePtr, TCountedPtr<TFSInfo> >, std::allocator<std::pair<TNodePtr, TCountedPtr<TFSInfo> > > >::push_back(std::pair<TNodePtr, TCountedPtr<TFSInfo> > const&)
PUBLIC 269ee 0 std::vector<std::pair<TNodePtr, TCountedPtr<TFSInfo> >, std::allocator<std::pair<TNodePtr, TCountedPtr<TFSInfo> > > >::_M_insert_aux(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TCountedPtr<TFSInfo> >*, std::vector<std::pair<TNodePtr, TCountedPtr<TFSInfo> >, std::allocator<std::pair<TNodePtr, TCountedPtr<TFSInfo> > > > >, std::pair<TNodePtr, TCountedPtr<TFSInfo> > const&)
PUBLIC 26bd0 0 std::pair<TNodePtr, TCountedPtr<TFSInfo> >* std::__uninitialized_copy_aux<std::pair<TNodePtr, TCountedPtr<TFSInfo> >*, std::pair<TNodePtr, TCountedPtr<TFSInfo> >*>(std::pair<TNodePtr, TCountedPtr<TFSInfo> >*, std::pair<TNodePtr, TCountedPtr<TFSInfo> >*, std::pair<TNodePtr, TCountedPtr<TFSInfo> >*, std::__false_type)
PUBLIC 26c46 0 std::pair<TNodePtr, TCountedPtr<TFSInfo> >::pair(std::pair<TNodePtr, TCountedPtr<TFSInfo> > const&)
PUBLIC 26c92 0 std::pair<TNodePtr, TCountedPtr<TFSInfo> >::~pair()
PUBLIC 26cd4 0 TFSInfo::SynchronizeIcons(TCountedPtr<TFSInfo> const&, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >&)
PUBLIC 26d58 0 TFSInfo::CopyIconRef(unsigned long, OpaqueIconRef*&) const
PUBLIC 2710a 0 TFSInfo::InitializeIfQueryHit() const
PUBLIC 27244 0 TFileListItem::~TFileListItem()
PUBLIC 27278 0 NodeSync
PUBLIC 272f2 0 TClientChangeNotifier::HandleEvents(void*)
PUBLIC 2730a 0 NodeEventBlockUntilNextEventNew
PUBLIC 27329 0 NodeEventGetNextEvent
PUBLIC 2748a 0 TNodeEvent::GetMonitor() const
PUBLIC 274f5 0 NodeEventCopyEvent
PUBLIC 27513 0 NodeEventGetParent
PUBLIC 2751e 0 NodeEventCopyRegistrationParent
PUBLIC 2764d 0 NodeEventGetChild
PUBLIC 27659 0 NodeEventCopyNode
PUBLIC 276f1 0 NodeEventGetKind
PUBLIC 27741 0 NodeEventGetClientRef
PUBLIC 2774d 0 NodeEventGetContextInfo
PUBLIC 2784e 0 NodeEventGetProperty
PUBLIC 278bc 0 NodeEventGetStatus
PUBLIC 2791e 0 TNodeEvent::GetStatus() const
PUBLIC 27950 0 NodeEventRelease
PUBLIC 279ba 0 TIndexComparator::operator()(std::pair<TNodePtr, TPropertyStore> const&, std::pair<TNodePtr, TPropertyStore> const&) const
PUBLIC 27a96 0 TNode::IsNetworkRemoteDisk() const
PUBLIC 27ae0 0 GetNodePropertyAsBoolean
PUBLIC 27b64 0 TFSInfo::IsHiddenInSidebar(TPropertyReference&, unsigned long) const
PUBLIC 27bd8 0 TPropertyReference::SetValue(bool)
PUBLIC 27bf8 0 TNode::IsNetworkMounted() const
PUBLIC 27c44 0 TFSInfo::IsNetworkMounted() const
PUBLIC 27c6c 0 TNode::GetiDiskNode(unsigned long, long&)
PUBLIC 27e5b 0 NodeIsComputer
PUBLIC 27e9f 0 NodeFindVirtualChild
PUBLIC 27fd4 0 TNotifier::HandleDeferredTickle(__CFRunLoopTimer*, void*)
PUBLIC 280a4 0 NotifierReleaseCallBack(void const*)
PUBLIC 280fe 0 NodeIteratorSize
PUBLIC 2811c 0 _NodeIconIsFetched
PUBLIC 2817a 0 TNode::IsApplication() const
PUBLIC 281de 0 TFSInfo::IsApplication() const
PUBLIC 2822e 0 TFSInfo::QueryIsApplication() const
PUBLIC 28242 0 TNode::HasCustomIcon() const
PUBLIC 28291 0 NodeUnregisterChangeNotification
PUBLIC 28368 0 GetNodeAsURL
PUBLIC 2838a 0 TNode::UnregisterChangeNotification(TCountedPtr<TClientChangeNotifier> const&, unsigned long, bool)
PUBLIC 28940 0 NodeCopyAsURL
PUBLIC 28a62 0 TNode::CopyURL(__CFURL const*&) const
PUBLIC 28bea 0 TChildrenList::DecrementRegisteredChildrenCount()
PUBLIC 28bf8 0 std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::erase(__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier>*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >)
PUBLIC 28c46 0 TCountedPtr<TNotifier>* std::__copy<false, std::random_access_iterator_tag>::copy<TCountedPtr<TNotifier>*, TCountedPtr<TNotifier>*>(TCountedPtr<TNotifier>*, TCountedPtr<TNotifier>*, TCountedPtr<TNotifier>*)
PUBLIC 28c81 0 NodeDisposeNotifier
PUBLIC 28ce0 0 NodeGetPropertyAsIconRef
PUBLIC 28d26 0 TNode::GetIconProperty(unsigned long, TPropertyReference&, unsigned long) const
PUBLIC 28dd8 0 TNode::CopyIconRef(unsigned long, OpaqueIconRef*&, bool) const
PUBLIC 28fe2 0 TFSInfo::SetIconRefFromFSInfo(TCountedPtr<TFSInfo> const&)
PUBLIC 29018 0 TPropertyReference::SetValue(OpaqueIconRef*)
PUBLIC 29048 0 _NodeCopyValuesForSortRecordArray
PUBLIC 2969a 0 NodeGetPropertyAsData
PUBLIC 29704 0 TPropertyInfo::GetProperty(TPropertyReference&) const
PUBLIC 2971c 0 TPropertyReference::SetValue(TPropertyValue const&)
PUBLIC 29a38 0 NodeGetPropertyAsString
PUBLIC 29aa8 0 TFSInfo::GetTypeIdentifierString(TPropertyReference&, unsigned long) const
PUBLIC 29b10 0 TFSInfo::GetTypeIdentifierString(TUString&, unsigned long) const
PUBLIC 29bfe 0 TFSInfo::GetKindStrings(unsigned long) const
PUBLIC 2a143 0 -[FINode nodeRef]
PUBLIC 2a14b 0 GetNodePropertyAsInt16
PUBLIC 2a1c6 0 TFSInfo::GetLabel(TPropertyReference&, unsigned long) const
PUBLIC 2a1e8 0 TPropertyReference::SetValue(short)
PUBLIC 2a208 0 TFSInfo::GetDisplayName(TPropertyReference&, unsigned long) const
PUBLIC 2a22e 0 TPropertyReference::SetValue(TUString const&)
PUBLIC 2a2fa 0 TKindData::TKindData()
PUBLIC 2a372 0 TKindData::RemovePtrReference()
PUBLIC 2a3a9 0 -[FINode release]
PUBLIC 2a3b3 0 NetworkRefreshCallback(__NWBrowser*, __NWNode*, __CFString const*, unsigned long, NWBrowserError, void*)
PUBLIC 2a5ea 0 TNode::IsFinalizing()
PUBLIC 2a5fc 0 TNWNode::AddPtrReference()
PUBLIC 2a610 0 TNode::ClearInitialPopulationDeferred()
PUBLIC 2a636 0 TFSInfo::SynchronizeNetwork(TCountedPtr<TFSInfo> const&, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >&)
PUBLIC 2a900 0 TNWNode::~TNWNode()
PUBLIC 2a965 0 std::pair<TNodePtr, TPropertyStore>* std::__copy_backward<false, std::random_access_iterator_tag>::__copy_b<std::pair<TNodePtr, TPropertyStore>*, std::pair<TNodePtr, TPropertyStore>*>(std::pair<TNodePtr, TPropertyStore>*, std::pair<TNodePtr, TPropertyStore>*, std::pair<TNodePtr, TPropertyStore>*)
PUBLIC 2a9c6 0 TFSInfo::SynchronizeKinds(TCountedPtr<TFSInfo> const&, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >&)
PUBLIC 2abb2 0 TFSInfo::GetKindString(TUString&, unsigned long) const
PUBLIC 2ad0e 0 TFSInfo::GetKindWithoutPlatformString(TUString&, unsigned long) const
PUBLIC 2ae0e 0 TKindData::~TKindData()
PUBLIC 2ae6e 0 THFSPlusPropertyStore::CreateUniqueNameList()
PUBLIC 2af96 0 BuddyStorage::Initialize()
PUBLIC 2b084 0 TPropertyStream::Initialize()
PUBLIC 2b08a 0 BuddyStorage::AllocAddress(unsigned char)
PUBLIC 2b0d2 0 BuddyStorage::newAddress(unsigned char)
PUBLIC 2b192 0 BuddyStorage::Allocate()
PUBLIC 2b232 0 BuddyStorage::newInfo()
PUBLIC 2b35c 0 BuddyStorage::Commit()
PUBLIC 2b5d2 0 BuddyStorage::FreeAddressesSize()
PUBLIC 2b756 0 IADeletePointerArrayOnUnwind::IADeletePointerArrayOnUnwind(IAObject**, unsigned long)
PUBLIC 2b76a 0 IADeletePointerArrayOnUnwind::~IADeletePointerArrayOnUnwind()
PUBLIC 2b774 0 IADeletePointerArrayOnUnwind::~IADeletePointerArrayOnUnwind()
PUBLIC 2b7b8 0 BuddyStorage::GetWriteAddressInternal(unsigned long, unsigned long)
PUBLIC 2b9ce 0 BuddyStorage::FreeAddress(unsigned long, unsigned char)
PUBLIC 2babe 0 BuddyStorage::FreenewFreeAddress()
PUBLIC 2bb16 0 IAStoreStream::WriteUInt32(unsigned long)
PUBLIC 2bbbc 0 IAStoreStream::WritePastEndOfBuffer(unsigned char)
PUBLIC 2bc20 0 BuddyStorage::BlockInfoWrite(IAStoreStream*)
PUBLIC 2bc98 0 BuddyStorage::TOCWrite(IAStoreStream*)
PUBLIC 2bd9a 0 BuddyStorage::FreeAddressesWrite(IAStoreStream*)
PUBLIC 2be0e 0 TPropertyStream::Flush()
PUBLIC 2be18 0 TPropertyStream::Write(unsigned long, unsigned char const*, unsigned long)
PUBLIC 2bef4 0 TPropertyStream::WriteData(unsigned char const*, long)
PUBLIC 2bf6c 0 IAStorage::AllocateNamedBlock(char const*)
PUBLIC 2bff4 0 BuddyStorage::TOC_Set(char const*, unsigned long)
PUBLIC 2c074 0 BTree::Initialize(IAStorage*, unsigned long, bool)
PUBLIC 2c134 0 BTree::newPage(bool)
PUBLIC 2c208 0 BTree::Flush()
PUBLIC 2c2f2 0 Page::Write(IAStorage*, IAStoreStream*)
PUBLIC 2c43e 0 IAOutputBlock::IAOutputBlock(IAStorage*, unsigned long, unsigned long, IAStoreStream*)
PUBLIC 2c448 0 IAOutputBlock::IAOutputBlock(IAStorage*, unsigned long, unsigned long, IAStoreStream*)
PUBLIC 2c4b0 0 BuddyStorage::GetWriteAddress(unsigned long, unsigned long)
PUBLIC 2c522 0 IAOutputBlock::~IAOutputBlock()
PUBLIC 2c534 0 BTHeader::Store(IAOutputBlock*) const
PUBLIC 2c59c 0 std::_Rb_tree<TUString, TUString, std::_Identity<TUString>, TUStringCompare, std::allocator<TUString> >::_M_erase(std::_Rb_tree_node<TUString>*)
PUBLIC 2c5da 0 TNodeEvent::HandleInternalEvent(OpaqueEventQueue*)
PUBLIC 2c884 0 TNode::GetAliasTarget() const
PUBLIC 2c8aa 0 TPropertyValue::TPropertyValue(unsigned long const&)
PUBLIC 2c8c6 0 TNode::HandlePropertyChanged(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 2cada 0 TPropertyReference::AsOSType(unsigned long&) const
PUBLIC 2cafc 0 TPropertyValue::TPropertyValue(unsigned long, unsigned short*)
PUBLIC 2cb22 0 std::set<TUString, TUStringCompare, std::allocator<TUString> >::insert(TUString const&)
PUBLIC 2cb5e 0 std::_Rb_tree<TUString, TUString, std::_Identity<TUString>, TUStringCompare, std::allocator<TUString> >::_M_insert_unique(TUString const&)
PUBLIC 2cc2e 0 std::_Rb_tree<TUString, TUString, std::_Identity<TUString>, TUStringCompare, std::allocator<TUString> >::_M_insert(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, TUString const&)
PUBLIC 2ccb0 0 std::_Rb_tree<TUString, TUString, std::_Identity<TUString>, TUStringCompare, std::allocator<TUString> >::_M_create_node(TUString const&)
PUBLIC 2cd44 0 std::_Rb_tree<TUString, TUString, std::_Identity<TUString>, TUStringCompare, std::allocator<TUString> >::_M_destroy_node(std::_Rb_tree_node<TUString>*)
PUBLIC 2cd70 0 NodeSetPropertyAsData
PUBLIC 2cdb4 0 SetNodeProperty(OpaqueNodeRef*, unsigned long, TPropertyReference const&, OpaqueNodeRequest*)
PUBLIC 2ce84 0 TNode::SetProperty(unsigned long, TPropertyReference const&, OpaqueNodeRequest* const&)
PUBLIC 2d13e 0 TFSInfo::SetProperty(unsigned long, TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 2d19e 0 TNode::SetExtendedProperty(unsigned long, TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >&)
PUBLIC 2d392 0 THFSPlusPropertyStore::SetProperty(TUString const&, unsigned long, TPropertyReference const&)
PUBLIC 2d548 0 TPropertyInfo::TPropertyInfo(TUString const&, unsigned long, TPropertyReference const&)
PUBLIC 2d552 0 TPropertyInfo::TPropertyInfo(TUString const&, unsigned long, TPropertyReference const&)
PUBLIC 2d648 0 TPropertyValue::TPropertyValue(TPropertyReference const&)
PUBLIC 2d652 0 TPropertyValue::TPropertyValue(TPropertyReference const&)
PUBLIC 2d7aa 0 TPropertyInfo::EqualValue(TPropertyInfo const&) const
PUBLIC 2d806 0 TPropertyInfo::operator=(TPropertyInfo const&)
PUBLIC 2d852 0 TFSInfo::SetMDAttributeIfAppropriate(unsigned long, TPropertyReference const&)
PUBLIC 2d8e4 0 TNode::HandleFlushVolumes(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 2d942 0 TFSVolumeInfo::FlushVolumes(bool)
PUBLIC 2dad0 0 TNode::SendNotifications(std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> > const&) const
PUBLIC 2db28 0 TFSVolumeInfo::CopyDirtyStores(bool, std::vector<TCountedPtr<THFSPlusPropertyStore>, std::allocator<TCountedPtr<THFSPlusPropertyStore> > >*)
PUBLIC 2ddc4 0 TFSVolumeInfo::ShouldWriteNetworkPropertyStores()
PUBLIC 2de66 0 THFSPlusPropertyStore::SetClean()
PUBLIC 2dea0 0 THFSPlusPropertyStore::THFSPlusPropertyStore(THFSPlusPropertyStore const&)
PUBLIC 2deaa 0 THFSPlusPropertyStore::THFSPlusPropertyStore(THFSPlusPropertyStore const&)
PUBLIC 2e0c0 0 TCountedPtr<TPropertyInfoList>::operator=(TCountedPtr<TPropertyInfoList> const&)
PUBLIC 2e0fe 0 TPropertyInfo::TPropertyInfo(TPropertyInfo const&)
PUBLIC 2e108 0 std::vector<TCountedPtr<THFSPlusPropertyStore>, std::allocator<TCountedPtr<THFSPlusPropertyStore> > >::push_back(TCountedPtr<THFSPlusPropertyStore> const&)
PUBLIC 2e15a 0 std::vector<TCountedPtr<THFSPlusPropertyStore>, std::allocator<TCountedPtr<THFSPlusPropertyStore> > >::_M_insert_aux(__gnu_cxx::__normal_iterator<TCountedPtr<THFSPlusPropertyStore>*, std::vector<TCountedPtr<THFSPlusPropertyStore>, std::allocator<TCountedPtr<THFSPlusPropertyStore> > > >, TCountedPtr<THFSPlusPropertyStore> const&)
PUBLIC 2e369 0 TCountedPtr<THFSPlusPropertyStore>* std::__uninitialized_copy_aux<TCountedPtr<THFSPlusPropertyStore>*, TCountedPtr<THFSPlusPropertyStore>*>(TCountedPtr<THFSPlusPropertyStore>*, TCountedPtr<THFSPlusPropertyStore>*, TCountedPtr<THFSPlusPropertyStore>*, std::__false_type)
PUBLIC 2e3ea 0 THFSPlusPropertyStore::FlushChanges()
PUBLIC 2e55e 0 THFSPlusPropertyStore::HasPersistentStore() const
PUBLIC 2e5b6 0 TPropertyInfo::FlushChanges(TCountedPtr<TCFURLInfo> const&, TCountedPtr<TPropertyInfoList> const&, bool)
PUBLIC 2e690 0 TPropertyInfo::FlushChanges(TCountedPtr<TFSInfo> const&, TCountedPtr<TPropertyInfoList> const&, bool)
PUBLIC 2eb3e 0 TFSInfo::SafeOpen(short&)
PUBLIC 2eb7e 0 BTree::Put(IAOrderedStorable*)
PUBLIC 2ec18 0 TPropertyInfo::StoreSize() const
PUBLIC 2ecc8 0 BTree::PutInternal(Page*, Page*, PageEntry*, IAOrderedStorable*, unsigned long)
PUBLIC 2ee1a 0 Page::SetFinger(void*, void**)
PUBLIC 2eeb0 0 BTree::InsertObject(Page*, void**, IAOrderedStorable*)
PUBLIC 2eef4 0 Page::InsertEntryAtFinger(PageEntry*, void**)
PUBLIC 2ef42 0 Leaf::EntryStoreSize(PageEntry*)
PUBLIC 2ef4e 0 BTree::Rebalance(Page*, Page*, PageEntry*, unsigned long)
PUBLIC 2efc2 0 BTree::RebalanceRoot()
PUBLIC 2f00e 0 TPropertyInfo::LessThan(IAOrderedStorable const*) const
PUBLIC 2f064 0 UInt32Set::Equal(void*, void*)
PUBLIC 2f07a 0 SkipList::Remove(void*, void*)
PUBLIC 2f104 0 SkipList::RemoveNode(void*, void**)
PUBLIC 2f1a6 0 BuddyStorage::AddAddress(unsigned long, unsigned char, UInt32Set**)
PUBLIC 2f222 0 Leaf::EntryStore(PageEntry*, IAOutputBlock*)
PUBLIC 2f23c 0 TPropertyInfo::Store(IAOutputBlock*) const
PUBLIC 2f608 0 IAStoreStream::WriteBufferOfUInt16(void const*, unsigned long)
PUBLIC 2f63c 0 IAStoreStream::WriteUInt16(unsigned short)
PUBLIC 2f6a2 0 IAStoreStream::WriteBytes(void const*, unsigned long)
PUBLIC 2f6e8 0 TPropertyStream::SetLength(long)
PUBLIC 2f7fe 0 TFSInfo::WriteForkFromMark(short, unsigned long, void*, unsigned long*)
PUBLIC 2f85e 0 TCFURLInfo::Initialize(TCountedPtr<TCFURLInfo> const&, TUString const&, bool)
PUBLIC 2f9d2 0 TCFURLInfo::POSIXPath(unsigned long&) const
PUBLIC 2fb92 0 TChar::TChar(char const*)
PUBLIC 2fc00 0 TChar::RemovePtrReference()
PUBLIC 2fc3c 0 TCFURLInfo::CopyModificationDate() const
PUBLIC 2fc84 0 TCFURLInfo::~TCFURLInfo()
PUBLIC 2fd12 0 std::vector<TCountedPtr<THFSPlusPropertyStore>, std::allocator<TCountedPtr<THFSPlusPropertyStore> > >::~vector()
PUBLIC 2fd5e 0 THFSPlusPropertyStore::~THFSPlusPropertyStore()
PUBLIC 2fe00 0 TPropertyInfoList::~TPropertyInfoList()
PUBLIC 2fea6 0 std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> >::erase(__gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >, __gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >)
PUBLIC 2fef0 0 std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> >::~vector()
PUBLIC 2fefa 0 std::_Vector_base<TPropertyInfo*, std::allocator<TPropertyInfo*> >::~_Vector_base()
PUBLIC 2ff12 0 std::_Vector_base<TCountedPtr<THFSPlusPropertyStore>, std::allocator<TCountedPtr<THFSPlusPropertyStore> > >::~_Vector_base()
PUBLIC 2ff2c 0 TFSVolumeInfo::SetTimerToHandleFlushRequest(short, double)
PUBLIC 2ffd8 0 TVolumeSyncThread::ScheduleVolumeFlush(short, double)
PUBLIC 30102 0 TFSCatalogInfo::SetModificationDate(UTCDateTime)
PUBLIC 30140 0 __SetTimerToDispatchResizeRequest_block_invoke_1
PUBLIC 3016e 0 TNode::DispatchResizeRequestNow(TNodeTask*)
PUBLIC 3025e 0 TNode::GetVolume() const
PUBLIC 30411 0 __SetTimerToDispatchResizeRequest_block_invoke_2
PUBLIC 3043f 0 RemoveRequestPtrReference(TNodeTask*, TFolderSizingThread*)
PUBLIC 304b1 0 __ScheduleVolumeFlush_block_invoke_1
PUBLIC 30514 0 TFSVolumeInfo::HandleFlushRequest(short)
PUBLIC 305a4 0 TFSVolumeInfo::Flush(bool)
PUBLIC 3061e 0 GetFSRefAsNode
PUBLIC 30644 0 NodeCopyFromFSRef
PUBLIC 3093e 0 TFSInfo::GetOldViewStyle(TPropertyReference&, unsigned long) const
PUBLIC 309be 0 TNode::IsInTrash() const
PUBLIC 30ac4 0 TNode::GetTrashNode() const
PUBLIC 30bee 0 TChildrenList::GetTrash() const
PUBLIC 30c14 0 GetVirtualNode
PUBLIC 30c67 0 NodeGetPermissions
PUBLIC 30cde 0 TNode::UserCanWriteDataFork() const
PUBLIC 30d39 0 NodeGetPropertyAsInt64
PUBLIC 30d80 0 TFSInfo::GetFreeSpace(TPropertyReference&, unsigned long) const
PUBLIC 30e12 0 TFSVolumeInfo::GetFreeSpace() const
PUBLIC 30e40 0 TPropertyReference::SetValue(long long)
PUBLIC 30e68 0 TFSInfo::GetName(TPropertyReference&, unsigned long) const
PUBLIC 30eca 0 TFSInfo::CopyGenericIconRef(OpaqueIconRef*&) const
PUBLIC 310bd 0 EndsWithAppSuffix(TUString const&)
PUBLIC 31144 0 TFSInfo::HasExtension() const
PUBLIC 311ae 0 TNode::RequestTask(unsigned long, unsigned long, TPropertyValue const&, TCountedPtr<TNodeRequest> const&) const
PUBLIC 312f8 0 TNode::HandleFetchProperty(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 31384 0 TNode::UpdatePropertySynchronous(unsigned long, unsigned long)
PUBLIC 31bc0 0 NodeGetPropertyAsUTCDateTime
PUBLIC 31c06 0 TFSInfo::GetModificationDate(TPropertyReference&, unsigned long) const
PUBLIC 31c36 0 TPropertyReference::SetValue(UTCDateTime const&)
PUBLIC 31c62 0 TFSInfo::GetKindWithoutPlatformString(TPropertyReference&, unsigned long) const
PUBLIC 31cc8 0 GetNodePropertyAsIconRef
PUBLIC 31d42 0 TNWNode::TNWNode(TNWNode const&)
PUBLIC 31e7e 0 NodeIsVirtual
PUBLIC 31eb6 0 NodeCopyAliasHandle
PUBLIC 31f44 0 TNode::CopyAliasHandleTo(AliasRecord**&, OpaqueNodeRequest* const&)
PUBLIC 3207c 0 NodeRequestGetTask
PUBLIC 320f1 0 NodeCopyTask
PUBLIC 32152 0 TNode::HandleFetchAliasRecord(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 323da 0 TFSInfo::CopyAliasHandleTo(AliasRecord**&) const
PUBLIC 3240e 0 TPropertyValue::TPropertyValue(__CFData const*)
PUBLIC 32418 0 TPropertyValue::TPropertyValue(__CFData const*)
PUBLIC 32453 0 NodeDisposeTask
PUBLIC 324b1 0 NodeEventGetAliasHandle
PUBLIC 32526 0 TNodeEvent::GetAliasHandle() const
PUBLIC 32597 0 FavoritesCallback
PUBLIC 3267e 0 TPropertyValue::TPropertyValue(long long)
PUBLIC 326a6 0 TNode::HandleUnregisterForNotification(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 326d0 0 TPropertyReference::AsSInt64(long long&) const
PUBLIC 3270a 0 GetNodePropertyAsPoint
PUBLIC 32784 0 TFSInfo::GetOldLocation(TPropertyReference&, unsigned long) const
PUBLIC 327ea 0 TPropertyReference::SetValue(Point const&)
PUBLIC 3280c 0 std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> >::insert(__gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >, TPropertyInfo* const&)
PUBLIC 32868 0 TPropertyInfo** std::__copy_backward<true, std::random_access_iterator_tag>::__copy_b<TPropertyInfo*>(TPropertyInfo* const*, TPropertyInfo* const*, TPropertyInfo**)
PUBLIC 32898 0 TFSCatalogInfo::SetIsInvisible(bool)
PUBLIC 328b8 0 TFSCatalogInfo::SetMode(unsigned short)
PUBLIC 328c8 0 TFSInfo::CreateFile(TUString const&, TUniqueNamer*, unsigned long, TFSCatalogInfo const&, TCountedPtr<TFSInfo>&, bool) const
PUBLIC 32cd2 0 TNode::VolumeIsReadOnly() const
PUBLIC 32d0a 0 TFSInfo::IsLocked(TPropertyReference&, unsigned long) const
PUBLIC 32d2a 0 GetURLAsNode
PUBLIC 32d4d 0 CreatePropertyList
PUBLIC 32d5f 0 NodeNewPropertyList
PUBLIC 32da8 0 TPropertyMap::TPropertyMap()
PUBLIC 32e26 0 TPropertyMap::AddPtrReference()
PUBLIC 32e42 0 SetListPropertyAsStringNew
PUBLIC 32e7f 0 NodePropertyListSet(OpaquePropertyListRef*, unsigned long, TPropertyReference const&)
PUBLIC 32f16 0 TPropertyValue::TPropertyValue(TPropertyValue const&)
PUBLIC 32f44 0 CopyPropertyList
PUBLIC 32f7a 0 DisposePropertyList
PUBLIC 32f8c 0 TPropertyMap::RemovePtrReference()
PUBLIC 32fc6 0 NodeOperate
PUBLIC 330ca 0 TNodeOperationTask::CreateNewOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 33408 0 TOperation::GetFirstOperationRecordForIterator(OperationIterator*)
PUBLIC 334bc 0 TOperationRecord::TOperationRecord(OperationRecord*)
PUBLIC 334f6 0 TOperationRecord::AddPtrReference()
PUBLIC 3350a 0 TOperationRecord::GetRequestedOperation() const
PUBLIC 3351c 0 TCopyMoveOperation::TCopyMoveOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 3357c 0 TOperation::TOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 339ac 0 TNotificationList::TNotificationList()
PUBLIC 33a1e 0 TCountedPtr<TOperationRecord>::operator=(TCountedPtr<TOperationRecord> const&)
PUBLIC 33a5c 0 TOperationRecord::RemovePtrReference()
PUBLIC 33a8a 0 TOperation::AddPtrReference()
PUBLIC 33aa6 0 TCountedPtr<TOperation>::operator=(TCountedPtr<TOperation> const&)
PUBLIC 33ae4 0 TOperation::RemovePtrReference()
PUBLIC 33b18 0 TNode::Operate(TCountedPtr<TOperation>, OpaqueOperationRef**)
PUBLIC 33bb4 0 TOperation::GetRequestedOperation() const
PUBLIC 33bc2 0 TNodeOperationTask::TNodeOperationTask(TCountedPtr<TOperation> const&)
PUBLIC 33bce 0 TNodeOperationTask::TNodeOperationTask(TCountedPtr<TOperation> const&)
PUBLIC 33c6a 0 TTaskThread::TTaskThread(long (*)(void*))
PUBLIC 33c90 0 TNodeOperationTask::GetOperationRefList()
PUBLIC 33ce4 0 std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> >::push_back(OpaqueOperationRef* const&)
PUBLIC 33d20 0 std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<OpaqueOperationRef**, std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> > >, OpaqueOperationRef* const&)
PUBLIC 33e5e 0 TTaskThread::Run()
PUBLIC 33ea8 0 TNodeOperationTask::OperationTaskProc(void*)
PUBLIC 33ed0 0 TNodeOperationTask::OperationTaskProcedure()
PUBLIC 33fde 0 TNodeOperationTask::HandleOperation(TCountedPtr<TOperation> const&)
PUBLIC 34328 0 TCopyMoveOperation::LogOperationName(TCountedPtr<TOperationRecord> const&) const
PUBLIC 34384 0 TOperationTimer::TOperationTimer(char const*)
PUBLIC 3438e 0 TOperationTimer::TOperationTimer(char const*)
PUBLIC 3441a 0 TOperation::UpdateStatusStage(unsigned long)
PUBLIC 344ae 0 TCopyMoveOperation::TransformOperations()
PUBLIC 349a6 0 TOperation::ValidateOperations()
PUBLIC 34c46 0 TOperationRecord::GetSource() const
PUBLIC 34c72 0 TOperationRecord::SetOriginalSourceParent(TNodePtr const&)
PUBLIC 34c9a 0 TCopyMoveOperation::CheckDestination(TCountedPtr<TOperationRecord> const&)
PUBLIC 34e9e 0 TOperationRecord::GetDestination() const
PUBLIC 34eca 0 TOperationRecord::SetResolvedDestination(TNodePtr const&)
PUBLIC 34ef2 0 TNode::IsBackup() const
PUBLIC 34f3c 0 TOperation::IsMigration(TCountedPtr<TOperationRecord> const&) const
PUBLIC 3514c 0 TOperationRecord::GetOperationOptions() const
PUBLIC 3515e 0 TNode::IsBackupRoot() const
PUBLIC 351b4 0 TOperation::GetNextOperationRecordForIterator(OperationIterator*)
PUBLIC 35268 0 TOperationRecord::GetResolvedDestination() const
PUBLIC 35298 0 TOperationRecord::GetOriginalSourceParent() const
PUBLIC 352c8 0 TOperation::IncrementOperationCounts()
PUBLIC 35432 0 TCopyMoveOperation::AcquireDestinationLocks()
PUBLIC 356ce 0 TOperation::CanAuthenticate(TCountedPtr<TOperationRecord> const&)
PUBLIC 358de 0 TOperationRecord::NeedsAuthentication() const
PUBLIC 358fa 0 TNode::UserCanAddFiles() const
PUBLIC 35974 0 TFSInfo::UserCanAddFile() const
PUBLIC 35992 0 TNode::UserCanAddFolders() const
PUBLIC 35a0a 0 TFSInfo::UserCanAddFolder() const
PUBLIC 35a2a 0 TOperationRecord::SetNeedsAuthentication(bool)
PUBLIC 35a42 0 TOperation::AcquireChildWriteLock(TNodePtr const&)
PUBLIC 35e1e 0 TOperationLockMonitor::TOperationLockMonitor()
PUBLIC 35eba 0 TNode::ChildWriter() const
PUBLIC 35ed4 0 TNode::Writers() const
PUBLIC 35ee8 0 TNode::ChildWriters() const
PUBLIC 35efc 0 TNode::Writer() const
PUBLIC 35f16 0 TNode::Readers() const
PUBLIC 35f2a 0 TOperation::AddChildWriter(TNodePtr const&)
PUBLIC 35f96 0 TNode::AddChildWriter(TCountedPtr<TOperation> const&)
PUBLIC 35fbc 0 TNode::GetOperationLock()
PUBLIC 360a0 0 TOperationLockMonitor::TOperationLockMonitor()
PUBLIC 360aa 0 TOperationLockMonitor::~TOperationLockMonitor()
PUBLIC 360c8 0 TOperationLock::AddChildWriter(TCountedPtr<TOperation> const&)
PUBLIC 360f8 0 std::pair<TNodePtr, TNodePtr>::pair(TNodePtr const&, TNodePtr const&)
PUBLIC 36144 0 std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > >::push_back(std::pair<TNodePtr, TNodePtr> const&)
PUBLIC 36192 0 std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > >::_M_insert_aux(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TNodePtr>*, std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > > >, std::pair<TNodePtr, TNodePtr> const&)
PUBLIC 36374 0 std::pair<TNodePtr, TNodePtr>* std::__uninitialized_copy_aux<std::pair<TNodePtr, TNodePtr>*, std::pair<TNodePtr, TNodePtr>*>(std::pair<TNodePtr, TNodePtr>*, std::pair<TNodePtr, TNodePtr>*, std::pair<TNodePtr, TNodePtr>*, std::__false_type)
PUBLIC 363ea 0 std::pair<TNodePtr, TNodePtr>::pair(std::pair<TNodePtr, TNodePtr> const&)
PUBLIC 36436 0 TNode::IncrementReadersBelow()
PUBLIC 3644c 0 std::pair<TNodePtr, TNodePtr>::~pair()
PUBLIC 3648a 0 TOperation::AcquireSourceLocks()
PUBLIC 3665a 0 TCopyMoveOperation::AcquireSourceLock(TCountedPtr<TOperationRecord> const&)
PUBLIC 367d2 0 TOperation::AcquireReadLock(TNodePtr const&)
PUBLIC 36bf0 0 TNode::ReadersBelow() const
PUBLIC 36c04 0 TNode::IncrementReaders()
PUBLIC 36c1a 0 TOperation::ResolveConflicts()
PUBLIC 36dcc 0 TOperationRecord::GetResolution() const
PUBLIC 36de0 0 TCopyMoveOperation::ResolveConflict(TCountedPtr<TOperationRecord> const&)
PUBLIC 377f8 0 TOperationRecord::SetTargetNode(TNodePtr const&)
PUBLIC 37820 0 TCopyMoveOperation::CheckPermissions(TCountedPtr<TOperationRecord> const&)
PUBLIC 37ae2 0 TNode::UserCanRead() const
PUBLIC 37b3c 0 TOperationRecord::SetConflict(unsigned long)
PUBLIC 37b54 0 TCopyMoveOperation::TransformDestinationLocks()
PUBLIC 37ce2 0 TOperation::ReleaseLock(TNodePtr const&, TNodePtr const&)
PUBLIC 37e7e 0 TOperation::RemoveChildWriter(TNodePtr const&)
PUBLIC 37eea 0 TNode::RemoveChildWriter(TCountedPtr<TOperation> const&)
PUBLIC 37f10 0 TOperationLock::RemoveChildWriter(TCountedPtr<TOperation> const&)
PUBLIC 37f94 0 TNode::DecrementReadersBelow()
PUBLIC 37fde 0 TCopyMoveOperation::NeedsSizeCheck() const
PUBLIC 37fe8 0 TOperation::CheckSize()
PUBLIC 3835c 0 TOperation::CheckSize(TOperationRecord&)
PUBLIC 3881c 0 TOperationRecord::GetConflict() const
PUBLIC 38830 0 TOperation::OperationSize(TNodePtr const&, TNodePtr const&, unsigned long, bool)
PUBLIC 38a8e 0 TOperation::LaunchChild(bool)
PUBLIC 392c4 0 TOperation::PathForTool(__CFString const*, char*)
PUBLIC 3935a 0 IsLoggingEnabled(unsigned long long)
PUBLIC 393a3 0 _ChildHandshake
PUBLIC 396b4 0 NodeIsVisible
PUBLIC 396f7 0 _ChildOperationFolderSize
PUBLIC 39922 0 LocumParentMessageHandler
PUBLIC 399d8 0 LocumParentDefs_server
PUBLIC 39a61 0 _XNotifyOperationSizerUpdate
PUBLIC 39bce 0 _ParentXNotifyOperationSizerUpdate
PUBLIC 39cea 0 TOperation::UpdateStatusBytesCompleted(long long)
PUBLIC 39d6c 0 TOperation::UpdateStatusItemsTotal(long long, long long)
PUBLIC 39e06 0 TOperation::UpdateStatusCurrentItem(TUString const&)
PUBLIC 39e7c 0 TOperation::ReportStatus(bool)
PUBLIC 3a0e2 0 TOperation::Retain(void*)
PUBLIC 3a102 0 TOperation::Release(void*)
PUBLIC 3a114 0 TNodeEvent::Notify(TCountedPtr<TNodeEvent> const&, bool, bool)
PUBLIC 3a29f 0 NodeEventGetMonitor
PUBLIC 3a31e 0 NodeGetStatus
PUBLIC 3a4bc 0 TNodeOperationTask::IsOperationRefValid(OpaqueOperationRef*&)
PUBLIC 3a5e2 0 _XNotifyCancelOperationRequested
PUBLIC 3a6a3 0 _ParentXNotifyCancelOperationRequested
PUBLIC 3a6f9 0 _XNotifyOperationSetSizerData
PUBLIC 3a88e 0 _ParentXNotifyOperationSetSizerData
PUBLIC 3a9c4 0 TOperation::UpdateDestinationSpaceNeeds(long long, long long, long long, long long, long long, unsigned long long, unsigned long, bool, bool, long)
PUBLIC 3aa9b 0 _XNotifyOperationDone
PUBLIC 3aaef 0 _ParentXNotifyOperationDone
PUBLIC 3ab06 0 TOperationRecord::SetPhysicalSizeNeeded(long long)
PUBLIC 3ab26 0 TOperationRecord::SetLogicalSize(long long)
PUBLIC 3ab46 0 TOperationRecord::SetItemCount(long long)
PUBLIC 3ab68 0 TFSInfo::GetVolumeInfoRecord(VolumeInfoRecord&) const
PUBLIC 3ae92 0 TOperationRecord::SetSpaceAvailable(long long)
PUBLIC 3aeb2 0 TOperation::ReportConflicts()
PUBLIC 3b84a 0 TOperationErrorRecord::TOperationErrorRecord(TOperation*, TConflictIterator*)
PUBLIC 3b898 0 TOperationErrorRecord::AddPtrReference()
PUBLIC 3b8ac 0 TOperationErrorRecord::Retain(void*)
PUBLIC 3b8c4 0 TOperationErrorRecord::Release(void*)
PUBLIC 3b8d6 0 TOperationErrorRecord::RemovePtrReference()
PUBLIC 3b905 0 NodeEventGetErrorRecord
PUBLIC 3b988 0 TNodeEvent::GetErrorRecord() const
PUBLIC 3b9e2 0 NodeEventGetOperationIterator
PUBLIC 3ba72 0 TNodeEvent::GetConflictIterator() const
PUBLIC 3bac7 0 NodeEventPostReply
PUBLIC 3bad2 0 TUniqueNamer::TUniqueNamer(long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), NodeClientContext*)
PUBLIC 3bade 0 TUniqueNamer::TUniqueNamer(long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), NodeClientContext*)
PUBLIC 3bb92 0 TUniqueNamer::SetSeed(TUString const&, TUString const&)
PUBLIC 3bbcc 0 TUString::GetFileSuffix(TUString&) const
PUBLIC 3bcd0 0 TUniqueNamer::NextUniqueName(TUString&)
PUBLIC 3bed2 0 TOperationRecord::GetTargetName() const
PUBLIC 3befe 0 TOperationRecord::GetPropertyList() const
PUBLIC 3bf2c 0 THFSPlusExtendedPropertyIterator::THFSPlusExtendedPropertyIterator(TNodePtr const&)
PUBLIC 3bf36 0 THFSPlusExtendedPropertyIterator::THFSPlusExtendedPropertyIterator(TNodePtr const&)
PUBLIC 3c0a6 0 TPropertyInfo::TPropertyInfo()
PUBLIC 3c0b0 0 TNode::CreateNode(TNodePtr const&, TUString const&)
PUBLIC 3c0fe 0 TNode::TNode(TNodePtr const&, TUString const&)
PUBLIC 3c108 0 TNode::TNode(TNodePtr const&, TUString const&)
PUBLIC 3c326 0 TNode::CreateNewLockItem(TOperation&, TCountedPtr<TOperationRecord> const&, TUString const&, TNode*)
PUBLIC 3c930 0 TCFURLInfo::Initialize(char const*, unsigned long)
PUBLIC 3c9a4 0 TCFURLInfo::CopySecurityForCopy(unsigned long, __FSFileSecurity*&, bool, bool) const
PUBLIC 3ce48 0 TCFURLInfo::CreateLockDirectory(TCountedPtr<TCFURLInfo> const&, TUString const*, __FSFileSecurity*, bool, TCountedPtr<TCFURLInfo>&) const
PUBLIC 3cff8 0 TCFURLInfo::CreateDirectory(TUString const&, TUniqueNamer*, __FSFileSecurity*, bool, TCountedPtr<TCFURLInfo>&) const
PUBLIC 3d27a 0 TCFURLInfo::CreateDirectory(char const*, unsigned long, TUString const&, __FSFileSecurity*, bool, char*)
PUBLIC 3d3ca 0 TUString::GetCString(char*, long) const
PUBLIC 3d408 0 TCFURLInfo::TranslatePOSIXError(int)
PUBLIC 3d648 0 THFSPlusExtendedPropertyIterator::~THFSPlusExtendedPropertyIterator()
PUBLIC 3d652 0 THFSPlusExtendedPropertyIterator::~THFSPlusExtendedPropertyIterator()
PUBLIC 3d69a 0 TNode::~TNode()
PUBLIC 3d958 0 TCFURLInfo::GetLockCreationDate()
PUBLIC 3d9f2 0 TNode::SetFSInfo(TCountedPtr<TCFURLInfo> const&)
PUBLIC 3dabc 0 TNode::CopyProperties(THFSPlusExtendedPropertyIterator&)
PUBLIC 3dc22 0 THFSPlusPropertyStore::CopyProperties(THFSPlusExtendedPropertyIterator&, TUString const&, bool, bool&, TPropertyInfo*&)
PUBLIC 3dd78 0 THFSPlusExtendedPropertyIterator::First(bool)
PUBLIC 3ddba 0 THFSPlusExtendedPropertyIterator::Next(bool)
PUBLIC 3de76 0 TOperationRecord::SetTargetName(TUString const&)
PUBLIC 3de94 0 TOperation::AcquireWriteLock(TNodePtr const&)
PUBLIC 3e3b4 0 TOperation::AddWriter(TNodePtr const&)
PUBLIC 3e420 0 TNode::AddWriter(TCountedPtr<TOperation> const&)
PUBLIC 3e446 0 TOperationLock::AddWriter(TCountedPtr<TOperation> const&)
PUBLIC 3e480 0 TUniqueNamer::~TUniqueNamer()
PUBLIC 3e48c 0 TUniqueNamer::~TUniqueNamer()
PUBLIC 3e4f4 0 TOperationTimer::LogPreflightEnded()
PUBLIC 3e5e0 0 TOperation::ProcessSelection()
PUBLIC 3e756 0 TOperation::ValidateCurrentRecordConflicts()
PUBLIC 3e94a 0 TCopyMoveOperation::PerformOperation(TCountedPtr<TOperationRecord> const&)
PUBLIC 3ee3e 0 TCopyMoveOperation::NeedsAuthentication(TCountedPtr<TOperationRecord> const&)
PUBLIC 3eec0 0 TCopyMoveOperation::PerformCopyOrForceMove(TCountedPtr<TOperationRecord> const&)
PUBLIC 3f420 0 TCopyMoveOperation::GetCopyReader() const
PUBLIC 3f5ac 0 TCopyQueue::TCopyQueue(OperationReporter*, unsigned long)
PUBLIC 3f63c 0 TCopyQueue::Initialize()
PUBLIC 3f696 0 TCopyReader::TCopyReader(TCopyQueue*, bool, bool, bool)
PUBLIC 3f6ae 0 TCopyReader::TCopyReader(TCopyQueue*, bool, bool, bool)
PUBLIC 3f7dc 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::_Deque_base(std::allocator<TReservationRecord*> const&, unsigned long)
PUBLIC 3f846 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_initialize_map(unsigned long)
PUBLIC 3f94c 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_create_nodes(TReservationRecord***, TReservationRecord***)
PUBLIC 3f9b0 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_allocate_node()
PUBLIC 3f9f6 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::deque(std::deque<TReservationRecord*, std::allocator<TReservationRecord*> > const&)
PUBLIC 3fab6 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>::difference_type std::operator-<TReservationRecord*, TReservationRecord*&, TReservationRecord**>(std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> const&, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> const&)
PUBLIC 3fae5 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> std::__uninitialized_copy_a<std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>, TReservationRecord*>(std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>, std::allocator<TReservationRecord*>)
PUBLIC 3fb5c 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> std::uninitialized_copy<std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> >(std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>)
PUBLIC 3fbd7 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> std::__uninitialized_copy_aux<std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> >(std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>, std::__true_type)
PUBLIC 3fc4e 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> std::copy<std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> >(std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>)
PUBLIC 3fcc5 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> std::__copy_normal<false, false>::__copy_n<std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> >(std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>)
PUBLIC 3fd3c 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> std::__copy_aux<std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> >(std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>)
PUBLIC 3fdb3 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>::difference_type std::operator-<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>(std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*> const&, std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*> const&)
PUBLIC 3fde2 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::~deque()
PUBLIC 3fdec 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::~_Deque_base()
PUBLIC 3fe36 0 TCopyWriter::SetLowPriorityForBackup()
PUBLIC 3fe9a 0 TCopyReader::CreateWriter()
PUBLIC 3ff0a 0 TCopyWriter::WriteTaskProc(void*)
PUBLIC 3ff80 0 TFSInfo::GetCFURLInfo() const
PUBLIC 40040 0 TCFURLInfo::Initialize(FSRef const&)
PUBLIC 40094 0 TCopyWriter::TCopyWriter(TCopyQueue*)
PUBLIC 402d0 0 TCopyReader::Read(unsigned long long, TCountedPtr<TCFURLInfo> const&, TCountedPtr<TCFURLInfo> const&)
PUBLIC 405b8 0 TCopyWriter::Write()
PUBLIC 408c0 0 TCopyReader::Reinitialize(unsigned long long, TCountedPtr<TCFURLInfo> const&, TCountedPtr<TCFURLInfo> const&)
PUBLIC 40944 0 TCopyWriter::GetNextItem()
PUBLIC 40d3e 0 TCopyQueue::SetNextRootRecord(unsigned long long, TCountedPtr<TCFURLInfo> const&, TCountedPtr<TCFURLInfo> const&)
PUBLIC 40fc8 0 TCopyQueue::Dequeue()
PUBLIC 4101e 0 TCFURLInfo::IsBackup() const
PUBLIC 41042 0 TCFURLInfo::IsBackupRoot() const
PUBLIC 41072 0 TCFURLInfo::GetVRefNum() const
PUBLIC 410ec 0 TCFURLInfo::GetVolumeInfoRecord(VolumeInfoRecord&) const
PUBLIC 41408 0 TCopyQueue::GetCopyBufferSize()
PUBLIC 41602 0 TCopyReader::GetNextItem()
PUBLIC 41f7e 0 TCFURLInfo::GetNumericalProperty(__CFString const*) const
PUBLIC 41ff0 0 TCopyItem::TCopyItem(unsigned long, TCopyQueue*, TCountedPtr<TCFURLInfo>, TCountedPtr<TCFURLInfo>, TCopyBuffer*, unsigned long)
PUBLIC 42404 0 TCopyQueue::OperationKind() const
PUBLIC 4242a 0 TCFURLInfo::TCFURLInfo(TCFURLInfo const&)
PUBLIC 42434 0 TCFURLInfo::TCFURLInfo(TCFURLInfo const&)
PUBLIC 426b2 0 TCopyQueue::DestinationSupportsACLS() const
PUBLIC 426c6 0 TCFURLInfo::CopyExtendedAttributes(__CFArray const*&, __CFArray const*&, unsigned long) const
PUBLIC 42af4 0 TCFURLInfo::CopyQuarantineData(_qtn_file*&, __CFArray const*) const
PUBLIC 42ba6 0 TCFURLInfo::GetBooleanProperty(__CFString const*) const
PUBLIC 42c06 0 TCopyQueue::GetTargetName(TUString&) const
PUBLIC 42c33 0 GetTargetName(unsigned long long, TCountedPtr<TCFURLInfo> const&, TUString&)
PUBLIC 42d0c 0 TCopyQueue::DestinationIsDropBox() const
PUBLIC 42d28 0 TCFURLInfo::IsDropBox() const
PUBLIC 42d4e 0 TCopyQueue::GetDestinationVRefNum()
PUBLIC 42d5a 0 TCopyQueue::UseCopyFile() const
PUBLIC 42d8a 0 TCopyItem::SetSourceIsPackage(TCountedPtr<TCFURLInfo>)
PUBLIC 42e7a 0 TCopyItem::SourceIsPackage() const
PUBLIC 42e9e 0 TDeepCFURLIterator::Reset()
PUBLIC 42ff0 0 TCFURLIterator::TCFURLIterator(TCountedPtr<TCFURLInfo> const&, __CFArray const*, bool)
PUBLIC 430f6 0 TDeepCFURLIterator::ResetReservationStack()
PUBLIC 43161 0 CancelOperationRequested(unsigned long long)
PUBLIC 43178 0 TCopyReader::QueueItem()
PUBLIC 432a6 0 TCopyItem::TCopyItem(TCopyItem const&)
PUBLIC 43776 0 TCopyQueue::Enqueue(TCopyItem*)
PUBLIC 437e2 0 TCopyItem::~TCopyItem()
PUBLIC 43938 0 TCopyItem::ItemType() const
PUBLIC 4394c 0 TDeepCFURLIterator::Next(TCountedPtr<TCFURLInfo>&, long&, long&, bool&)
PUBLIC 439ce 0 TDeepCFURLIterator::NextInternal(TCountedPtr<TCFURLInfo>&, long&, long&, bool&)
PUBLIC 43b32 0 std::vector<TCopyItem*, std::allocator<TCopyItem*> >::push_back(TCopyItem* const&)
PUBLIC 43b6e 0 std::vector<TCopyItem*, std::allocator<TCopyItem*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<TCopyItem**, std::vector<TCopyItem*, std::allocator<TCopyItem*> > >, TCopyItem* const&)
PUBLIC 43c74 0 TCFURLIterator::Next(TCountedPtr<TCFURLInfo>&)
PUBLIC 43ce6 0 TCFURLIterator::First(TCountedPtr<TCFURLInfo>&)
PUBLIC 43d13 0 TCopyItem** std::uninitialized_copy<TCopyItem**, TCopyItem**>(TCopyItem**, TCopyItem**, TCopyItem**)
PUBLIC 43d48 0 TCopyWriter::ReportStatus(bool)
PUBLIC 43e20 0 TCopyWriter::UpdateTimeRemaining(unsigned long)
PUBLIC 44074 0 TCFURLIterator::Reset()
PUBLIC 440ba 0 TCopyQueue::ReportStatus(OperationStatus const&, TUString const&, TCountedPtr<TCFURLInfo> const&, bool)
PUBLIC 441c7 0 UpdateOperationStatus(unsigned long long, TUString const&, long long, long long, long long, long long, unsigned long, bool)
PUBLIC 443a8 0 TCopyWriter::CreateItem()
PUBLIC 44a42 0 TCopyItem::IsSymlink() const
PUBLIC 44a68 0 TCopyWriter::CreateNewDestinationItem()
PUBLIC 44efc 0 TCFURLIterator::NextRaw(TCountedPtr<TCFURLInfo>&)
PUBLIC 44fea 0 TCopyWriter::CheckForExistingLockItem(TCountedPtr<TCFURLInfo>&)
PUBLIC 4508a 0 TCFURLInfo::LockItemExists(TUString const&, TCountedPtr<TCFURLInfo>&)
PUBLIC 452d2 0 TCopyItem::SetName(TUString const&)
PUBLIC 452fa 0 TCopyWriter::SetTargetInfo(TCountedPtr<TCFURLInfo>)
PUBLIC 4535a 0 TCopyItem::DisplayName()
PUBLIC 453ba 0 TCFURLInfo::GetDisplayName() const
PUBLIC 45406 0 TCopyItem::IsContainer() const
PUBLIC 4542c 0 TCopyWriter::DelayIfNeeded()
PUBLIC 45490 0 TCFURLInfo::IsTrash() const
PUBLIC 455a4 0 TCopyReader::ShouldSkip(TCountedPtr<TCFURLInfo> const&, unsigned char&, TCountedPtr<TCFURLInfo>&) const
PUBLIC 456a2 0 TCopyQueue::ShouldSkip(TCountedPtr<TCFURLInfo> const&, TCountedPtr<TCFURLInfo> const&, unsigned char&, TCountedPtr<TCFURLInfo>&) const
PUBLIC 456f4 0 TCopyQueue::DestinationSupportsLargeFiles() const
PUBLIC 45706 0 TCFURLInfo::ShouldSkip(bool, bool, bool) const
PUBLIC 45796 0 TCFURLInfo::GetType() const
PUBLIC 45816 0 TCFURLInfo::GetName() const
PUBLIC 4585a 0 TCopyReader::OpenDataFork()
PUBLIC 459ac 0 TCopyQueue::SourceSupportsACLS() const
PUBLIC 459be 0 TCFURLInfo::Open(unsigned long, __FSFileSecurity*, bool, bool)
PUBLIC 45a5c 0 TFileDescriptor::Open(char const*, unsigned long, __FSFileSecurity*, bool, bool, bool)
PUBLIC 45c9a 0 TCopyReader::ReadDataFork()
PUBLIC 45f0e 0 TCopyItem::DataLogicalSize() const
PUBLIC 45f8c 0 TCopyQueue::GetBuffer()
PUBLIC 45fea 0 TCopyWriter::PreAllocateIfNeeded(TFileDescriptor const*, long long)
PUBLIC 46084 0 TCopyQueue::DestinationSupportsPreAllocation() const
PUBLIC 46096 0 TCopyWriter::WriteDataFork()
PUBLIC 465d4 0 TFileDescriptor::Close()
PUBLIC 46614 0 TCopyItem::~TCopyItem()
PUBLIC 4661e 0 TCopyQueue::AddBuffer(TCopyBuffer*)
PUBLIC 4664e 0 TCopyWriter::CloseDataFork()
PUBLIC 466fc 0 TCFURLInfo::SetExtendedAttributes(TFileDescriptor const&, __CFArray const*, __CFArray const*, bool)
PUBLIC 46956 0 TCopyWriter::WriteExtendedAttributes()
PUBLIC 46e1a 0 TCopyWriter::WriteDates()
PUBLIC 47244 0 TCFURLInfo::StripCopyACE(TCountedPtr<TCFURLInfo> const&, bool)
PUBLIC 47592 0 TCFURLInfo::SetFileSecurityRef(__FSFileSecurity*)
PUBLIC 475f8 0 TCopyWriter::SetLock()
PUBLIC 47666 0 TCopyQueue::DoPostProc(TCountedPtr<TCFURLInfo> const&, TCountedPtr<TCFURLInfo> const&, unsigned long)
PUBLIC 47698 0 TCopyWriter::DestroyCurrentItem()
PUBLIC 4780a 0 TCopyItem::UniName()
PUBLIC 4786c 0 TDeepCFURLIterator::PopIterator()
PUBLIC 479a8 0 TCFURLIterator::~TCFURLIterator()
PUBLIC 47a28 0 TCopyQueue::WaitOnRecordDone()
PUBLIC 47a64 0 TCFURLInfo::SetExtendedAttributes(__CFArray const*, __CFArray const*, bool)
PUBLIC 47b48 0 TCopyItem::GetIconRef() const
PUBLIC 47b55 0 FlushLock(TCountedPtr<TCFURLInfo> const&, OpaqueIconRef* const&)
PUBLIC 47c06 0 TNode::GetNodeFromCFURLInfo(TCountedPtr<TCFURLInfo> const&, TNodePtr&)
PUBLIC 47c34 0 TCopyQueue::NotifyRecordDone()
PUBLIC 47c68 0 TDeepCFURLIterator::~TDeepCFURLIterator()
PUBLIC 47c72 0 TDeepCFURLIterator::~TDeepCFURLIterator()
PUBLIC 47d24 0 TDeepCFURLIterator::DestroyIterators()
PUBLIC 47d9a 0 std::vector<TCFURLIterator*, std::allocator<TCFURLIterator*> >::erase(__gnu_cxx::__normal_iterator<TCFURLIterator**, std::vector<TCFURLIterator*, std::allocator<TCFURLIterator*> > >, __gnu_cxx::__normal_iterator<TCFURLIterator**, std::vector<TCFURLIterator*, std::allocator<TCFURLIterator*> > >)
PUBLIC 47de6 0 std::vector<TCFURLIterator*, std::allocator<TCFURLIterator*> >::~vector()
PUBLIC 47df0 0 std::_Vector_base<TCFURLIterator*, std::allocator<TCFURLIterator*> >::~_Vector_base()
PUBLIC 47e08 0 TOperationRecord::GetTargetNode() const
PUBLIC 47e38 0 TOperation::AddExternalNotification(TNodePtr const&)
PUBLIC 47f78 0 TOperationRecord::SetCompletedOperation(long)
PUBLIC 47f90 0 TOperation::FlushAfterOperation()
PUBLIC 48310 0 TOperation::ReleaseLocks()
PUBLIC 484d8 0 TOperation::RemoveWriter(TNodePtr const&)
PUBLIC 48544 0 TNode::RemoveWriter(TCountedPtr<TOperation> const&)
PUBLIC 485a4 0 TOperationLock::RemoveWriter(TCountedPtr<TOperation> const&)
PUBLIC 4861e 0 TNode::ReleaseOperationLock()
PUBLIC 4869c 0 TNode::DecrementReaders()
PUBLIC 486e6 0 TCopyMoveOperation::DeleteLockFilesIfNeeded(TCountedPtr<TOperationRecord> const&)
PUBLIC 488aa 0 TNode::GetChildrenCount() const
PUBLIC 488e6 0 TNode::DeleteIfLockFile(bool)
PUBLIC 48aaa 0 TFSInfo::FlushLockFile()
PUBLIC 48b14 0 TOperation::DecrementOperationCounts()
PUBLIC 48c7e 0 TOperationTimer::~TOperationTimer()
PUBLIC 48c88 0 TOperationTimer::~TOperationTimer()
PUBLIC 48e20 0 TNodeOperationTask::Finalize()
PUBLIC 48e42 0 TCopyMoveOperation::Finalize()
PUBLIC 48eb4 0 TCopyReader::Finalize()
PUBLIC 48fac 0 TCopyQueue::SetReadCompleted()
PUBLIC 48fba 0 TCopyWriter::HandleError(long)
PUBLIC 49150 0 TCopyWriter::WriteCleanup()
PUBLIC 493ca 0 TCopyWriter::~TCopyWriter()
PUBLIC 4949e 0 TCopyQueue::SetWriteComplete()
PUBLIC 494e0 0 TCopyWriter::ResetReservationStack()
PUBLIC 49578 0 std::vector<TCopyItem*, std::allocator<TCopyItem*> >::~vector()
PUBLIC 49582 0 std::_Vector_base<TCopyItem*, std::allocator<TCopyItem*> >::~_Vector_base()
PUBLIC 4959a 0 TOperation::Finalize()
PUBLIC 49770 0 _ChildNotifyOperationComplete
PUBLIC 497ce 0 _XNotifyOperationComplete
PUBLIC 49852 0 _ParentXNotifyOperationComplete
PUBLIC 4989c 0 TOperation::PostExternalNotificationsAtEndOfOperation()
PUBLIC 4995a 0 TFSRef::Notify() const
PUBLIC 499c4 0 TOperation::CleanupAll()
PUBLIC 49b12 0 TCopyMoveOperation::Cleanup(TCountedPtr<TOperationRecord> const&)
PUBLIC 49b7e 0 TNodeOperationTask::Completed()
PUBLIC 49dee 0 TNodeOperationTask::RemoveOperationRef(OpaqueOperationRef*&)
PUBLIC 49e4c 0 std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> >::erase(__gnu_cxx::__normal_iterator<OpaqueOperationRef**, std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> > >)
PUBLIC 49e88 0 TNodeOperationTask::~TNodeOperationTask()
PUBLIC 49f3a 0 TTaskThread::~TTaskThread()
PUBLIC 49f54 0 TNode::FNNotificationHook(unsigned long, unsigned long, void*, OpaqueFNSubscriptionRef*)
PUBLIC 4a02c 0 TNode::SetForceSync(bool)
PUBLIC 4a072 0 TChildrenList::SetForceSync(bool)
PUBLIC 4a092 0 __LaunchChild_block_invoke_1
PUBLIC 4a126 0 TOperation::ProtectedDispose()
PUBLIC 4a180 0 TCopyMoveOperation::~TCopyMoveOperation()
PUBLIC 4a250 0 TCopyReader::~TCopyReader()
PUBLIC 4a25a 0 TCopyReader::~TCopyReader()
PUBLIC 4a330 0 TCopyQueue::WaitOnCopyDone()
PUBLIC 4a375 0 FinalizeOperation()
PUBLIC 4a37a 0 TCopyQueue::~TCopyQueue()
PUBLIC 4a384 0 TCopyQueue::~TCopyQueue()
PUBLIC 4a52c 0 TOperation::~TOperation()
PUBLIC 4a5ea 0 std::vector<unsigned long, std::allocator<unsigned long> >::~vector()
PUBLIC 4a5f4 0 std::_Vector_base<unsigned long, std::allocator<unsigned long> >::~_Vector_base()
PUBLIC 4a60c 0 std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > >::~vector()
PUBLIC 4a652 0 std::_Vector_base<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > >::~_Vector_base()
PUBLIC 4a66c 0 TFSInfo::GetPhysicalSize(TPropertyReference&, unsigned long) const
PUBLIC 4a758 0 TNode::SetIsSizedPackage(bool)
PUBLIC 4a78a 0 TChildrenList::GetLastResizeDuration() const
PUBLIC 4a796 0 TFSInfoSizer::TFSInfoSizer(TCountedPtr<TFSInfo> const&, TCountedPtr<TFSInfo> const&, TCountedPtr<TNodeTask> const&, TFolderSizingThread*)
PUBLIC 4a7a0 0 TFSInfoSizer::TFSInfoSizer(TCountedPtr<TFSInfo> const&, TCountedPtr<TFSInfo> const&, TCountedPtr<TNodeTask> const&, TFolderSizingThread*)
PUBLIC 4a872 0 TFSInfoSizer::Size()
PUBLIC 4a892 0 TFSInfoSizer::Sizing(TCountedPtr<TFSInfo> const&)
PUBLIC 4aafc 0 TOperationSizer::TOperationSizer(TCountedPtr<TCFURLInfo> const&, long long, bool, unsigned long long, void (*)(unsigned long long, TCountedPtr<TCFURLInfo> const&, long long, long long, long long, bool), bool (*)(unsigned long long), long long, long long, long long, long long, long long, long long, bool, bool, unsigned char (*)(__CFURL const*, __CFURL const*, void*), unsigned char (*)(void*), NodeClientContext*)
PUBLIC 4ab18 0 TOperationSizer::TOperationSizer(TCountedPtr<TCFURLInfo> const&, long long, bool, unsigned long long, void (*)(unsigned long long, TCountedPtr<TCFURLInfo> const&, long long, long long, long long, bool), bool (*)(unsigned long long), long long, long long, long long, long long, long long, long long, bool, bool, unsigned char (*)(__CFURL const*, __CFURL const*, void*), unsigned char (*)(void*), NodeClientContext*)
PUBLIC 4acf0 0 TOperationSizer::ComputeSize()
PUBLIC 4ae0e 0 TCFURLInfo::GetBasicInfoPropertyKeys()
PUBLIC 4ae64 0 TCFURLInfo::RealUserCanRead(bool*) const
PUBLIC 4aeae 0 TCFURLInfo::GetOwner() const
PUBLIC 4af24 0 TOperationSizer::Sizing(TCountedPtr<TCFURLInfo> const&)
PUBLIC 4b0b4 0 TOperationSizer::AccumulateSize(TCountedPtr<TCFURLInfo> const&, bool)
PUBLIC 4b490 0 TCFURLInfo::IsRootItem() const
PUBLIC 4b4be 0 TDeepCFURLIterator::PushIterator(TCountedPtr<TCFURLInfo> const&)
PUBLIC 4b662 0 std::vector<TCFURLIterator*, std::allocator<TCFURLIterator*> >::push_back(TCFURLIterator* const&)
PUBLIC 4b69e 0 std::vector<TCFURLIterator*, std::allocator<TCFURLIterator*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<TCFURLIterator**, std::vector<TCFURLIterator*, std::allocator<TCFURLIterator*> > >, TCFURLIterator* const&)
PUBLIC 4b7dc 0 TOperationSizer::ShouldSkip(TCountedPtr<TCFURLInfo> const&) const
PUBLIC 4bae4 0 TFSInfoSizer::ShouldCancel(void*)
PUBLIC 4bbac 0 TFolderSizingThread::SizingCanceled() const
PUBLIC 4bbb8 0 TOperationSizer::~TOperationSizer()
PUBLIC 4bbc2 0 TOperationSizer::~TOperationSizer()
PUBLIC 4bc6a 0 TFSInfoSizer::Cancelled() const
PUBLIC 4bc76 0 TNode::SetSizeProperties(TFSInfoSizer const&)
PUBLIC 4be8a 0 TFSInfo::SetLogicalSize(TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 4bf34 0 TFSCatalogInfo::SetResourceLogicalSize(long long)
PUBLIC 4bf48 0 TFSInfo::SetPhysicalSize(TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 4bff2 0 TFSCatalogInfo::SetResourcePhysicalSize(long long)
PUBLIC 4c00c 0 TFSInfo::SetDeepItemCount(TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 4c098 0 TFSInfo::GetDeepItemCount() const
PUBLIC 4c0c0 0 TFSInfo::SetDeepItemCount(long long)
PUBLIC 4c10c 0 TFSInfo::InitializeFolderSizeRecord() const
PUBLIC 4c1d0 0 TFolderSizeRecord::RemovePtrReference()
PUBLIC 4c200 0 TFSInfo::SetDeepVisibleItemCount(TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 4c28c 0 TFSInfo::GetDeepVisibleItemCount() const
PUBLIC 4c2b4 0 TFSInfo::SetDeepVisibleItemCount(long long)
PUBLIC 4c300 0 TNode::SetHasSized()
PUBLIC 4c37c 0 TFSInfo::SetHasSized()
PUBLIC 4c38e 0 TFSInfoSizer::~TFSInfoSizer()
PUBLIC 4c398 0 TFSInfoSizer::~TFSInfoSizer()
PUBLIC 4c412 0 THFSPlusPropertyStore::IsOpen() const
PUBLIC 4c428 0 TPropertyValue::TPropertyValue(bool)
PUBLIC 4c442 0 TPropertyValue::TPropertyValue(short)
PUBLIC 4c45e 0 TFSInfo::GetCreator(TPropertyReference&, unsigned long) const
PUBLIC 4c494 0 TFSInfo::IsClipping() const
PUBLIC 4c51a 0 TFSInfo::HasClippingExtension(TUString const&)
PUBLIC 4c900 0 TFSInfo::IsLocation() const
PUBLIC 4c9b6 0 TFSInfo::HasLocationExtension(TUString const&)
PUBLIC 4cfae 0 TFSInfo::IsStationery(TPropertyReference&, unsigned long) const
PUBLIC 4cfd3 0 NodeGetMDItemRef
PUBLIC 4d044 0 TNode::GetMDItemRef() const
PUBLIC 4d0a8 0 GetNodeAsFSRef
PUBLIC 4d0ca 0 NodeAsFSRef
PUBLIC 4d1c8 0 _CopyPropertyStoreWithURL
PUBLIC 4d3b0 0 InitializeMinimal()
PUBLIC 4d3c2 0 THFSPlusPropertyStore::THFSPlusPropertyStore(TCountedPtr<TCFURLInfo> const&, TCountedPtr<TFSVolumeInfo> const&)
PUBLIC 4d3cc 0 THFSPlusPropertyStore::THFSPlusPropertyStore(TCountedPtr<TCFURLInfo> const&, TCountedPtr<TFSVolumeInfo> const&)
PUBLIC 4d445 0 _CopyCommentForName
PUBLIC 4d5a2 0 TFSInfo::UserCanDelete() const
PUBLIC 4d5c6 0 TFSInfo::UserCanDeleteChild() const
PUBLIC 4d5e6 0 TNode::IsSticky() const
PUBLIC 4d66a 0 _ReleasePropertyStore
PUBLIC 4d6d8 0 THFSPlusExtendedPropertyIterator::RemoveProperties()
PUBLIC 4d7d8 0 THFSPlusExtendedPropertyIterator::THFSPlusExtendedPropertyIterator(TUString const&, TCountedPtr<THFSPlusPropertyStore> const&)
PUBLIC 4d8fe 0 THFSPlusExtendedPropertyIterator::THFSPlusExtendedPropertyIterator(TUString const&, TCountedPtr<THFSPlusPropertyStore> const&)
PUBLIC 4d93a 0 THFSPlusPropertyStore::SetDirty()
PUBLIC 4d974 0 TPropertyMonitor::FinalizeLock()
PUBLIC 4d9b2 0 THFSPlusPropertyStore::ParentRef() const
PUBLIC 4d9da 0 THFSPlusPropertyStore::RemoveProperty(TUString const&, unsigned long)
PUBLIC 4db28 0 THFSPlusPropertyStore::SetProperty(TPropertyInfo*)
PUBLIC 4dc9e 0 THFSPlusPropertyStore::RemoveProperties(TUString const&)
PUBLIC 4dd8a 0 THFSPlusPropertyStore::RenameProperties(TUString const&, TUString const&, bool&, TPropertyInfo*&)
PUBLIC 4debe 0 std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> >::erase(__gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >)
PUBLIC 4defa 0 TNode::ReleaseSystemNotificationRunLoop()
PUBLIC 4df2a 0 TNode::ClearBeingSynced()
PUBLIC 4df48 0 TNode::TestAndSetInitialPopulationComplete()
PUBLIC 4df6e 0 TCountedChildCreator::Retain(void*)
PUBLIC 4df80 0 TCountedChildCreator::TCountedChildCreator(TChildCreator*)
PUBLIC 4df96 0 TNode::Retain(void*)
PUBLIC 4dfb6 0 NodeResolveCallBack(__NWNode*, __CFString const*, unsigned long, NWNodeError, void*)
PUBLIC 4e074 0 TChildCreator::operator=(TChildCreator const&)
PUBLIC 4e16e 0 TNode::RegistrationOptions(TCountedPtr<TClientChangeNotifier> const&, bool, unsigned long&)
PUBLIC 4e21a 0 TNode::ReleasePublishedFoldersListObserver()
PUBLIC 4e2b2 0 TNode::ReleaseDevicesFileListObserver()
PUBLIC 4e34a 0 TNode::ReleaseSavedSearchesFileListObserver()
PUBLIC 4e3e2 0 TNode::ReleasePlacesFileListObserver()
PUBLIC 4e47a 0 TNode::RequestPermissionsOperation(OpaqueOperationRef*, unsigned long, __FSFileSecurity*)
PUBLIC 4e51c 0 TNode::StSynchronize::~StSynchronize()
PUBLIC 4e526 0 TNode::GetWriteOperation() const
PUBLIC 4e55e 0 TChildCreator::~TChildCreator()
PUBLIC 4e624 0 TCountedChildCreator::~TCountedChildCreator()
PUBLIC 4e650 0 TCountedChildCreator::Release(void*)
PUBLIC 4e68a 0 TChildCreator::~TChildCreator()
PUBLIC 4e694 0 TChildCreator::TChildCreator(TChildCreator const&)
PUBLIC 4e7de 0 TChildCreator::TChildCreator(TChildCreator const&)
PUBLIC 4e7e8 0 TChildCreator::TChildCreator(__CFString const*, TUniqueNamer*, long (TNode::*)(TChildCreator const&, TNodePtr const&), TCountedPtr<TPropertyMap> const&, TNodePtr const&, unsigned long, __CFDictionary const*, __CFURL const*, TCountedPtr<TClientQuery> const&)
PUBLIC 4e952 0 TChildCreator::TChildCreator(__CFString const*, TUniqueNamer*, long (TNode::*)(TChildCreator const&, TNodePtr const&), TCountedPtr<TPropertyMap> const&, TNodePtr const&, unsigned long, __CFDictionary const*, __CFURL const*, TCountedPtr<TClientQuery> const&)
PUBLIC 4e95c 0 TChildCreator::TChildCreator()
PUBLIC 4eab4 0 TChildCreator::TChildCreator()
PUBLIC 4eabe 0 TNode::DecrementReadersBelowBy(unsigned long)
PUBLIC 4eb14 0 TNode::HandleCanceVolumeThreads(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 4eb7c 0 TNode::HandleFetchClippingData(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 4ed36 0 TNode::HandleFetchLocationData(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 4eef6 0 TNode::HandleFetchAttribute(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 4f14c 0 TNode::Dump() const
PUBLIC 4f232 0 TNode::UserCanWriteFinderExtendedProperties() const
PUBLIC 4f28c 0 TNode::UserCanWriteFinderInfo() const
PUBLIC 4f2e6 0 TNode::UserCanWriteResourceFork() const
PUBLIC 4f340 0 TNode::Deleting(TCountedPtr<TFSInfo> const&, TCountedPtr<TOperation> const&, TCountedPtr<TOperationRecord> const&, bool, unsigned long&, bool, TCountedPtr<TOperationErrorRecord>&)
PUBLIC 4fb5c 0 TNode::SetNodeQueryNode(TNodePtr const&) const
PUBLIC 4fc50 0 TNode::SetNodeQuery(TCountedPtr<TNodeQuery> const&)
PUBLIC 4fd0c 0 TNode::SetNodeQuery(TCountedPtr<TClientQuery> const&)
PUBLIC 4fdf4 0 TNode::SetNodeQueryHitsContainer(TNodePtr const&) const
PUBLIC 50094 0 TNode::CopyPermissionInfo(FSPermissionInfo*)
PUBLIC 5012c 0 TNode::HandleFetchPermissionInfo(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 50354 0 TNode::GetMediaTypes(long&) const
PUBLIC 503b2 0 TNode::OpenScreenShareSync(TCountedPtr<TNodeTask>) const
PUBLIC 50522 0 TNode::HandleOpenScreenShareRequest(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 50586 0 TNode::GetUnresolvedNode(TUString const&, OpaqueIconRef*, TFSCatalogInfo const&, unsigned long)
PUBLIC 50678 0 TNode::NewVolumeIterator()
PUBLIC 50704 0 TNode::SetSearchCount(long)
PUBLIC 50770 0 TNode::CopyMDAttributeForHitNode(__CFString const*) const
PUBLIC 50856 0 TNode::GetHitStringValue(TPropertyReference&, __CFString const*) const
PUBLIC 50914 0 TNode::GetHitNumberValue16(TPropertyReference&, __CFString const*) const
PUBLIC 50988 0 TNode::GetHitDateValue(TPropertyReference&, __CFString const*) const
PUBLIC 50a42 0 TNode::CreateNodeQuery(TUString const&, TCountedPtr<TClientQuery> const&)
PUBLIC 50ad2 0 TNode::EqualDisplayName(TUString const&) const
PUBLIC 50b38 0 TNode::TNode(TNodeQuery*, __MDItem*)
PUBLIC 50d04 0 TNode::TNode(TNodeQuery*, __MDItem*)
PUBLIC 50d0e 0 TNode::NetworkNodeUnmount() const
PUBLIC 51024 0 TNode::NWNodeUnmountCallback(__NWNode*, __CFString const*, unsigned long, NWNodeError, void*)
PUBLIC 51182 0 TNode::HandleSetPermissionInfo(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 513c4 0 TNode::GetGlobalTrashNode()
PUBLIC 516fd 0 PublishedFoldersCallback(OpaqueLSSharedFileListRef*, void*)
PUBLIC 517e5 0 SavedSearchesCallback(OpaqueLSSharedFileListRef*, void*)
PUBLIC 518cc 0 TNode::SetiDisk(TNodePtr const&, long)
PUBLIC 51aea 0 TNode::HandleiDiskChanged()
PUBLIC 51b3a 0 TNode::iDiskPreferenceChangedCallback(__CFNotificationCenter*, void*, __CFString const*, void const*, __CFDictionary const*)
PUBLIC 51b97 0 VolumesCallback
PUBLIC 51c7e 0 TNode::SetTimerToHandleNotifyRequest(TNode*, double)
PUBLIC 51d02 0 TNode::MapNameToUserOrGroupID(TUString const&, bool, unsigned long&) const
PUBLIC 51d74 0 TNode::MapUserOrGroupIDToName(bool, unsigned long, TUString&) const
PUBLIC 51de6 0 TNode::MapNameToUserOrGroupUUID(__CFString const*, bool, __CFUUID const**) const
PUBLIC 51e58 0 TNode::MapUserOrGroupUUIDToName(bool, __CFUUID const*, __CFString const**) const
PUBLIC 51eca 0 TNode::VolumeIsNetworkRemoteDisk() const
PUBLIC 51f06 0 TNode::VolumeSupportsACLs() const
PUBLIC 51f42 0 TNode::VolumeHasNoVolumeSizes() const
PUBLIC 51f7e 0 TNode::IsiPod() const
PUBLIC 51fba 0 TNode::CopyUnbadgedIcon(OpaqueIconRef*&) const
PUBLIC 51fe4 0 TNode::CopyOriginalPath(TUString&) const
PUBLIC 520b2 0 TNode::ResetIconRef() const
PUBLIC 5216e 0 TNode::SetIconProperty(unsigned long, TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >&)
PUBLIC 5224c 0 TNode::DumpFlags() const
PUBLIC 5236a 0 TNode::GetName(TUString&) const
PUBLIC 5238e 0 TNode::CopyPermissionInfo(FSPermissionInfo*, OpaqueNodeRequest* const&)
PUBLIC 52480 0 TNode::CopyAttributes(__CFArray const*, OpaqueNodeRequest* const&)
PUBLIC 525bc 0 TNode::CopyAttributes(__CFString const*, OpaqueNodeRequest* const&)
PUBLIC 5269e 0 TNode::OpenScreenShare(OpaqueNodeRequest*, unsigned long) const
PUBLIC 527d8 0 TNode::HandleNotifyRequest(TNode*)
PUBLIC 528a2 0 TNode::UnsubscribeForFSNotification()
PUBLIC 528d4 0 TNode::SubscribeForFSNotification()
PUBLIC 52906 0 TNode::StSynchronize::StSynchronize(TNodePtr const&, unsigned long)
PUBLIC 52910 0 TNode::GetVolume(TUString const&)
PUBLIC 529d4 0 TNode::NotifyNameChanges() const
PUBLIC 52a9e 0 TNode::HandleFNNotify(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 52c34 0 TNode::Compare(TNode const*, unsigned long, short (*)(unsigned long, unsigned short const*, unsigned long, unsigned short const*), bool&) const
PUBLIC 52db0 0 TNode::Compare(TNode const*, unsigned long, short (*)(unsigned long, unsigned short const*, unsigned long, unsigned short const*)) const
PUBLIC 52de6 0 TNode::Compare(TNode const*, unsigned long, short (*)(long long, long long), bool&) const
PUBLIC 533b8 0 TNode::Compare(TNode const*, unsigned long, short (*)(long long, long long)) const
PUBLIC 533ee 0 TNode::UserIsOwner() const
PUBLIC 5346a 0 TNode::UserCanChangePermissions() const
PUBLIC 53542 0 TNode::GetAEDesc(AEDesc&) const
PUBLIC 53662 0 TNode::CopyClippingData(unsigned long&, __CFDictionary const*&, OpaqueNodeRequest* const&)
PUBLIC 53800 0 TNode::CopyLocationData(__CFURL const*&, OpaqueNodeRequest* const&)
PUBLIC 539a0 0 TNode::CreateChildFile(TChildCreator const&, TNodePtr const&)
PUBLIC 53bb6 0 TNode::CreateChildClipping(TChildCreator const&, TNodePtr const&)
PUBLIC 53df6 0 TNode::CreateChildLocation(TChildCreator const&, TNodePtr const&)
PUBLIC 5414e 0 TNode::CreateChildAlias(TChildCreator const&, TNodePtr const&)
PUBLIC 54308 0 TNode::CreateChildContainer(TChildCreator const&, TNodePtr const&)
PUBLIC 544f0 0 TNode::UserCanListContent() const
PUBLIC 54598 0 TNode::GetNodeQuery() const
PUBLIC 546c6 0 TNode::CopyMDItemIdentity() const
PUBLIC 54834 0 TNode::LockedInSidebar() const
PUBLIC 54860 0 TNode::UnRegisterForInternalNotifications()
PUBLIC 548c4 0 TNode::ClearAliasTarget(bool) const
PUBLIC 54928 0 TNode::SetUnresolvedTarget()
PUBLIC 54c0a 0 TNode::CancelQuery()
PUBLIC 54dce 0 TNode::SetQuery(TCountedPtr<TClientQuery> const&)
PUBLIC 54fc2 0 TNode::SetQuery(__CFString const*, TCountedPtr<TClientQuery> const&)
PUBLIC 550d6 0 TNode::CreateNewVirtualChildProxy(TNodePtr const&, unsigned long, TNodePtr&)
PUBLIC 55584 0 TNode::HandleSetVirtualChildAtIndex(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 55658 0 TNode::~TNode()
PUBLIC 55662 0 TNode::RemoveSelf(TNodeEventPtrSet&)
PUBLIC 5598e 0 TNode::RemoveAllChildren(bool, TNodeEventPtrSet&)
PUBLIC 55b90 0 TNode::RecursivelyRemoveAllChildren(bool) const
PUBLIC 55c16 0 TNode::Remove(bool, TNodeEventPtrSet&)
PUBLIC 55f62 0 TNode::FindChild(TUString const&, bool)
PUBLIC 56466 0 TNode::AdjustForBackup() const
PUBLIC 5661e 0 TNode::FollowAlias(unsigned long) const
PUBLIC 568f2 0 TNode::HandleUnsubscribeWithKQueue(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 56a76 0 TNode::iDiskChangedCallback(__CFMachPort*, void*, long, void*)
PUBLIC 56b84 0 TNode::SetUtilitiesNode()
PUBLIC 56ce0 0 TNode::SetApplicationsNode()
PUBLIC 56e3c 0 TNode::HandleGetFolderRequest(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 56ebc 0 TNode::AddVolume(TCountedPtr<TVolumeSyncThread> const&, short, unsigned long, TNodePtr&, bool)
PUBLIC 57474 0 TNode::HandleVolumeAdded(TCountedPtr<TNodeTask> const&, TNodePtr const&, TCountedPtr<TVolumeSyncThread> const&)
PUBLIC 574ec 0 TNode::SynchronizeVolumes(bool, TCountedPtr<TVolumeSyncThread> const&)
PUBLIC 57868 0 TNode::RemoveVolume(short, unsigned long)
PUBLIC 57a70 0 TNode::HandleVolumeDeleted(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 57aa4 0 TNode::VolumeUnmount(int*)
PUBLIC 57bde 0 TNode::VolumeEject(int*)
PUBLIC 57cf0 0 TNode::IsUnmountableVolume() const
PUBLIC 57dee 0 TNode::SetPermissionInfo(FSPermissionInfo*, OpaqueNodeRequest* const&)
PUBLIC 580aa 0 TNode::MarkAsUsed()
PUBLIC 5821c 0 TNode::HandleMarkAsUsed(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 58246 0 TNode::CopyQueryDictionaries(__CFDictionary const**, __CFDictionary const**)
PUBLIC 58580 0 TNode::IsSnapshot() const
PUBLIC 585cc 0 TNode::SnapshotForItem(TNodePtr&) const
PUBLIC 5869e 0 TNode::HandleSubscribeWithKQueue(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 588f8 0 TNode::Move(TNodePtr const&, TUString*, TOperation&)
PUBLIC 58d8a 0 TNode::VolumeIsUnmountable() const
PUBLIC 58e0e 0 TNode::Synchronize(OpaqueNodeRequest* const&, unsigned long)
PUBLIC 58e72 0 TNode::SetNewAliasTarget(TNodePtr const&)
PUBLIC 58fee 0 TNode::SetIndex(unsigned long)
PUBLIC 5933e 0 TNode::HandleSetVirtualIndex(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 59368 0 TNode::IsInHome() const
PUBLIC 59498 0 TNode::HandleResolveAlias(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 595ec 0 TNode::SetParent(TNodePtr const&, THFSPlusExtendedPropertyIterator&)
PUBLIC 5979c 0 TNode::SetName(TUString const&)
PUBLIC 59c86 0 TNode::ComputerNameChangedCallback(__SCDynamicStore const*, __CFArray const*, void*)
PUBLIC 59e84 0 TNode::RemoveProperty(unsigned long)
PUBLIC 59fee 0 TNode::RemovePropertyValue(unsigned long)
PUBLIC 5a070 0 TNode::UpdateSizeInfo()
PUBLIC 5a594 0 TNode::Move(TNodePtr const&, TOperationRecord&, TOperation&, TUString const*)
PUBLIC 5ac46 0 TNode::CreateNewChild(TChildCreator const&, TNodePtr&)
PUBLIC 5ae50 0 TNode::HandleCreateChild(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 5aede 0 TNode::CreateNewChildLockItem(TOperation&, TCountedPtr<TOperationRecord> const&, TUString const&, TNodePtr, TCountedPtr<TPropertyMap> const&, TNodePtr&)
PUBLIC 5b2ea 0 TNode::GetSlashUsersNode()
PUBLIC 5b476 0 TNode::HandleChange(char*, unsigned long, TCountedPtr<TVolumeSyncThread> const&)
PUBLIC 5bc30 0 TNode::FSVolumeObserverCallback(short, __CFString const*, void const*, void*)
PUBLIC 5c516 0 TNode::GetNodeFromPathName(TUString const&, TNodePtr&)
PUBLIC 5c9c8 0 TNode::HandleFetchNodeRequest(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 5cb1c 0 TNode::DownloadChangedCallback(__CFNotificationCenter*, void*, __CFString const*, void const*, __CFDictionary const*)
PUBLIC 5ceba 0 TNode::GetSavedSearchNode(TUString const&)
PUBLIC 5cf7c 0 TNode::RemoveVirtualNode()
PUBLIC 5d20a 0 TNode::FinalizeClientNodes()
PUBLIC 5d2a8 0 TNode::Finalize(TNodePtr*&)
PUBLIC 5d45c 0 TNode::Release(void*)
PUBLIC 5d46e 0 TNode::Finalize()
PUBLIC 5d656 0 TNode::DisconnectShareSync(TCountedPtr<TNodeTask>) const
PUBLIC 5d91a 0 TNode::HandleDisconnectShareRequest(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 5d97e 0 TNode::DisconnectShare(OpaqueNodeRequest*, unsigned long) const
PUBLIC 5daba 0 TNode::OpenServerSync(TCountedPtr<TNodeTask>) const
PUBLIC 5de86 0 TNode::HandleOpenServerRequest(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 5deea 0 TNode::HandleNodeRequest(TCountedPtr<TNodeTask> const&, TCountedPtr<TVolumeSyncThread> const&)
PUBLIC 5e4a0 0 TNode::OpenServer(OpaqueNodeRequest*, unsigned long) const
PUBLIC 5e5dc 0 TNode::CopyAttribute(__CFString const*, void const*&, OpaqueNodeRequest* const&)
PUBLIC 5e93e 0 TNode::GetMDQueryRef() const
PUBLIC 5eac6 0 TNode::Delete(TCountedPtr<TOperation> const&, TCountedPtr<TOperationRecord> const&, bool, bool)
PUBLIC 5ee52 0 std::tr1::_Hashtable<__NWNode*, std::pair<__NWNode* const, TNodePtr>, std::allocator<std::pair<__NWNode* const, TNodePtr> >, std::_Select1st<std::pair<__NWNode* const, TNodePtr> >, std::equal_to<__NWNode*>, TNWNodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::find(__NWNode* const&)
PUBLIC 5ee90 0 std::tr1::_Hashtable<__NWNode*, std::pair<__NWNode* const, TNodePtr>, std::allocator<std::pair<__NWNode* const, TNodePtr> >, std::_Select1st<std::pair<__NWNode* const, TNodePtr> >, std::equal_to<__NWNode*>, TNWNodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_deallocate_node(std::tr1::__detail::_Hash_node<std::pair<__NWNode* const, TNodePtr>, false>*)
PUBLIC 5eebc 0 std::tr1::_Hashtable<__NWNode*, std::pair<__NWNode* const, TNodePtr>, std::allocator<std::pair<__NWNode* const, TNodePtr> >, std::_Select1st<std::pair<__NWNode* const, TNodePtr> >, std::equal_to<__NWNode*>, TNWNodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_deallocate_nodes(std::tr1::__detail::_Hash_node<std::pair<__NWNode* const, TNodePtr>, false>**, unsigned long)
PUBLIC 5ef02 0 std::tr1::_Hashtable<__NWNode*, std::pair<__NWNode* const, TNodePtr>, std::allocator<std::pair<__NWNode* const, TNodePtr> >, std::_Select1st<std::pair<__NWNode* const, TNodePtr> >, std::equal_to<__NWNode*>, TNWNodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::~_Hashtable()
PUBLIC 5ef42 0 std::tr1::_Hashtable<__NWNode*, std::pair<__NWNode* const, TNodePtr>, std::allocator<std::pair<__NWNode* const, TNodePtr> >, std::_Select1st<std::pair<__NWNode* const, TNodePtr> >, std::equal_to<__NWNode*>, TNWNodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::erase(std::tr1::__detail::_Hashtable_iterator<std::pair<__NWNode* const, TNodePtr>, false, false>)
PUBLIC 5efb4 0 TFSInfo::IsLockedInSidebar() const
PUBLIC 5efdd 0 TNodePtr* std::__copy_backward<false, std::random_access_iterator_tag>::__copy_b<TNodePtr*, TNodePtr*>(TNodePtr*, TNodePtr*, TNodePtr*)
PUBLIC 5f018 0 std::pair<TNodePtr, TCountedPtr<TFSInfo> >::operator=(std::pair<TNodePtr, TCountedPtr<TFSInfo> > const&)
PUBLIC 5f052 0 std::pair<TNodePtr, TCountedPtr<TFSInfo> >* std::__copy_backward<false, std::random_access_iterator_tag>::__copy_b<std::pair<TNodePtr, TCountedPtr<TFSInfo> >*, std::pair<TNodePtr, TCountedPtr<TFSInfo> >*>(std::pair<TNodePtr, TCountedPtr<TFSInfo> >*, std::pair<TNodePtr, TCountedPtr<TFSInfo> >*, std::pair<TNodePtr, TCountedPtr<TFSInfo> >*)
PUBLIC 5f08c 0 short* std::__copy_backward<true, std::random_access_iterator_tag>::__copy_b<short>(short const*, short const*, short*)
PUBLIC 5f0bc 0 std::tr1::_Hashtable<__NWNode*, std::pair<__NWNode* const, TNodePtr>, std::allocator<std::pair<__NWNode* const, TNodePtr> >, std::_Select1st<std::pair<__NWNode* const, TNodePtr> >, std::equal_to<__NWNode*>, TNWNodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_allocate_buckets(unsigned long)
PUBLIC 5f10e 0 std::tr1::_Hashtable<__NWNode*, std::pair<__NWNode* const, TNodePtr>, std::allocator<std::pair<__NWNode* const, TNodePtr> >, std::_Select1st<std::pair<__NWNode* const, TNodePtr> >, std::equal_to<__NWNode*>, TNWNodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_rehash(unsigned long)
PUBLIC 5f194 0 std::tr1::_Hashtable<unsigned long, std::pair<unsigned long const, TPropertyValue>, std::allocator<std::pair<unsigned long const, TPropertyValue> >, std::_Select1st<std::pair<unsigned long const, TPropertyValue> >, std::equal_to<unsigned long>, std::tr1::hash<unsigned long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_allocate_buckets(unsigned long)
PUBLIC 5f1e6 0 std::tr1::_Hashtable<__NWNode*, std::pair<__NWNode* const, TNodePtr>, std::allocator<std::pair<__NWNode* const, TNodePtr> >, std::_Select1st<std::pair<__NWNode* const, TNodePtr> >, std::equal_to<__NWNode*>, TNWNodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_Hashtable(unsigned long, TNWNodeHasher const&, std::tr1::__detail::_Mod_range_hashing const&, std::tr1::__detail::_Default_ranged_hash const&, std::equal_to<__NWNode*> const&, std::_Select1st<std::pair<__NWNode* const, TNodePtr> > const&, std::allocator<std::pair<__NWNode* const, TNodePtr> > const&)
PUBLIC 5f246 0 std::tr1::_Hashtable<unsigned long, std::pair<unsigned long const, TPropertyValue>, std::allocator<std::pair<unsigned long const, TPropertyValue> >, std::_Select1st<std::pair<unsigned long const, TPropertyValue> >, std::equal_to<unsigned long>, std::tr1::hash<unsigned long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_Hashtable(unsigned long, std::tr1::hash<unsigned long> const&, std::tr1::__detail::_Mod_range_hashing const&, std::tr1::__detail::_Default_ranged_hash const&, std::equal_to<unsigned long> const&, std::_Select1st<std::pair<unsigned long const, TPropertyValue> > const&, std::allocator<std::pair<unsigned long const, TPropertyValue> > const&)
PUBLIC 5f2a6 0 std::tr1::_Hashtable<__NWNode*, std::pair<__NWNode* const, TNodePtr>, std::allocator<std::pair<__NWNode* const, TNodePtr> >, std::_Select1st<std::pair<__NWNode* const, TNodePtr> >, std::equal_to<__NWNode*>, TNWNodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_allocate_node(std::pair<__NWNode* const, TNodePtr> const&)
PUBLIC 5f326 0 TCountedPtr<TPropertyMap>::operator=(TCountedPtr<TPropertyMap> const&)
PUBLIC 5f364 0 Deleter::StDeleter<TFSIterator>::~StDeleter()
PUBLIC 5f390 0 TCountedPtr<TOperationErrorRecord>::operator=(TCountedPtr<TOperationErrorRecord> const&)
PUBLIC 5f3ce 0 TCountedPtr<TClientQuery>::operator=(TCountedPtr<TClientQuery> const&)
PUBLIC 5f40c 0 TCountedPtr<TNodeQuery>::operator=(TCountedPtr<TNodeQuery> const&)
PUBLIC 5f44a 0 TCountedPtr<TQueryDataRecord>::operator=(TCountedPtr<TQueryDataRecord> const&)
PUBLIC 5f488 0 std::tr1::_Hashtable<__NWNode*, std::pair<__NWNode* const, TNodePtr>, std::allocator<std::pair<__NWNode* const, TNodePtr> >, std::_Select1st<std::pair<__NWNode* const, TNodePtr> >, std::equal_to<__NWNode*>, TNWNodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_insert_bucket(std::pair<__NWNode* const, TNodePtr> const&, unsigned long, unsigned long)
PUBLIC 5f54e 0 std::tr1::__detail::_Map_base<__NWNode*, std::pair<__NWNode* const, TNodePtr>, std::_Select1st<std::pair<__NWNode* const, TNodePtr> >, true, std::tr1::_Hashtable<__NWNode*, std::pair<__NWNode* const, TNodePtr>, std::allocator<std::pair<__NWNode* const, TNodePtr> >, std::_Select1st<std::pair<__NWNode* const, TNodePtr> >, std::equal_to<__NWNode*>, TNWNodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true> >::operator[](__NWNode* const&)
PUBLIC 5f64e 0 std::vector<TNode*, std::allocator<TNode*> >::erase(__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >)
PUBLIC 5f68a 0 TFSInfo::SetNetworkConnectionState(NWNodeConnectionState)
PUBLIC 5f6be 0 TFSInfo::SetIsNetworkMounted(bool)
PUBLIC 5f6ee 0 TFSInfo::IsNetworkRemoteDiskRequiresAsk() const
PUBLIC 5f716 0 TFSInfo::GetNetworkConnectionState() const
PUBLIC 5f738 0 TFSInfo::SupportsScreenSharing() const
PUBLIC 5f760 0 TFSInfo::SupportsFileSharing() const
PUBLIC 5f788 0 TNode::IsNetworkRemoteDiskRequiresAsk() const
PUBLIC 5f7d4 0 TNode::IsScreenShare() const
PUBLIC 5f820 0 TNode::IsFileShare() const
PUBLIC 5f86c 0 TNode::IsNetworkSidebar() const
PUBLIC 5f8b6 0 TNode::IsLockedInSidebar() const
PUBLIC 5f902 0 TNode::IsFontFile() const
PUBLIC 5f99c 0 TNode::NetworkConnectionState() const
PUBLIC 5f9ea 0 TNode::GetNodeQueryNode() const
PUBLIC 5fa84 0 TNode::GetSearchCount() const
PUBLIC 5faf0 0 TNode::IsBusyApplication() const
PUBLIC 5fb4a 0 TPropertyComparator::operator()(std::pair<TNodePtr, TPropertyStore> const&, std::pair<TNodePtr, TPropertyStore> const&) const
PUBLIC 5fbc2 0 TNodeIterator::AtIndex(unsigned long)
PUBLIC 5fc24 0 std::pair<TNodePtr, TPropertyStore> const& std::__median<std::pair<TNodePtr, TPropertyStore>, TPropertyComparator>(std::pair<TNodePtr, TPropertyStore> const&, std::pair<TNodePtr, TPropertyStore> const&, std::pair<TNodePtr, TPropertyStore> const&, TPropertyComparator)
PUBLIC 5fcc3 0 std::pair<TNodePtr, TPropertyStore> const& std::__median<std::pair<TNodePtr, TPropertyStore>, TIndexComparator>(std::pair<TNodePtr, TPropertyStore> const&, std::pair<TNodePtr, TPropertyStore> const&, std::pair<TNodePtr, TPropertyStore> const&, TIndexComparator)
PUBLIC 5fd61 0 void std::__push_heap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, int, std::pair<TNodePtr, TPropertyStore>, TIndexComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, int, int, std::pair<TNodePtr, TPropertyStore>, TIndexComparator)
PUBLIC 5fe2e 0 void std::__push_heap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, int, std::pair<TNodePtr, TPropertyStore>, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, int, int, std::pair<TNodePtr, TPropertyStore>, TPropertyComparator)
PUBLIC 5fefb 0 void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, std::pair<TNodePtr, TPropertyStore>, TIndexComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, std::pair<TNodePtr, TPropertyStore>, TIndexComparator)
PUBLIC 5ff95 0 void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, std::pair<TNodePtr, TPropertyStore>, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, std::pair<TNodePtr, TPropertyStore>, TPropertyComparator)
PUBLIC 6002f 0 void std::__adjust_heap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, int, std::pair<TNodePtr, TPropertyStore>, TIndexComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, int, int, std::pair<TNodePtr, TPropertyStore>, TIndexComparator)
PUBLIC 601c8 0 void std::swap<std::pair<TNodePtr, TPropertyStore> >(std::pair<TNodePtr, TPropertyStore>&, std::pair<TNodePtr, TPropertyStore>&)
PUBLIC 60389 0 void std::__adjust_heap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, int, std::pair<TNodePtr, TPropertyStore>, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, int, int, std::pair<TNodePtr, TPropertyStore>, TPropertyComparator)
PUBLIC 6053a 0 void std::__pop_heap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, std::pair<TNodePtr, TPropertyStore>, TIndexComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, std::pair<TNodePtr, TPropertyStore>, TIndexComparator)
PUBLIC 6062b 0 void std::pop_heap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TIndexComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TIndexComparator)
PUBLIC 606d4 0 void std::sort_heap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TIndexComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TIndexComparator)
PUBLIC 60717 0 void std::make_heap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TIndexComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TIndexComparator)
PUBLIC 60803 0 void std::__pop_heap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, std::pair<TNodePtr, TPropertyStore>, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, std::pair<TNodePtr, TPropertyStore>, TPropertyComparator)
PUBLIC 6090c 0 void std::pop_heap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 609cd 0 void std::sort_heap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 60a28 0 void std::make_heap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 60b2f 0 void std::__heap_select<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TIndexComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TIndexComparator)
PUBLIC 60c1c 0 void std::partial_sort<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TIndexComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TIndexComparator)
PUBLIC 60c66 0 void std::__introsort_loop<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, int, TIndexComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, int, TIndexComparator)
PUBLIC 60d98 0 void std::__heap_select<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 60eb9 0 void std::partial_sort<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 60f25 0 void std::__introsort_loop<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, int, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, int, TPropertyComparator)
PUBLIC 610ba 0 void std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TIndexComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TIndexComparator)
PUBLIC 6115c 0 void std::__insertion_sort<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TIndexComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TIndexComparator)
PUBLIC 612e3 0 void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TIndexComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TIndexComparator)
PUBLIC 61347 0 void std::sort<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TIndexComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TIndexComparator)
PUBLIC 613a4 0 void std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 6145e 0 void std::__insertion_sort<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 61606 0 void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 6167c 0 void std::sort<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 616ee 0 TOperation::PerformOperation(TCountedPtr<TOperationRecord> const&)
PUBLIC 616f6 0 TOperation::UpdateStatusItemsCompleted(long long, long long)
PUBLIC 6175e 0 TOperation::UpdateStatusItemsCompletedIncrementally(long long, long long)
PUBLIC 617d8 0 TOperation::UpdateStatusBytesTotal(long long)
PUBLIC 6183c 0 TOperation::UpdateStatusThroughput(long long)
PUBLIC 618e0 0 TOperation::AcquireDestinationLocks()
PUBLIC 618e8 0 TOperation::TransformDestinationLocks()
PUBLIC 618f0 0 TOperation::Cleanup(TCountedPtr<TOperationRecord> const&)
PUBLIC 618f6 0 TOperation::NeedsAuthentication(TCountedPtr<TOperationRecord> const&)
PUBLIC 618fe 0 TOperation::DeleteLockFilesIfNeeded(TCountedPtr<TOperationRecord> const&)
PUBLIC 61904 0 TOperation::ResolveConflict(TCountedPtr<TOperationRecord> const&)
PUBLIC 6190c 0 TOperation::CheckDestination(TCountedPtr<TOperationRecord> const&)
PUBLIC 61914 0 TOperation::NeedsSizeCheck() const
PUBLIC 6191c 0 TOperation::LogOperationName(TCountedPtr<TOperationRecord> const&) const
PUBLIC 6192e 0 TTrashOperation::NeedsAuthentication(TCountedPtr<TOperationRecord> const&)
PUBLIC 61938 0 TTrashOperation::LogOperationName(TCountedPtr<TOperationRecord> const&) const
PUBLIC 6194a 0 SetOwner()
PUBLIC 61950 0 TDeleteImmediatelyOperation::NeedsSizeCheck() const
PUBLIC 6195a 0 TDeleteImmediatelyOperation::LogOperationName(TCountedPtr<TOperationRecord> const&) const
PUBLIC 6196c 0 TCopyPermissionsOperation::PerformOperation(TCountedPtr<TOperationRecord> const&)
PUBLIC 61974 0 TCopyPermissionsOperation::NeedsAuthentication(TCountedPtr<TOperationRecord> const&)
PUBLIC 6197e 0 TCopyPermissionsOperation::LogOperationName(TCountedPtr<TOperationRecord> const&) const
PUBLIC 61990 0 TDeleteBackupSnapShotOperation::NeedsAuthentication(TCountedPtr<TOperationRecord> const&)
PUBLIC 6199a 0 TDeleteBackupSnapShotOperation::NeedsSizeCheck() const
PUBLIC 619a4 0 TDeleteBackupSnapShotOperation::LogOperationName(TCountedPtr<TOperationRecord> const&) const
PUBLIC 619b7 0 GetRequestedOperation(unsigned long long)
PUBLIC 619ce 0 TDeleteImmediatelyOperation::ResolveConflict(TCountedPtr<TOperationRecord> const&)
PUBLIC 619ee 0 TDeleteBackupSnapShotOperation::ResolveConflict(TCountedPtr<TOperationRecord> const&)
PUBLIC 61a2f 0 SetOperationCurrentTarget(unsigned long long, unsigned long long)
PUBLIC 61a92 0 TOperation::Cancel()
PUBLIC 61aa1 0 FlushRootLock(unsigned long long, TCountedPtr<TCFURLInfo> const&, unsigned long long)
PUBLIC 61b56 0 GetRootLock(TCountedPtr<TCFURLInfo> const&, unsigned long long&)
PUBLIC 61c0c 0 TOperation::KillLocumIfNotInFlight()
PUBLIC 61c98 0 TOperation::GetParentPort(unsigned int*)
PUBLIC 61cdc 0 TOperation::GetChildPort(unsigned int*, bool)
PUBLIC 61d1a 0 TOperation::ReportErrorNoThrow(TCountedPtr<TOperationErrorRecord> const&)
PUBLIC 61f1e 0 TOperation::ReportError(TCountedPtr<TOperationErrorRecord> const&)
PUBLIC 6212c 0 TOperation::ReportErrorFromUnprotectedContext(TCountedPtr<TOperationErrorRecord> const&)
PUBLIC 6233b 0 ReportOperationError(unsigned long long, TCountedPtr<TOperationErrorRecord> const&)
PUBLIC 62350 0 TOperation::ReportStatus(unsigned long, unsigned short const*, long long, long long, long long)
PUBLIC 624e8 0 TTrashOperation::Cancel()
PUBLIC 62582 0 TTrashOperation::ResolveConflict(TCountedPtr<TOperationRecord> const&)
PUBLIC 62810 0 TTrashOperation::PerformOperation(TCountedPtr<TOperationRecord> const&)
PUBLIC 62a8a 0 TOperation::AcquireSourceLock(TCountedPtr<TOperationRecord> const&)
PUBLIC 62ae4 0 TTrashOperation::Cleanup(TCountedPtr<TOperationRecord> const&)
PUBLIC 62bbe 0 TDeleteBackupSnapShotOperation::PerformOperation(TCountedPtr<TOperationRecord> const&)
PUBLIC 62e4a 0 TOperation::ReportErrorForNode(long, TNodePtr, long)
PUBLIC 62f88 0 TCopyMoveOperation::AdjustIfInSidebar(TNodePtr const&, TNodePtr const&)
PUBLIC 630aa 0 TDeleteImmediatelyOperation::PerformOperation(TCountedPtr<TOperationRecord> const&)
PUBLIC 63220 0 TDeleteBackupSnapShotOperation::Cleanup(TCountedPtr<TOperationRecord> const&)
PUBLIC 632fa 0 TCopyPermissionsOperation::ResolveConflict(TCountedPtr<TOperationRecord> const&)
PUBLIC 63664 0 TDeleteImmediatelyOperation::Cleanup(TCountedPtr<TOperationRecord> const&)
PUBLIC 63784 0 TOperation::CreateLockItem(TNodePtr const&, TNodePtr const&, TCountedPtr<TOperationRecord> const&)
PUBLIC 63948 0 TCopyMoveOperation::HandleRenameConflictedItem(TCountedPtr<TOperationRecord> const&)
PUBLIC 63d6a 0 TOperation::RenameAndMove(TCountedPtr<TOperationRecord> const&)
PUBLIC 64104 0 TCopyMoveOperation::PerformMoveInSameParent(TCountedPtr<TOperationRecord> const&)
PUBLIC 641e8 0 TCopyMoveOperation::PerformMove(TCountedPtr<TOperationRecord> const&)
PUBLIC 6469c 0 TCopyMoveOperation::HandleOverwrite(TCountedPtr<TOperationRecord> const&)
PUBLIC 64c9a 0 TDeleteImmediatelyOperation::NeedsAuthentication(TCountedPtr<TOperationRecord> const&)
PUBLIC 64d1c 0 TOperation::TransformOperations()
PUBLIC 64d26 0 TOperation::~TOperation()
PUBLIC 64dec 0 TDeleteBackupSnapShotOperation::~TDeleteBackupSnapShotOperation()
PUBLIC 64e24 0 TDeleteBackupSnapShotOperation::~TDeleteBackupSnapShotOperation()
PUBLIC 64e44 0 TDeleteBackupSnapShotOperation::~TDeleteBackupSnapShotOperation()
PUBLIC 64e4e 0 TCopyPermissionsOperation::~TCopyPermissionsOperation()
PUBLIC 64e86 0 TCopyPermissionsOperation::~TCopyPermissionsOperation()
PUBLIC 64ea6 0 TCopyPermissionsOperation::~TCopyPermissionsOperation()
PUBLIC 64eb0 0 TDeleteImmediatelyOperation::~TDeleteImmediatelyOperation()
PUBLIC 64ee8 0 TDeleteImmediatelyOperation::~TDeleteImmediatelyOperation()
PUBLIC 64f08 0 TDeleteImmediatelyOperation::~TDeleteImmediatelyOperation()
PUBLIC 64f12 0 TCopyMoveOperation::~TCopyMoveOperation()
PUBLIC 64fd8 0 TCopyMoveOperation::~TCopyMoveOperation()
PUBLIC 64fe2 0 TTrashOperation::~TTrashOperation()
PUBLIC 6501a 0 TTrashOperation::~TTrashOperation()
PUBLIC 6503a 0 TTrashOperation::~TTrashOperation()
PUBLIC 65044 0 TOperation::~TOperation()
PUBLIC 6504e 0 TCopyPermissionsOperation::TCopyPermissionsOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 65094 0 TDeleteBackupSnapShotOperation::TDeleteBackupSnapShotOperation(OperationSelector const&, long, __CFString const*, __CFURL const*)
PUBLIC 650e2 0 TDeleteImmediatelyOperation::TDeleteImmediatelyOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 65128 0 TTrashOperation::TTrashOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 6518e 0 TTrashOperation::TransformOperations()
PUBLIC 6534a 0 TOperation::SetCurrentConflict(unsigned long)
PUBLIC 65380 0 TCopyMoveOperation::PerformRemoteCopyOrForceMove(TCountedPtr<TOperationRecord> const&)
PUBLIC 65846 0 TOperation::SetItemCount(unsigned long)
PUBLIC 65858 0 TOperation::GetSuboperation() const
PUBLIC 65860 0 TOperation::SetRequest(TCountedPtr<TPermissionsRequest> const&)
PUBLIC 65866 0 std::tr1::_Hashtable<long, std::pair<long const, TCountedPtr<TFSVolumeInfo> >, std::allocator<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::_Select1st<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::equal_to<long>, std::tr1::hash<long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::find(long const&)
PUBLIC 658a0 0 std::tr1::_Hashtable<unsigned long, std::pair<unsigned long const, TPropertyValue>, std::allocator<std::pair<unsigned long const, TPropertyValue> >, std::_Select1st<std::pair<unsigned long const, TPropertyValue> >, std::equal_to<unsigned long>, std::tr1::hash<unsigned long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::find(unsigned long const&)
PUBLIC 658da 0 std::tr1::_Hashtable<TFSRef, std::pair<TFSRef const, int*>, std::allocator<std::pair<TFSRef const, int*> >, std::_Select1st<std::pair<TFSRef const, int*> >, std::equal_to<TFSRef>, TFSRefHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::erase(std::tr1::__detail::_Hashtable_iterator<std::pair<TFSRef const, int*>, false, false>)
PUBLIC 65946 0 std::tr1::_Hashtable<TFSRef, std::pair<TFSRef const, int*>, std::allocator<std::pair<TFSRef const, int*> >, std::_Select1st<std::pair<TFSRef const, int*> >, std::equal_to<TFSRef>, TFSRefHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_deallocate_nodes(std::tr1::__detail::_Hash_node<std::pair<TFSRef const, int*>, false>**, unsigned long)
PUBLIC 65982 0 std::tr1::_Hashtable<TFSRef, std::pair<TFSRef const, int*>, std::allocator<std::pair<TFSRef const, int*> >, std::_Select1st<std::pair<TFSRef const, int*> >, std::equal_to<TFSRef>, TFSRefHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::~_Hashtable()
PUBLIC 659ba 0 TStatusLock::~TStatusLock()
PUBLIC 659f4 0 TStatusLock::TStatusLock()
PUBLIC 65a38 0 std::pair<TNodePtr, TNodePtr>::operator=(std::pair<TNodePtr, TNodePtr> const&)
PUBLIC 65a72 0 std::pair<TNodePtr, TNodePtr>* std::__copy_backward<false, std::random_access_iterator_tag>::__copy_b<std::pair<TNodePtr, TNodePtr>*, std::pair<TNodePtr, TNodePtr>*>(std::pair<TNodePtr, TNodePtr>*, std::pair<TNodePtr, TNodePtr>*, std::pair<TNodePtr, TNodePtr>*)
PUBLIC 65aac 0 TNode::IsInUse() const
PUBLIC 65af2 0 std::tr1::_Hashtable<TFSRef, std::pair<TFSRef const, int*>, std::allocator<std::pair<TFSRef const, int*> >, std::_Select1st<std::pair<TFSRef const, int*> >, std::equal_to<TFSRef>, TFSRefHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::find(TFSRef const&)
PUBLIC 65b52 0 std::tr1::_Hashtable<long, std::pair<long const, TCountedPtr<TFSVolumeInfo> >, std::allocator<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::_Select1st<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::equal_to<long>, std::tr1::hash<long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_allocate_buckets(unsigned long)
PUBLIC 65ba4 0 std::tr1::_Hashtable<long, std::pair<long const, TCountedPtr<TFSVolumeInfo> >, std::allocator<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::_Select1st<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::equal_to<long>, std::tr1::hash<long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_rehash(unsigned long)
PUBLIC 65c26 0 std::tr1::_Hashtable<long, std::pair<long const, TCountedPtr<TFSVolumeInfo> >, std::allocator<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::_Select1st<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::equal_to<long>, std::tr1::hash<long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_Hashtable(unsigned long, std::tr1::hash<long> const&, std::tr1::__detail::_Mod_range_hashing const&, std::tr1::__detail::_Default_ranged_hash const&, std::equal_to<long> const&, std::_Select1st<std::pair<long const, TCountedPtr<TFSVolumeInfo> > > const&, std::allocator<std::pair<long const, TCountedPtr<TFSVolumeInfo> > > const&)
PUBLIC 65c86 0 std::tr1::_Hashtable<TFSRef, std::pair<TFSRef const, int*>, std::allocator<std::pair<TFSRef const, int*> >, std::_Select1st<std::pair<TFSRef const, int*> >, std::equal_to<TFSRef>, TFSRefHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_allocate_buckets(unsigned long)
PUBLIC 65cd8 0 std::tr1::_Hashtable<TFSRef, std::pair<TFSRef const, int*>, std::allocator<std::pair<TFSRef const, int*> >, std::_Select1st<std::pair<TFSRef const, int*> >, std::equal_to<TFSRef>, TFSRefHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_rehash(unsigned long)
PUBLIC 65d5c 0 std::tr1::_Hashtable<TFSRef, std::pair<TFSRef const, int*>, std::allocator<std::pair<TFSRef const, int*> >, std::_Select1st<std::pair<TFSRef const, int*> >, std::equal_to<TFSRef>, TFSRefHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_Hashtable(unsigned long, TFSRefHasher const&, std::tr1::__detail::_Mod_range_hashing const&, std::tr1::__detail::_Default_ranged_hash const&, std::equal_to<TFSRef> const&, std::_Select1st<std::pair<TFSRef const, int*> > const&, std::allocator<std::pair<TFSRef const, int*> > const&)
PUBLIC 65dbc 0 std::tr1::_Hashtable<long, std::pair<long const, TCountedPtr<TFSVolumeInfo> >, std::allocator<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::_Select1st<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::equal_to<long>, std::tr1::hash<long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_allocate_node(std::pair<long const, TCountedPtr<TFSVolumeInfo> > const&)
PUBLIC 65e3c 0 std::tr1::_Hashtable<TFSRef, std::pair<TFSRef const, int*>, std::allocator<std::pair<TFSRef const, int*> >, std::_Select1st<std::pair<TFSRef const, int*> >, std::equal_to<TFSRef>, TFSRefHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_insert_bucket(std::pair<TFSRef const, int*> const&, unsigned long, unsigned long)
PUBLIC 65f38 0 std::tr1::__detail::_Map_base<TFSRef, std::pair<TFSRef const, int*>, std::_Select1st<std::pair<TFSRef const, int*> >, true, std::tr1::_Hashtable<TFSRef, std::pair<TFSRef const, int*>, std::allocator<std::pair<TFSRef const, int*> >, std::_Select1st<std::pair<TFSRef const, int*> >, std::equal_to<TFSRef>, TFSRefHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true> >::operator[](TFSRef const&)
PUBLIC 66078 0 std::tr1::_Hashtable<long, std::pair<long const, TCountedPtr<TFSVolumeInfo> >, std::allocator<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::_Select1st<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::equal_to<long>, std::tr1::hash<long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_deallocate_node(std::tr1::__detail::_Hash_node<std::pair<long const, TCountedPtr<TFSVolumeInfo> >, false>*)
PUBLIC 660a8 0 std::tr1::_Hashtable<long, std::pair<long const, TCountedPtr<TFSVolumeInfo> >, std::allocator<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::_Select1st<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::equal_to<long>, std::tr1::hash<long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_insert_bucket(std::pair<long const, TCountedPtr<TFSVolumeInfo> > const&, unsigned long, unsigned long)
PUBLIC 6616e 0 std::tr1::_Hashtable<long, std::pair<long const, TCountedPtr<TFSVolumeInfo> >, std::allocator<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::_Select1st<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::equal_to<long>, std::tr1::hash<long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_insert(std::pair<long const, TCountedPtr<TFSVolumeInfo> > const&, std::tr1::integral_constant<bool, true>)
PUBLIC 661e4 0 std::tr1::_Hashtable<long, std::pair<long const, TCountedPtr<TFSVolumeInfo> >, std::allocator<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::_Select1st<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::equal_to<long>, std::tr1::hash<long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_deallocate_nodes(std::tr1::__detail::_Hash_node<std::pair<long const, TCountedPtr<TFSVolumeInfo> >, false>**, unsigned long)
PUBLIC 6622a 0 std::tr1::_Hashtable<long, std::pair<long const, TCountedPtr<TFSVolumeInfo> >, std::allocator<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::_Select1st<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::equal_to<long>, std::tr1::hash<long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::~_Hashtable()
PUBLIC 6626a 0 TNode::IsDropBox() const
PUBLIC 662c4 0 TPathName::Dump() const
PUBLIC 6634c 0 TPathName::FullPath(TUString const&, TUString&, unsigned short) const
PUBLIC 664c2 0 TPathName::AsOldStyleFullPath(TUString const&, TUString&) const
PUBLIC 664ec 0 TPathName::~TPathName()
PUBLIC 66526 0 std::_Deque_iterator<TUString, TUString const&, TUString const*>::operator+=(int)
PUBLIC 66594 0 std::_Deque_iterator<TUString, TUString&, TUString*>::operator+=(int)
PUBLIC 66602 0 void std::__destroy_aux<std::_Deque_iterator<TUString, TUString&, TUString*> >(std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::__false_type)
PUBLIC 6664c 0 void std::_Destroy<std::_Deque_iterator<TUString, TUString&, TUString*> >(std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>)
PUBLIC 6669e 0 TUString** std::__copy_backward<true, std::random_access_iterator_tag>::__copy_b<TUString*>(TUString* const*, TUString* const*, TUString**)
PUBLIC 666ce 0 std::deque<TUString, std::allocator<TUString> >::_M_reallocate_map(unsigned long, bool)
PUBLIC 6681e 0 std::deque<TUString, std::allocator<TUString> >::_M_reserve_map_at_back(unsigned long)
PUBLIC 66860 0 std::_Deque_iterator<TUString, TUString&, TUString*> std::__copy_backward<false, std::random_access_iterator_tag>::__copy_b<std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*> >(std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>)
PUBLIC 66900 0 std::_Deque_iterator<TUString, TUString&, TUString*> std::__copy_backward_aux<std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*> >(std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>)
PUBLIC 66984 0 std::_Deque_iterator<TUString, TUString&, TUString*> std::__copy_backward_normal<false, false>::__copy_b_n<std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*> >(std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>)
PUBLIC 66a08 0 std::_Deque_iterator<TUString, TUString&, TUString*> std::copy_backward<std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*> >(std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>)
PUBLIC 66a8c 0 std::deque<TUString, std::allocator<TUString> >::_M_push_back_aux(TUString const&)
PUBLIC 66b48 0 std::deque<TUString, std::allocator<TUString> >::_M_new_elements_at_back(unsigned long)
PUBLIC 66c08 0 std::deque<TUString, std::allocator<TUString> >::_M_reserve_elements_at_back(unsigned long)
PUBLIC 66c8e 0 std::deque<TUString, std::allocator<TUString> >::_M_new_elements_at_front(unsigned long)
PUBLIC 66d58 0 std::deque<TUString, std::allocator<TUString> >::_M_reserve_elements_at_front(unsigned long)
PUBLIC 66de1 0 std::_Deque_iterator<TUString, TUString&, TUString*> std::__uninitialized_copy_aux<std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString&, TUString*> >(std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::__false_type)
PUBLIC 66edd 0 std::_Deque_iterator<TUString, TUString&, TUString*> std::uninitialized_copy<std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString&, TUString*> >(std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString&, TUString*>)
PUBLIC 66f58 0 std::_Deque_iterator<TUString, TUString&, TUString*> std::__uninitialized_copy_a<std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString&, TUString*>, TUString>(std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::allocator<TUString>)
PUBLIC 66fcf 0 std::_Deque_iterator<TUString, TUString&, TUString*> std::__copy<false, std::random_access_iterator_tag>::copy<std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*> >(std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>)
PUBLIC 67078 0 std::_Deque_iterator<TUString, TUString&, TUString*> std::__copy_aux<std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*> >(std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>)
PUBLIC 670fc 0 std::_Deque_iterator<TUString, TUString&, TUString*> std::__copy_normal<false, false>::__copy_n<std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*> >(std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>)
PUBLIC 67180 0 std::_Deque_iterator<TUString, TUString&, TUString*> std::copy<std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*> >(std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>)
PUBLIC 67204 0 std::_Deque_iterator<TUString, TUString&, TUString*> std::__uninitialized_copy_aux<std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*> >(std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::__false_type)
PUBLIC 67300 0 std::_Deque_iterator<TUString, TUString&, TUString*> std::uninitialized_copy<std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*> >(std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>)
PUBLIC 67388 0 std::_Deque_iterator<TUString, TUString&, TUString*> std::__uninitialized_copy_a<std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>, TUString>(std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::allocator<TUString>)
PUBLIC 6740c 0 std::_Deque_iterator<TUString, TUString&, TUString*> std::__uninitialized_copy_copy<std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::allocator<TUString> >(std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::allocator<TUString>)
PUBLIC 675b7 0 std::_Deque_iterator<TUString, TUString&, TUString*> std::__uninitialized_copy_copy<std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::allocator<TUString> >(std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString&, TUString*>, std::allocator<TUString>)
PUBLIC 6774c 0 void std::deque<TUString, std::allocator<TUString> >::_M_insert_aux<std::_Deque_iterator<TUString, TUString const&, TUString const*> >(std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString const&, TUString const*>, unsigned long)
PUBLIC 68200 0 void std::deque<TUString, std::allocator<TUString> >::_M_range_insert_aux<std::_Deque_iterator<TUString, TUString const&, TUString const*> >(std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::forward_iterator_tag)
PUBLIC 68482 0 void std::deque<TUString, std::allocator<TUString> >::_M_insert_dispatch<std::_Deque_iterator<TUString, TUString const&, TUString const*> >(std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::__false_type)
PUBLIC 684f2 0 void std::deque<TUString, std::allocator<TUString> >::insert<std::_Deque_iterator<TUString, TUString const&, TUString const*> >(std::_Deque_iterator<TUString, TUString&, TUString*>, std::_Deque_iterator<TUString, TUString const&, TUString const*>, std::_Deque_iterator<TUString, TUString const&, TUString const*>)
PUBLIC 68562 0 GetListPropertyAsPoint
PUBLIC 6856c 0 GetListPropertyAsDateTime
PUBLIC 68576 0 GetListPropertyAsRGBColor
PUBLIC 68580 0 SetListPropertyAsPoint
PUBLIC 6858a 0 SetListPropertyAsDateTime
PUBLIC 68594 0 SetListPropertyAsRGBColor
PUBLIC 6859e 0 NodePropertyListRemoveValue
PUBLIC 685cb 0 NodeDisposePropertyList
PUBLIC 685dd 0 NodePropertyListGet(OpaquePropertyListRef*, unsigned long, TPropertyReference&)
PUBLIC 68634 0 NodePropertyListGetAsData
PUBLIC 6869a 0 GetListPropertyAsDataNew
PUBLIC 686a3 0 NodePropertyListGetAsString
PUBLIC 68704 0 GetListPropertyAsStringNew
PUBLIC 6870d 0 NodePropertyListGetAsUTCDateTime
PUBLIC 68744 0 NodePropertyListGetAsOSType
PUBLIC 6877b 0 NodePropertyListGetAsIconRef
PUBLIC 687b2 0 NodePropertyListGetAsInt64
PUBLIC 687e9 0 NodePropertyListGetAsInt32
PUBLIC 68820 0 NodePropertyListGetAsInt16
PUBLIC 68857 0 NodePropertyListGetAsByte
PUBLIC 6888e 0 NodePropertyListGetAsBoolean
PUBLIC 688c5 0 NodeCopyPropertyList
PUBLIC 688e3 0 NodePropertyListSetAsData
PUBLIC 68920 0 NodePropertyListSetAsString
PUBLIC 6895d 0 NodePropertyListSetAsUTCDateTime
PUBLIC 6898b 0 NodePropertyListSetAsOSType
PUBLIC 689b9 0 NodePropertyListSetAsIconRef
PUBLIC 689e7 0 NodePropertyListSetAsInt64
PUBLIC 68a21 0 NodePropertyListSetAsInt32
PUBLIC 68a4f 0 NodePropertyListSetAsInt16
PUBLIC 68a84 0 NodePropertyListSetAsByte
PUBLIC 68ab8 0 NodePropertyListSetAsBoolean
PUBLIC 68aee 0 SetListPropertyAsUTCDateTime
PUBLIC 68b28 0 SetListPropertyAsInt64
PUBLIC 68b62 0 SetListPropertyAsInt32
PUBLIC 68b96 0 SetListPropertyAsIconRef
PUBLIC 68bca 0 SetListPropertyAsOSType
PUBLIC 68bfe 0 SetListPropertyAsByte
PUBLIC 68c33 0 SetListPropertyAsInt16
PUBLIC 68c69 0 SetListPropertyAsDataNew
PUBLIC 68ca6 0 SetListPropertyAsBoolean
PUBLIC 68cdc 0 GetListPropertyAsUTCDateTime
PUBLIC 68d13 0 RemoveListPropertyValue
PUBLIC 68d46 0 GetListPropertyAsBoolean
PUBLIC 68d7d 0 GetListPropertyAsByte
PUBLIC 68db4 0 GetListPropertyAsInt16
PUBLIC 68deb 0 GetListPropertyAsInt32
PUBLIC 68e22 0 GetListPropertyAsInt64
PUBLIC 68e59 0 GetListPropertyAsIconRef
PUBLIC 68e90 0 GetListPropertyAsOSType
PUBLIC 68ec8 0 std::tr1::_Hashtable<unsigned long, std::pair<unsigned long const, TPropertyValue>, std::allocator<std::pair<unsigned long const, TPropertyValue> >, std::_Select1st<std::pair<unsigned long const, TPropertyValue> >, std::equal_to<unsigned long>, std::tr1::hash<unsigned long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::swap(std::tr1::_Hashtable<unsigned long, std::pair<unsigned long const, TPropertyValue>, std::allocator<std::pair<unsigned long const, TPropertyValue> >, std::_Select1st<std::pair<unsigned long const, TPropertyValue> >, std::equal_to<unsigned long>, std::tr1::hash<unsigned long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>&)
PUBLIC 68f24 0 std::tr1::_Hashtable<unsigned long, std::pair<unsigned long const, TPropertyValue>, std::allocator<std::pair<unsigned long const, TPropertyValue> >, std::_Select1st<std::pair<unsigned long const, TPropertyValue> >, std::equal_to<unsigned long>, std::tr1::hash<unsigned long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_rehash(unsigned long)
PUBLIC 68fa6 0 std::tr1::_Hashtable<unsigned long, std::pair<unsigned long const, TPropertyValue>, std::allocator<std::pair<unsigned long const, TPropertyValue> >, std::_Select1st<std::pair<unsigned long const, TPropertyValue> >, std::equal_to<unsigned long>, std::tr1::hash<unsigned long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_allocate_node(std::pair<unsigned long const, TPropertyValue> const&)
PUBLIC 69026 0 std::tr1::_Hashtable<unsigned long, std::pair<unsigned long const, TPropertyValue>, std::allocator<std::pair<unsigned long const, TPropertyValue> >, std::_Select1st<std::pair<unsigned long const, TPropertyValue> >, std::equal_to<unsigned long>, std::tr1::hash<unsigned long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_deallocate_node(std::tr1::__detail::_Hash_node<std::pair<unsigned long const, TPropertyValue>, false>*)
PUBLIC 69052 0 std::tr1::_Hashtable<unsigned long, std::pair<unsigned long const, TPropertyValue>, std::allocator<std::pair<unsigned long const, TPropertyValue> >, std::_Select1st<std::pair<unsigned long const, TPropertyValue> >, std::equal_to<unsigned long>, std::tr1::hash<unsigned long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_deallocate_nodes(std::tr1::__detail::_Hash_node<std::pair<unsigned long const, TPropertyValue>, false>**, unsigned long)
PUBLIC 69098 0 std::tr1::_Hashtable<unsigned long, std::pair<unsigned long const, TPropertyValue>, std::allocator<std::pair<unsigned long const, TPropertyValue> >, std::_Select1st<std::pair<unsigned long const, TPropertyValue> >, std::equal_to<unsigned long>, std::tr1::hash<unsigned long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::~_Hashtable()
PUBLIC 690d8 0 std::tr1::_Hashtable<unsigned long, std::pair<unsigned long const, TPropertyValue>, std::allocator<std::pair<unsigned long const, TPropertyValue> >, std::_Select1st<std::pair<unsigned long const, TPropertyValue> >, std::equal_to<unsigned long>, std::tr1::hash<unsigned long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::erase(unsigned long const&)
PUBLIC 69144 0 std::tr1::_Hashtable<unsigned long, std::pair<unsigned long const, TPropertyValue>, std::allocator<std::pair<unsigned long const, TPropertyValue> >, std::_Select1st<std::pair<unsigned long const, TPropertyValue> >, std::equal_to<unsigned long>, std::tr1::hash<unsigned long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_insert_bucket(std::pair<unsigned long const, TPropertyValue> const&, unsigned long, unsigned long)
PUBLIC 6920a 0 std::tr1::__detail::_Map_base<unsigned long, std::pair<unsigned long const, TPropertyValue>, std::_Select1st<std::pair<unsigned long const, TPropertyValue> >, true, std::tr1::_Hashtable<unsigned long, std::pair<unsigned long const, TPropertyValue>, std::allocator<std::pair<unsigned long const, TPropertyValue> >, std::_Select1st<std::pair<unsigned long const, TPropertyValue> >, std::equal_to<unsigned long>, std::tr1::hash<unsigned long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true> >::operator[](unsigned long const&)
PUBLIC 6936a 0 std::tr1::_Hashtable<unsigned long, std::pair<unsigned long const, TPropertyValue>, std::allocator<std::pair<unsigned long const, TPropertyValue> >, std::_Select1st<std::pair<unsigned long const, TPropertyValue> >, std::equal_to<unsigned long>, std::tr1::hash<unsigned long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_Hashtable(std::tr1::_Hashtable<unsigned long, std::pair<unsigned long const, TPropertyValue>, std::allocator<std::pair<unsigned long const, TPropertyValue> >, std::_Select1st<std::pair<unsigned long const, TPropertyValue> >, std::equal_to<unsigned long>, std::tr1::hash<unsigned long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true> const&)
PUBLIC 69446 0 std::tr1::_Hashtable<unsigned long, std::pair<unsigned long const, TPropertyValue>, std::allocator<std::pair<unsigned long const, TPropertyValue> >, std::_Select1st<std::pair<unsigned long const, TPropertyValue> >, std::equal_to<unsigned long>, std::tr1::hash<unsigned long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::operator=(std::tr1::_Hashtable<unsigned long, std::pair<unsigned long const, TPropertyValue>, std::allocator<std::pair<unsigned long const, TPropertyValue> >, std::_Select1st<std::pair<unsigned long const, TPropertyValue> >, std::equal_to<unsigned long>, std::tr1::hash<unsigned long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true> const&)
PUBLIC 69488 0 NodeDiagnosticLogging
PUBLIC 6948d 0 NodeSetDiagnosticTarget
PUBLIC 69494 0 NodeDefaultSearchCount
PUBLIC 6949e 0 NodeGetNameSyntaxHint
PUBLIC 694be 0 NodeGetReferenceCount
PUBLIC 694c5 0 NodeGetParentReferenceCount
PUBLIC 694cc 0 _NodeContextSetOptions
PUBLIC 694f3 0 RetainFSInfo(void*)
PUBLIC 69505 0 ReleaseFSInfo(void*)
PUBLIC 69517 0 TransferExtendedAttributes(char const*, char const*)
PUBLIC 69624 0 NodeEventDisposeEventQueue
PUBLIC 6962d 0 NodeNewEventQueue
PUBLIC 69644 0 ReleaseNode(void*)
PUBLIC 69657 0 RetainNode(void*)
PUBLIC 69678 0 NodeNewNumberSortedIterator
PUBLIC 696b6 0 NodeNewStringSortedIterator
PUBLIC 696f7 0 NodeSetPropertyAsCFAbsoluteTime
PUBLIC 69744 0 NodeSetPropertyAsCFDate
PUBLIC 69784 0 NodeSetPropertyAsOSType
PUBLIC 697b9 0 NodeSetPropertyAsIconRef
PUBLIC 697ee 0 NodeSetPropertyAsInt64
PUBLIC 6982f 0 NodeSetPropertyAsInt32
PUBLIC 69864 0 NodeSetPropertyAsInt16
PUBLIC 698a0 0 NodeSetPropertyAsByte
PUBLIC 698de 0 VolumeSupportsACLs
PUBLIC 69913 0 VolumeIsReadOnly
PUBLIC 69948 0 VolumeHasNoVolumeSizes
PUBLIC 6997d 0 VolumeIsUnmountable
PUBLIC 699b2 0 VolumeIsLocal
PUBLIC 699e5 0 NodeIsQueryHitsContainer
PUBLIC 69a28 0 NodeIsQuery
PUBLIC 69a6b 0 NodeIsQueryHit
PUBLIC 69aae 0 NodeIsFontFile
PUBLIC 69af1 0 NodeIsSavedQuery
PUBLIC 69b34 0 NodeIsDesktop
PUBLIC 69b79 0 NodeIsFullyFormed
PUBLIC 69bbc 0 NodeUserIsOwner
PUBLIC 69bff 0 NodeHasCustomIcon
PUBLIC 69c42 0 NodeIsLocation
PUBLIC 69c85 0 NodeIsClipping
PUBLIC 69cc8 0 NodeIsPackage
PUBLIC 69d0b 0 NodeIsApplication
PUBLIC 69d4e 0 NodeIsSymLink
PUBLIC 69d91 0 NodeIsAlias
PUBLIC 69dd7 0 NodeIsVolume
PUBLIC 69e1a 0 FinalizeLocks()
PUBLIC 69e69 0 UnRegisterForIDiskChanges()
PUBLIC 69f7c 0 SleepCallback(void*, unsigned int, unsigned int, void*)
PUBLIC 69fe9 0 ChildrenDump
PUBLIC 69ffb 0 PathDump
PUBLIC 6a00d 0 FSInfoDump
PUBLIC 6a01f 0 NodeDump
PUBLIC 6a04c 0 NodeFlags
PUBLIC 6a079 0 FSInfoName
PUBLIC 6a09e 0 NodeLogError
PUBLIC 6a0b9 0 NodeSetErrorHandled
PUBLIC 6a0d4 0 NodeIteratorAtIndex
PUBLIC 6a16a 0 NodeSetPropertyAsCFString
PUBLIC 6a210 0 NodeSetPropertyAsString
PUBLIC 6a254 0 NodeSetPropertyAsCFData
PUBLIC 6a2f4 0 NodeSetPropertyAsUTCDateTime
PUBLIC 6a329 0 NodeSetPropertyAsBoolean
PUBLIC 6a366 0 NodeCopyTrash
PUBLIC 6a474 0 _NodeGetUnbadgedIconRef
PUBLIC 6a4fe 0 NewVolumeIterator
PUBLIC 6a557 0 NodeContextFlush
PUBLIC 6a5b3 0 DisplayNameChangedCallback(__CFNotificationCenter*, void*, __CFString const*, void const*, __CFDictionary const*)
PUBLIC 6a637 0 NodeContextClose
PUBLIC 6a934 0 NodeOpenServer
PUBLIC 6a9b2 0 NodeOpenScreenShare
PUBLIC 6aa30 0 NodeCopyOriginalPath
PUBLIC 6ab30 0 NodeRequestPermissionsOperation
PUBLIC 6abd0 0 NodeGetChildrenCount
PUBLIC 6aca0 0 NodeSetPermissionInfo
PUBLIC 6ad3e 0 _NodeSetInterCopyDelayInSeconds
PUBLIC 6ad9f 0 NodeCopyChangeNotifier
PUBLIC 6ae00 0 NodeDisposeEventQueue
PUBLIC 6aeb6 0 NodeMapNameToUserOrGroupID
PUBLIC 6afa1 0 NodeCopyUserOrGroupIDToName
PUBLIC 6b098 0 NodeMapNameToUserOrGroupUUID
PUBLIC 6b13f 0 NodeCopyUserOrGroupUUIDToName
PUBLIC 6b1e8 0 NodeCopyClippingData
PUBLIC 6b284 0 NodeCopyLocationData
PUBLIC 6b312 0 NodeCopyAttribute
PUBLIC 6b3ae 0 NodeCopyPermissionInfo
PUBLIC 6b43c 0 NodeCopyAttributesWithSelector
PUBLIC 6b4d1 0 NodeCopyAttributes
PUBLIC 6b55f 0 RemoveNodePropertyValue
PUBLIC 6b5d6 0 NodeSynchronize
PUBLIC 6b64b 0 NodeCopyMDQueryRef
PUBLIC 6b6c7 0 NodeGetMDQueryRef
PUBLIC 6b737 0 NodeCopyQueryDictionaries
PUBLIC 6b7d2 0 NodeCopyMDItemIdentity
PUBLIC 6b842 0 NodeCancelQuery
PUBLIC 6b8df 0 NodeQueryGetScopeOptions
PUBLIC 6b92a 0 NodeQueryGetScopeDirectories
PUBLIC 6b975 0 NodeQueryGetSortContext
PUBLIC 6b9e8 0 NodeQueryGetComparator
PUBLIC 6ba33 0 NodeQueryGetSortingAttrs
PUBLIC 6ba7e 0 NodeQueryGetQueryString
PUBLIC 6bac9 0 NodeDisposeNodeQueryRef
PUBLIC 6bb27 0 NodeCopyNodeQueryRef
PUBLIC 6bb88 0 NodeCreateNewNodeQuery
PUBLIC 6bc68 0 NodeVirtualChildLocked
PUBLIC 6bcdb 0 NodeRemoveVirtualNode
PUBLIC 6bd4b 0 NodeSetVirtualNodeIndex
PUBLIC 6bdc2 0 NodeCopyDefaultSearch
PUBLIC 6c0da 0 NodeCopyVolume
PUBLIC 6c1ac 0 NodeGetMediaTypes
PUBLIC 6c22f 0 NodeDisconnectShare
PUBLIC 6c2ae 0 NodeSetPropertyAsCFNumber
PUBLIC 6c3c3 0 NodeRegistrationOptions
PUBLIC 6c4a1 0 NodeIsTrashEmpty
PUBLIC 6c617 0 NodeRequestSynchronization
PUBLIC 6c6d7 0 NodeSetNewQuery
PUBLIC 6c7c8 0 NodeCancelOperation
PUBLIC 6c908 0 NodeOperateWithAuthorizationData
PUBLIC 6ca0d 0 NodeTaskGetType
PUBLIC 6ca8f 0 NodeSetVirtualChildIndex
PUBLIC 6cbbc 0 _NodeSetSpatialDataBulk
PUBLIC 6cdff 0 NodeAliasSetTarget
PUBLIC 6cff5 0 NodeCreateNewChild(unsigned long, OpaqueNodeRef*, TChildCreator const&, OpaqueNodeRef**, OpaqueNodeRequest*)
PUBLIC 6d2e1 0 NodeCreateNewFile
PUBLIC 6d453 0 NodeCreateNewClipping
PUBLIC 6d5c3 0 NodeCreateNewLocation
PUBLIC 6d734 0 NodeCreateNewAlias
PUBLIC 6d8b3 0 NodeCreateNewFolder
PUBLIC 6da2d 0 NodeTaskGetProperty
PUBLIC 6daa1 0 NodeTaskGetStatus
PUBLIC 6db23 0 NodeTaskGetNode
PUBLIC 6dc08 0 NodeTaskCancel
PUBLIC 6dca5 0 NodeTaskGetPropertyList
PUBLIC 6ddbc 0 NodeCopyFromPathName
PUBLIC 6e0ab 0 NodeEventCopyResolvedParent
PUBLIC 6e1da 0 NodeEventCopyFSPermissionInfo
PUBLIC 6e251 0 NodeEventGetClippingData
PUBLIC 6e2ce 0 NodeEventGetLocationData
PUBLIC 6e32b 0 NodeEventGetTask
PUBLIC 6e3be 0 NodeEventGetModifiers
PUBLIC 6e41f 0 NodeEventGetString
PUBLIC 6e481 0 NodeEventGetMDAttributeValues
PUBLIC 6e4e3 0 NodeEventGetSuboperation
PUBLIC 6e56a 0 _FSBackupOperation
PUBLIC 6e85f 0 _FSOperation
PUBLIC 6eb41 0 _NodeOperation
PUBLIC 6ede6 0 _NodeSetMetaDataForBackup
PUBLIC 6f05e 0 _NodeSizer
PUBLIC 6f30d 0 _NodeSizing
PUBLIC 6f5e4 0 _NodeSetPropertyListForRef
PUBLIC 6f791 0 _NodeCopyPropertyListForRef
PUBLIC 6fa41 0 _NodeCopyProperties
PUBLIC 6fbbf 0 _NodeSetCommentForRef
PUBLIC 6ffd8 0 _NodeSetCommentForURL
PUBLIC 70321 0 _CopyPropertyStore
PUBLIC 7050a 0 GetNodeDataAsURL
PUBLIC 70609 0 NodeCreateNewQueryNode
PUBLIC 70971 0 NodeCreateNewVirtualFolder
PUBLIC 70c19 0 NodeCopyPropertyAsCFNumber
PUBLIC 70d61 0 NodeCopyPropertyAsCFDate
PUBLIC 70df8 0 NodeCopyPropertyAsCFData
PUBLIC 70eec 0 NodeCopyPropertyAsCFString
PUBLIC 70fe2 0 NodeGetPropertyAsCFAbsoluteTime
PUBLIC 71046 0 NodeGetPropertyAsOSType
PUBLIC 7108f 0 NodeGetPropertyAsInt32
PUBLIC 710d5 0 NodeGetPropertyAsInt16
PUBLIC 7111b 0 NodeGetPropertyAsByte
PUBLIC 71161 0 NodeGetPropertyAsBoolean
PUBLIC 711b9 0 NodeCopyMDAttributeForHit
PUBLIC 71273 0 _NodeMarkAsUsed
PUBLIC 71361 0 _NodeNumberCompareWithError
PUBLIC 71431 0 NodeNumberCompare
PUBLIC 71462 0 _NodeStringCompareWithError
PUBLIC 71617 0 NodeStringCompare
PUBLIC 71648 0 NodeCreateVirtualChildAtIndexIn
PUBLIC 71807 0 NodeCreateNewVirtualChildAtIndex
PUBLIC 71be0 0 NodeVolumeEject
PUBLIC 71d73 0 NodeVolumeUnmount
PUBLIC 71f26 0 NodeName
PUBLIC 71f97 0 NodeCopyPhysicalParentNode
PUBLIC 720a5 0 NodeCopyChildFromName
PUBLIC 7245c 0 NodeIsContainer(TNode*)
PUBLIC 724a8 0 NodeIsContainer
PUBLIC 7251b 0 _NodeCopyOpenFolder
PUBLIC 726ef 0 _NodeCreateAliasFile
PUBLIC 72934 0 _NodeCopyPermissions
PUBLIC 729d6 0 _NodeSizerWithSkipProc
PUBLIC 72cb0 0 TNodeEvent::RemoveClientQueue(OpaqueEventQueue*)
PUBLIC 72d14 0 TNodeEvent::GetModifiers() const
PUBLIC 72da4 0 TNodeEvent::CopyPermissionInfo(FSPermissionInfo&) const
PUBLIC 72e5e 0 TNodeEvent::GetSuboperation() const
PUBLIC 72ed4 0 TNodeEvent::NodeEventFinalize()
PUBLIC 72f61 0 TCountedPtr<TNotifier>* std::__uninitialized_copy_aux<__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier> const*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >, TCountedPtr<TNotifier>*>(__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier> const*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >, __gnu_cxx::__normal_iterator<TCountedPtr<TNotifier> const*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >, TCountedPtr<TNotifier>*, std::__false_type)
PUBLIC 72fe2 0 TTaskThread::~TTaskThread()
PUBLIC 73002 0 TTaskThread::~TTaskThread()
PUBLIC 7301c 0 TTaskMonitor::FinalizeLock()
PUBLIC 7305b 0 __SystemNotificationTaskProc_block_invoke_1
PUBLIC 73060 0 TSystemNotificationTask::Cancelled()
PUBLIC 7307c 0 TSystemNotificationTask::Cancel()
PUBLIC 73098 0 TSystemNotificationTask::UMNotificationCallback(__CFNotificationCenter*, void*, __CFString const*, void const*, __CFDictionary const*)
PUBLIC 7324e 0 TNodeOperationTask::PerformOperation(OperationRecord*)
PUBLIC 73258 0 TNodeOperationTask::AllowSleep()
PUBLIC 73270 0 TNodeOperationTask::RequestPermissionsOperation(TCountedPtr<TPermissionsRequest> const&)
PUBLIC 73278 0 TNodeOperationTask::Cancel()
PUBLIC 732c2 0 TNodeOperationTask::~TNodeOperationTask()
PUBLIC 7336c 0 TNodeOperationTask::~TNodeOperationTask()
PUBLIC 733f6 0 OpaqueOperationRef** std::__copy_backward<true, std::random_access_iterator_tag>::__copy_b<OpaqueOperationRef*>(OpaqueOperationRef* const*, OpaqueOperationRef* const*, OpaqueOperationRef**)
PUBLIC 73426 0 TFolderSizingThread::CancelSizing()
PUBLIC 73433 0 RetainChildAtIndex(void*)
PUBLIC 73454 0 TNodeTask::GetIndex() const
PUBLIC 734a6 0 TNodeTask::GetPermissions() const
PUBLIC 73544 0 TNodeTask::GetChildCreator() const
PUBLIC 735e2 0 TNodeTask::GetFSVolumeInfo() const
PUBLIC 736bc 0 TNodeTask::GetFSInfo() const
PUBLIC 73796 0 TNodeTask::GetChild() const
PUBLIC 73874 0 TCountedPtr<TFSInfo>* std::__copy_backward<false, std::random_access_iterator_tag>::__copy_b<TCountedPtr<TFSInfo>*, TCountedPtr<TFSInfo>*>(TCountedPtr<TFSInfo>*, TCountedPtr<TFSInfo>*, TCountedPtr<TFSInfo>*)
PUBLIC 738ae 0 StOpenResourceForkReadOnly::Opened() const
PUBLIC 738c0 0 StOpenResourceForkReadOnly::GetResource(unsigned long, short, long&) const
PUBLIC 7391c 0 StOpenResourceForkReadOnly::~StOpenResourceForkReadOnly()
PUBLIC 7392e 0 StOpenResourceFork::Close()
PUBLIC 73954 0 StOpenResourceFork::RemoveExistingResource(unsigned long, short)
PUBLIC 739ba 0 StOpenResourceFork::AddResource(unsigned long, short, char**) const
PUBLIC 73a06 0 StOpenResourceFork::StOpenResourceFork(TCountedPtr<TFSInfo> const&, signed char)
PUBLIC 73a40 0 StOpenResourceForkReadOnly::StOpenResourceForkReadOnly(TCountedPtr<TFSInfo> const&, bool)
PUBLIC 73a7a 0 StOpenResourceFork::~StOpenResourceFork()
PUBLIC 73a9e 0 _ParentXNotifyGetRequestedOperation
PUBLIC 73ac7 0 _ParentXNotifyGetTargetName
PUBLIC 73b21 0 _ParentXNotifySetOperationCurrentTarget
PUBLIC 73b82 0 _ParentXNotifyFlushRootLock
PUBLIC 73bf7 0 _ParentXNotifyGetRootLock
PUBLIC 73d4f 0 _ParentXNotifyFlushLock
PUBLIC 73e7e 0 _ParentXNotifyReportOperationError
PUBLIC 74019 0 _ParentXNotifyOperationStatus
PUBLIC 741aa 0 _ParentXNotifyTrashError
PUBLIC 74345 0 _ParentXNotifyTrashDone
PUBLIC 743a9 0 _ParentXNotifyTrashStatus
PUBLIC 744b6 0 _ParentXNotifyPreflightResults
PUBLIC 745b8 0 TClientQuery::SetSortContext(NodeClientContext)
PUBLIC 7461a 0 TNodeQuery::HitEqual(void const*, void const*)
PUBLIC 74636 0 TNodeQuery::AddPtrReference()
PUBLIC 74652 0 TClientQuery::AddPtrReference()
PUBLIC 74666 0 TNodeQuery::HandleAddResultAtEnd(TNode*, bool)
PUBLIC 746e8 0 TClientQuery::~TClientQuery()
PUBLIC 7474c 0 TClientQuery::RemovePtrReference()
PUBLIC 74782 0 TClientQuery::TClientQuery(__CFString const*, __CFArray const*, unsigned long, __CFArray const*, __CFArray const*, long (*)(void const* const*, void const* const*, void*), NodeClientContext, long, unsigned long)
PUBLIC 7484c 0 TClientQuery::TClientQuery(__CFString const*, __CFArray const*, unsigned long, __CFArray const*, __CFArray const*, long (*)(void const* const*, void const* const*, void*), NodeClientContext, long, unsigned long)
PUBLIC 74856 0 TNodeQuery::HitRelease(__CFAllocator const*, void const*)
PUBLIC 748b4 0 TNodeQuery::HitRetain(__CFAllocator const*, void const*)
PUBLIC 74920 0 TNodeQuery::TestAndSetIsCancelled()
PUBLIC 749a2 0 TNodeQuery::StartQuery()
PUBLIC 74c5a 0 TNodeQuery::SetHitsNode(TNode*)
PUBLIC 74d34 0 TNodeQuery::HitCreateItem(__MDQuery*, __MDItem*, void*)
PUBLIC 74d6e 0 TNodeQuery::InitializeHit(TNode*, long)
PUBLIC 74e82 0 TNodeQuery::DidUpdateCallBack(__CFNotificationCenter*, void*, __CFString const*, void const*, __CFDictionary const*)
PUBLIC 7526c 0 TNodeQuery::AddAllChildren()
PUBLIC 75324 0 TNodeQuery::ProgressCallBack(__CFNotificationCenter*, void*, __CFString const*, void const*, __CFDictionary const*)
PUBLIC 75418 0 TNodeQuery::DidFinishCallBack(__CFNotificationCenter*, void*, __CFString const*, void const*, __CFDictionary const*)
PUBLIC 75521 0 QueryRetainCallBack(void const*)
PUBLIC 75546 0 TNodeQuery::Retain(void*)
PUBLIC 75566 0 TNodeQuery::~TNodeQuery()
PUBLIC 75670 0 TNodeQuery::RemovePtrReference()
PUBLIC 756aa 0 QueryReleaseCallBack(void const*)
PUBLIC 75704 0 TNodeQuery::Release(void*)
PUBLIC 75716 0 TNodeQuery::StopQuery()
PUBLIC 75a80 0 TNodeQuery::CancelQuery(void*)
PUBLIC 75a92 0 TNodeQuery::StopAnyQueries()
PUBLIC 75b2c 0 TNodeQuery::HandleComparatorChanged(void*)
PUBLIC 75c98 0 TNodeQuery::SetSortComparator(long (*)(void const* const*, void const* const*, void*), NodeClientContext)
PUBLIC 75d90 0 TNodeQuery::TNodeQuery(TCountedPtr<TClientQuery> const&)
PUBLIC 7605a 0 TNodeQuery::TNodeQuery(TCountedPtr<TClientQuery> const&)
PUBLIC 76064 0 std::_Rb_tree<TNodeQuery*, TNodeQuery*, std::_Identity<TNodeQuery*>, std::less<TNodeQuery*>, std::allocator<TNodeQuery*> >::_M_erase(std::_Rb_tree_node<TNodeQuery*>*)
PUBLIC 7609e 0 LockMDQueryGetResultCount(__MDQuery*)
PUBLIC 760fe 0 std::_Rb_tree<TNodeQuery*, TNodeQuery*, std::_Identity<TNodeQuery*>, std::less<TNodeQuery*>, std::allocator<TNodeQuery*> >::erase(std::_Rb_tree_iterator<TNodeQuery*>)
PUBLIC 7612c 0 std::_Rb_tree<TNodeQuery*, TNodeQuery*, std::_Identity<TNodeQuery*>, std::less<TNodeQuery*>, std::allocator<TNodeQuery*> >::erase(std::_Rb_tree_iterator<TNodeQuery*>, std::_Rb_tree_iterator<TNodeQuery*>)
PUBLIC 76196 0 std::_Rb_tree<TNodeQuery*, TNodeQuery*, std::_Identity<TNodeQuery*>, std::less<TNodeQuery*>, std::allocator<TNodeQuery*> >::erase(TNodeQuery* const&)
PUBLIC 7622e 0 std::_Rb_tree<TNodeQuery*, TNodeQuery*, std::_Identity<TNodeQuery*>, std::less<TNodeQuery*>, std::allocator<TNodeQuery*> >::_M_create_node(TNodeQuery* const&)
PUBLIC 76262 0 std::_Rb_tree<TNodeQuery*, TNodeQuery*, std::_Identity<TNodeQuery*>, std::less<TNodeQuery*>, std::allocator<TNodeQuery*> >::_M_insert(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, TNodeQuery* const&)
PUBLIC 762d6 0 std::_Rb_tree<TNodeQuery*, TNodeQuery*, std::_Identity<TNodeQuery*>, std::less<TNodeQuery*>, std::allocator<TNodeQuery*> >::_M_insert_unique(TNodeQuery* const&)
PUBLIC 76362 0 std::set<TNodeQuery*, std::less<TNodeQuery*>, std::allocator<TNodeQuery*> >::insert(TNodeQuery* const&)
PUBLIC 7639e 0 TQueryTask::~TQueryTask()
PUBLIC 763f6 0 TQueryTask::~TQueryTask()
PUBLIC 76400 0 TQueryTask::QueryTaskProc(void*)
PUBLIC 764f4 0 TQueryTask::TQueryTask(TCountedPtr<TNodeQuery>)
PUBLIC 7656a 0 TQueryTask::TQueryTask(TCountedPtr<TNodeQuery>)
PUBLIC 76574 0 TQueryTask::CancelQuery(TCountedPtr<TNodeQuery>)
PUBLIC 766da 0 TQueryTask::~TQueryTask()
PUBLIC 7673c 0 FSSetOperationCurrentTarget(unsigned long long, unsigned long long)
PUBLIC 76741 0 FSFlushLock(TCountedPtr<TCFURLInfo> const&, OpaqueIconRef* const&)
PUBLIC 76746 0 FSGetRootLock(TCountedPtr<TCFURLInfo> const&, unsigned long long&)
PUBLIC 7674d 0 FSGetRequestedOperation(unsigned long long)
PUBLIC 76757 0 FSFinalizeOperation()
PUBLIC 7675c 0 FSSetOwner()
PUBLIC 76761 0 FSSizerCheckForCancel(unsigned long long)
PUBLIC 7676a 0 FSFlushRootLock(unsigned long long, TCountedPtr<TCFURLInfo> const&, unsigned long long)
PUBLIC 76782 0 TFSCopyOperation::CopyToTarget()
PUBLIC 76a26 0 TFSCopyOperation::CopyPreflight(unsigned long long&, unsigned long long&, unsigned long long&)
PUBLIC 76c6a 0 TFSCopyOperation::GetVolumeData(TCountedPtr<TCFURLInfo> const&, short&, bool&)
PUBLIC 76d66 0 FSGetTargetName(unsigned long long, TCountedPtr<TCFURLInfo> const&, TUString&)
PUBLIC 76e30 0 FSSizerUpdate(unsigned long long, TCountedPtr<TCFURLInfo> const&, long long, long long, long long, bool)
PUBLIC 7700d 0 FSCancelOperationRequested(unsigned long long)
PUBLIC 7706c 0 MoveToTrashName(__CFString const*, __CFString const*, NodeClientContext*, __CFString const**)
PUBLIC 77212 0 FSUpdateOperationStatus(void const*, TCountedPtr<TCFURLInfo> const&, long long, long long, long long, long long, unsigned long)
PUBLIC 773f2 0 TFSCopyOperation::DeleteExisting(TUString const&)
PUBLIC 774a4 0 TFSCopyOperation::GetTargetPropertyStore(TCountedPtr<TCFURLInfo>&)
PUBLIC 777d6 0 TFSCopyOperation::MoveProperties(THFSPlusExtendedPropertyIterator&, TCountedPtr<TCFURLInfo>&, TUString const&)
PUBLIC 778c6 0 TFSCopyOperation::GetSourcePropertyStore(TCountedPtr<TCFURLInfo> const&)
PUBLIC 77bf6 0 TFSCopyOperation::CopyExtendedProperties(TCountedPtr<TCFURLInfo> const&, TCountedPtr<TCFURLInfo>&, TUString const&)
PUBLIC 77d88 0 TFSCopyOperation::CopyProperties(TCountedPtr<TCFURLInfo> const&, TCountedPtr<TCFURLInfo>&, TUString const&, bool)
PUBLIC 77e4e 0 TFSCopyOperation::DoMoveToTrash(TCountedPtr<TCFURLInfo> const&)
PUBLIC 782c9 0 FSReportError(void const*, TCountedPtr<TCFURLInfo> const&, TCountedPtr<TCFURLInfo> const&, TUString const&, TCountedPtr<TCFURLInfo> const&, long, unsigned char)
PUBLIC 78592 0 TFSCopyOperation::CopyCreateTarget(TCountedPtr<TCFURLInfo> const&, TCountedPtr<TCFURLInfo>&)
PUBLIC 78936 0 TFSCopyOperation::DoCopy(TCountedPtr<TCFURLInfo> const&)
PUBLIC 78d1e 0 TFSCopyOperation::DoMove(TCountedPtr<TCFURLInfo> const&)
PUBLIC 79204 0 TFSCopyOperation::Run()
PUBLIC 792d8 0 TFSCopyOperation::~TFSCopyOperation()
PUBLIC 793ac 0 TFSCopyOperation::~TFSCopyOperation()
PUBLIC 793b6 0 TFSCopyOperation::TFSCopyOperation(void const*, unsigned long, TCountedPtr<TCFURLInfo> const&, TCountedPtr<TCFURLInfo> const&, __CFString const*, unsigned long, _NodeOperationCopyCallbacks, _FSCopyCallbacks*, unsigned char (**)(void const*, FSRef const*, HFSUniStr255 const*, unsigned long, FSCatalogInfo const*, FSRef const*, unsigned char*, FSRef*), unsigned long, NodeClientContext*)
PUBLIC 796ae 0 TFSCopyOperation::TFSCopyOperation(void const*, unsigned long, TCountedPtr<TCFURLInfo> const&, TCountedPtr<TCFURLInfo> const&, __CFString const*, unsigned long, _NodeOperationCopyCallbacks, _FSCopyCallbacks*, unsigned char (**)(void const*, FSRef const*, HFSUniStr255 const*, unsigned long, FSCatalogInfo const*, FSRef const*, unsigned char*, FSRef*), unsigned long, NodeClientContext*)
PUBLIC 796b7 0 FSPostProcess(void const*, TCountedPtr<TCFURLInfo> const&, TCountedPtr<TCFURLInfo> const&, unsigned long)
PUBLIC 79912 0 FSPreProcess(void const*, TCountedPtr<TCFURLInfo> const&, TCountedPtr<TCFURLInfo> const&, TCountedPtr<TCFURLInfo>&)
PUBLIC 79e1a 0 TNotifier::FinalizeTickleLock()
PUBLIC 79e58 0 TNotifier::FinalizeRegistrationLock()
PUBLIC 79e96 0 TNotifierList::TNotifierList()
PUBLIC 79f4e 0 TClientChangeNotifier** std::__copy_backward<true, std::random_access_iterator_tag>::__copy_b<TClientChangeNotifier*>(TClientChangeNotifier* const*, TClientChangeNotifier* const*, TClientChangeNotifier**)
PUBLIC 79f7e 0 TCountedPtr<TNotifier>* std::__copy_backward<false, std::random_access_iterator_tag>::__copy_b<TCountedPtr<TNotifier>*, TCountedPtr<TNotifier>*>(TCountedPtr<TNotifier>*, TCountedPtr<TNotifier>*, TCountedPtr<TNotifier>*)
PUBLIC 79fb8 0 GetNodeAsFSSpec
PUBLIC 79fbf 0 GetFSSpecAsNode
PUBLIC 79fc6 0 AEDescToFSSpec
PUBLIC 79fcd 0 AEDescHasChildNew
PUBLIC 79fd4 0 GetNodePropertyAsRGBColor
PUBLIC 79fde 0 SetNodePropertyAsRGBColor
PUBLIC 79fe8 0 GetNodeAsPathNameNew
PUBLIC 79ff2 0 SetChildrenPermissions
PUBLIC 79ffc 0 NodeCancelRequest
PUBLIC 7a001 0 GetNextTypedDataForIterator(TypedDataIterator const&, TypedDataRecord&)
PUBLIC 7a06b 0 GetFirstTypedDataForIterator(TypedDataIterator const&, TypedDataRecord&)
PUBLIC 7a0d5 0 NodeEventGetActiveParent
PUBLIC 7a0de 0 NodeRegisterChildChangedNotification
PUBLIC 7a1a4 0 NodeRegisterPropertyChangedNotification
PUBLIC 7a259 0 NodeHasChildNew
PUBLIC 7a310 0 NodeCreateNewFileInNew
PUBLIC 7a385 0 NodeCreateNewLocationInNew
PUBLIC 7a401 0 NodeCreateNewAliasInNew
PUBLIC 7a47d 0 NodeCreateNewContainerInNew
PUBLIC 7a4f2 0 SetNodePropertyAsUTCDateTime
PUBLIC 7a528 0 SetNodePropertyAsInt32
PUBLIC 7a55e 0 GetNodePropertyAsDataNew
PUBLIC 7a5f3 0 GetNodePropertyAsStringNew
PUBLIC 7a64c 0 GetNodePropertyAsInt64
PUBLIC 7a6c6 0 GetNodePropertyAsByte
PUBLIC 7a740 0 FlushCatalogs
PUBLIC 7a749 0 CloseCatalog
PUBLIC 7a752 0 InitializeCatalog
PUBLIC 7a75b 0 GetNextClippingData(TypedDataIterator*, TypedDataRecord*)
PUBLIC 7a8d5 0 _NodeSetVirtualQuery
PUBLIC 7a983 0 NodeSetVirtualQuery
PUBLIC 7aa36 0 NodeCreateNewVirtualQueryNode
PUBLIC 7ab08 0 GetVolumeNode
PUBLIC 7ab11 0 GetNodeAsPathName
PUBLIC 7abc8 0 NodeSortedNumberIteratorNext
PUBLIC 7abd1 0 NodeSortedStringIteratorNext
PUBLIC 7abda 0 NodeSortedNumberIteratorFirst
PUBLIC 7abe3 0 NodeSortedStringIteratorFirst
PUBLIC 7abec 0 NewNodeSortedNumberIterator
PUBLIC 7acb0 0 NewNodeSortedStringIterator
PUBLIC 7ad74 0 NewNodeIterator
PUBLIC 7ae12 0 NodeIsClientNodeRef
PUBLIC 7ae28 0 VolumeUnmount
PUBLIC 7ae78 0 VolumeEject
PUBLIC 7aec4 0 NodeFindChildNew
PUBLIC 7af49 0 GetPathNameAsNode
PUBLIC 7afb9 0 SetNodePropertyAsDateTime
PUBLIC 7affb 0 SetNodePropertyAsInt64
PUBLIC 7b03d 0 GetNodePropertyAsDateTime
PUBLIC 7b0b7 0 SetNodePropertyAsStringNew
PUBLIC 7b0fc 0 _GetNodePropertyAsStringNew
PUBLIC 7b191 0 GetNodePropertyAsUTCDateTime
PUBLIC 7b20b 0 GetNodePropertyAsInt32
PUBLIC 7b285 0 SetNodePropertyAsIconRef
PUBLIC 7b2bb 0 SetNodePropertyAsPoint
PUBLIC 7b2f1 0 SetNodePropertyAsDataNew
PUBLIC 7b336 0 SetNodePropertyAsBoolean
PUBLIC 7b374 0 SetNodePropertyAsByte
PUBLIC 7b3b0 0 SetNodePropertyAsOSType
PUBLIC 7b3e6 0 SetNodePropertyAsInt16
PUBLIC 7b423 0 _NodeCreateNewVirtualQueryNode
PUBLIC 7b568 0 NodeSetAliasTarget
PUBLIC 7b61f 0 NodeGetOriginal
PUBLIC 7b6fa 0 NodeFollowAlias
PUBLIC 7b7d5 0 GetNodeAsAEDesc
PUBLIC 7b84c 0 NodeCreateNewClippingInNew
PUBLIC 7b9f5 0 DisposeDataIterator(TypedDataIterator*)
PUBLIC 7ba57 0 GetFirstClippingData(TypedDataIterator*, TypedDataRecord*)
PUBLIC 7badf 0 _NodeSetVirtualQueryPlus
PUBLIC 7bc0c 0 _NodeCreateNewVirtualQueryNodePlus
PUBLIC 7bd51 0 NodeMapNameToUserOrGroupIDNew
PUBLIC 7be1b 0 NodeMapUserOrGroupIDToNameNew
PUBLIC 7bf04 0 NodeGetDisplayAttributes
PUBLIC 7bf9d 0 NodeGetMDAttributes
PUBLIC 7c052 0 NodeCopyMDAttribute
PUBLIC 7c115 0 DisposeVolumeIterator
PUBLIC 7c17b 0 VolumeIteratorNext
PUBLIC 7c247 0 VolumeIteratorFirst
PUBLIC 7c313 0 DeleteNode
PUBLIC 7c408 0 NewDummyChangeNotifier(NodeClientContext)
PUBLIC 7c4cd 0 NodeUnRegisterChildChangedNotification
PUBLIC 7c532 0 NodeUnRegisterPropertyChangedNotification
PUBLIC 7c597 0 _NodeSyncSync
PUBLIC 7c611 0 GetDataAsClipping(TNode*, TypedDataIterator*)
PUBLIC 7c755 0 GetNodeDataAsClipping
PUBLIC 7c7cc 0 GetAEDescAsNode
PUBLIC 7c9dc 0 DisposeNodeSortedStringIterator
PUBLIC 7c9e5 0 DisposeNodeSortedNumberIterator
PUBLIC 7c9ee 0 TChildrenList::SetLastResizeDuration(double)
PUBLIC 7c9fc 0 TChildrenList::GetSubscriptionFileDescriptor() const
PUBLIC 7ca08 0 TChildrenList::SetSubscriptionFileDescriptor(int)
PUBLIC 7ca16 0 TChildrenList::SetLastNotifyTime(double)
PUBLIC 7ca24 0 TChildrenList::LastNotifyTime() const
PUBLIC 7ca30 0 TChildrenList::SetNotifyPending(bool)
PUBLIC 7ca50 0 TChildrenList::DecrementSubscriptionCount()
PUBLIC 7ca5e 0 TChildrenList::IncrementSubscriptionCount()
PUBLIC 7ca6c 0 TChildrenList::SubscribeWithKQueue()
PUBLIC 7caec 0 TChildrenList::~TChildrenList()
PUBLIC 7cb54 0 TChildrenList::~TChildrenList()
PUBLIC 7cb5e 0 TChildrenList::FindDisplayName(TUString const&)
PUBLIC 7cbe6 0 TChildrenList::UnsubscribeWithKQueue()
PUBLIC 7cc66 0 TChildrenList::RemoveChild(TNode*)
PUBLIC 7ccc6 0 TChildrenList::DumpChildren() const
PUBLIC 7ce40 0 std::_Vector_base<TNode*, std::allocator<TNode*> >::~_Vector_base()
PUBLIC 7ce58 0 std::vector<TNode*, std::allocator<TNode*> >::~vector()
PUBLIC 7ce62 0 std::vector<TNode*, std::allocator<TNode*> >::erase(__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >, __gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >)
PUBLIC 7ceae 0 TPermissionsOperation::PerformOperation(TCountedPtr<TOperationRecord> const&)
PUBLIC 7ceb6 0 TPermissionsOperation::NeedsAuthentication(TCountedPtr<TOperationRecord> const&)
PUBLIC 7cec0 0 TPermissionsOperation::TransformOperations()
PUBLIC 7cec8 0 TPermissionsOperation::LogOperationName(TCountedPtr<TOperationRecord> const&) const
PUBLIC 7ceda 0 TPermissionsOperation::ConvertACLToText(__FSFileSecurity*, long&) const
PUBLIC 7cf64 0 TPermissionsRequest::AddPtrReference()
PUBLIC 7cf78 0 TPermissionsRequest::TPermissionsRequest(OpaqueOperationRef*, unsigned long, __FSFileSecurity*)
PUBLIC 7cfa6 0 TPermissionsOperation::ResolveConflict(TCountedPtr<TOperationRecord> const&)
PUBLIC 7d882 0 TPermissionsRequest::RemovePtrReference()
PUBLIC 7d8c0 0 TPermissionsOperation::~TPermissionsOperation()
PUBLIC 7d924 0 TPermissionsOperation::~TPermissionsOperation()
PUBLIC 7d980 0 TPermissionsOperation::~TPermissionsOperation()
PUBLIC 7d98a 0 TPermissionsOperation::TPermissionsOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 7d9da 0 TPermissionsOperation::GetSuboperation() const
PUBLIC 7d9fc 0 TCountedPtr<TPermissionsRequest>::operator=(TCountedPtr<TPermissionsRequest> const&)
PUBLIC 7da40 0 TPermissionsOperation::SetRequest(TCountedPtr<TPermissionsRequest> const&)
PUBLIC 7da54 0 TPermissionsOperationTask::TransformOperations()
PUBLIC 7da5c 0 TPermissionsOperationTask::~TPermissionsOperationTask()
PUBLIC 7dab8 0 TPermissionsOperationTask::~TPermissionsOperationTask()
PUBLIC 7db0c 0 TPermissionsOperationTask::~TPermissionsOperationTask()
PUBLIC 7db16 0 TPermissionsOperationTask::TPermissionsOperationTask(TCountedPtr<TOperation> const&)
PUBLIC 7db82 0 TPermissionsOperationTask::TPermissionsOperationTask(TCountedPtr<TOperation> const&)
PUBLIC 7db8c 0 TPermissionsOperationTask::RequestPermissionsOperation(TCountedPtr<TPermissionsRequest> const&)
PUBLIC 7dc64 0 TPermissionsOperationTask::HandlePermissionsRequest(TCountedPtr<TPermissionsRequest> const&)
PUBLIC 7dcde 0 TPermissionsOperationTask::OperationTaskProcedure()
PUBLIC 7df16 0 -[FINode asTNode]
PUBLIC 7df1e 0 -[FINode retainCount]
PUBLIC 7df28 0 -[FINode description]
PUBLIC 7df3a 0 TNode::CreateNode(TNodeQuery*, __MDItem*)
PUBLIC 7df88 0 TVolumeSyncThread::CancelSynching()
PUBLIC 7df94 0 TVolumeSyncThread::WaitOnExit(bool)
PUBLIC 7dfa2 0 TVolumeSyncThread::ShouldWaitOnExit() const
PUBLIC 7dfae 0 TVolumeSyncThread::SynchingCanceled() const
PUBLIC 7dfbb 0 NWBrowserReleaseCallBack(void const*)
PUBLIC 7dfc5 0 __SetTimerToHandleNotifyRequest_block_invoke_4
PUBLIC 7e02c 0 TVolumeSyncThread::SetTimerToHandleNotifyRequest(TNode*, double)
PUBLIC 7e15c 0 __CancelSizingThread_block_invoke_1
PUBLIC 7e161 0 __CancelSyncThread_block_invoke_2
PUBLIC 7e166 0 TFSVolumeInfo::SetIsNetworkRemoteDisk(bool)
PUBLIC 7e1c0 0 TFSVolumeInfo::GetVolumeFormat() const
PUBLIC 7e1cc 0 TFSVolumeInfo::CaseSensitive() const
PUBLIC 7e1de 0 TFSVolumeInfo::VolumeSuitableAsBackupTarget(short, bool)
PUBLIC 7e322 0 TFSVolumeInfo::LowLevelFlush()
PUBLIC 7e3b0 0 TFSVolumeInfo::GetCapacity() const
PUBLIC 7e3de 0 TFSVolumeInfo::GetVolumeFormatString() const
PUBLIC 7e554 0 TFSVolumeInfo::IsIgnoreOwnership() const
PUBLIC 7e580 0 TFSVolumeInfo::MapNameToUserOrGroupID(bool, TUString const&, unsigned long&) const
PUBLIC 7e5b8 0 TFSVolumeInfo::MapUserOrGroupIDToName(bool, unsigned long, TUString&) const
PUBLIC 7e660 0 TFSVolumeInfo::MapNameToUserOrGroupUUID(bool, __CFString const*, __CFUUID const**) const
PUBLIC 7e69e 0 TFSVolumeInfo::MapUserOrGroupUUIDToName(bool, __CFUUID const*, __CFString const**) const
PUBLIC 7e6dc 0 TFSVolumeInfo::GetOpenFolderInfo() const
PUBLIC 7e704 0 TFSVolumeInfo::GetHiddenList()
PUBLIC 7ec38 0 TFSVolumeInfo::CancelSizingThread(bool)
PUBLIC 7ed22 0 TFSVolumeInfo::CancelSyncThread(bool)
PUBLIC 7ee18 0 TFSVolumeInfo::CancelThreads()
PUBLIC 7ee48 0 TFSVolumeInfo::RemoveProperties(unsigned long, TUString const&)
PUBLIC 7ef4c 0 TFSVolumeInfo::RemoveProperties(TCountedPtr<TFSInfo> const&)
PUBLIC 7ef82 0 TFSVolumeInfo::~TFSVolumeInfo()
PUBLIC 7f09a 0 TFSVolumeInfo::VolumeMapsFinalize()
PUBLIC 7f0fa 0 TFSVolumeInfo::FinalizeVolumeMaps()
PUBLIC 7f15c 0 TFSVolumeInfo::RemoveVolumeInfo()
PUBLIC 7f20a 0 TFSVolumeInfo::Finalize()
PUBLIC 7f316 0 TFSVolumeInfo::FinalizeVolume()
PUBLIC 7f5db 0 FinalizeAVolume(std::pair<long, TCountedPtr<TFSVolumeInfo> > const&)
PUBLIC 7f5f0 0 TFSVolumeInfo::Initialize(TCountedPtr<TVolumeSyncThread> const&, short, unsigned long, bool&)
PUBLIC 8038e 0 TFSVolumeInfo::AddVolume(TCountedPtr<TVolumeSyncThread> const&, short, unsigned long, TCountedPtr<TFSVolumeInfo>&, bool&)
PUBLIC 80602 0 TFSVolumeInfo::Unmount(int*)
PUBLIC 80654 0 TFSVolumeInfo::Eject(int*)
PUBLIC 80824 0 std::tr1::_Hashtable<long long, std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> >, std::allocator<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > >, std::_Select1st<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > >, std::equal_to<long long>, Int64Hasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::find(long long const&)
PUBLIC 80880 0 std::tr1::_Hashtable<long, std::pair<long const, TCountedPtr<TFSVolumeInfo> >, std::allocator<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::_Select1st<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::equal_to<long>, std::tr1::hash<long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::swap(std::tr1::_Hashtable<long, std::pair<long const, TCountedPtr<TFSVolumeInfo> >, std::allocator<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::_Select1st<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::equal_to<long>, std::tr1::hash<long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>&)
PUBLIC 808dc 0 std::_Vector_base<TUString, std::allocator<TUString> >::~_Vector_base()
PUBLIC 80938 0 std::tr1::_Hashtable<long long, std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> >, std::allocator<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > >, std::_Select1st<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > >, std::equal_to<long long>, Int64Hasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_allocate_buckets(unsigned long)
PUBLIC 8098a 0 std::tr1::_Hashtable<long long, std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> >, std::allocator<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > >, std::_Select1st<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > >, std::equal_to<long long>, Int64Hasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_rehash(unsigned long)
PUBLIC 80a0c 0 std::tr1::_Hashtable<long long, std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> >, std::allocator<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > >, std::_Select1st<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > >, std::equal_to<long long>, Int64Hasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_Hashtable(unsigned long, Int64Hasher const&, std::tr1::__detail::_Mod_range_hashing const&, std::tr1::__detail::_Default_ranged_hash const&, std::equal_to<long long> const&, std::_Select1st<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > > const&, std::allocator<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > > const&)
PUBLIC 80a6c 0 TCountedPtr<THFSPlusPropertyStore>* std::__copy_backward<false, std::random_access_iterator_tag>::__copy_b<TCountedPtr<THFSPlusPropertyStore>*, TCountedPtr<THFSPlusPropertyStore>*>(TCountedPtr<THFSPlusPropertyStore>*, TCountedPtr<THFSPlusPropertyStore>*, TCountedPtr<THFSPlusPropertyStore>*)
PUBLIC 80aa6 0 TUString* std::__copy_backward<false, std::random_access_iterator_tag>::__copy_b<TUString*, TUString*>(TUString*, TUString*, TUString*)
PUBLIC 80ae0 0 TUString* std::__uninitialized_copy_aux<TUString*, TUString*>(TUString*, TUString*, TUString*, std::__false_type)
PUBLIC 80b56 0 std::vector<TUString, std::allocator<TUString> >::~vector()
PUBLIC 80b9c 0 std::vector<TUString, std::allocator<TUString> >::_M_insert_aux(__gnu_cxx::__normal_iterator<TUString*, std::vector<TUString, std::allocator<TUString> > >, TUString const&)
PUBLIC 80d5c 0 std::vector<TUString, std::allocator<TUString> >::push_back(TUString const&)
PUBLIC 80daa 0 std::tr1::_Hashtable<long long, std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> >, std::allocator<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > >, std::_Select1st<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > >, std::equal_to<long long>, Int64Hasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_allocate_node(std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > const&)
PUBLIC 80e30 0 std::tr1::_Hashtable<long long, std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> >, std::allocator<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > >, std::_Select1st<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > >, std::equal_to<long long>, Int64Hasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_deallocate_node(std::tr1::__detail::_Hash_node<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> >, false>*)
PUBLIC 80e60 0 std::tr1::_Hashtable<long long, std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> >, std::allocator<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > >, std::_Select1st<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > >, std::equal_to<long long>, Int64Hasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_deallocate_nodes(std::tr1::__detail::_Hash_node<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> >, false>**, unsigned long)
PUBLIC 80ea6 0 std::tr1::_Hashtable<long long, std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> >, std::allocator<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > >, std::_Select1st<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > >, std::equal_to<long long>, Int64Hasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::~_Hashtable()
PUBLIC 80ee6 0 std::tr1::_Hashtable<long long, std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> >, std::allocator<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > >, std::_Select1st<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > >, std::equal_to<long long>, Int64Hasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_insert_bucket(std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > const&, unsigned long, unsigned long)
PUBLIC 80fac 0 std::tr1::__detail::_Map_base<long long, std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> >, std::_Select1st<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > >, true, std::tr1::_Hashtable<long long, std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> >, std::allocator<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > >, std::_Select1st<std::pair<long long const, TCountedPtr<THFSPlusPropertyStore> > >, std::equal_to<long long>, Int64Hasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true> >::operator[](long long const&)
PUBLIC 81060 0 std::tr1::_Hashtable<long, std::pair<long const, TCountedPtr<TFSVolumeInfo> >, std::allocator<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::_Select1st<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::equal_to<long>, std::tr1::hash<long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_Hashtable(std::tr1::_Hashtable<long, std::pair<long const, TCountedPtr<TFSVolumeInfo> >, std::allocator<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::_Select1st<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::equal_to<long>, std::tr1::hash<long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true> const&)
PUBLIC 8113c 0 std::tr1::_Hashtable<long, std::pair<long const, TCountedPtr<TFSVolumeInfo> >, std::allocator<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::_Select1st<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::equal_to<long>, std::tr1::hash<long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::operator=(std::tr1::_Hashtable<long, std::pair<long const, TCountedPtr<TFSVolumeInfo> >, std::allocator<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::_Select1st<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::equal_to<long>, std::tr1::hash<long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true> const&)
PUBLIC 8117c 0 std::tr1::_Hashtable<long, std::pair<long const, TCountedPtr<TFSVolumeInfo> >, std::allocator<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::_Select1st<std::pair<long const, TCountedPtr<TFSVolumeInfo> > >, std::equal_to<long>, std::tr1::hash<long>, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::erase(long const&)
PUBLIC 811e7 0 void (*std::for_each<std::tr1::__detail::_Hashtable_iterator<std::pair<long const, TCountedPtr<TFSVolumeInfo> >, false, false>, void (*)(std::pair<long, TCountedPtr<TFSVolumeInfo> > const&)>(std::tr1::__detail::_Hashtable_iterator<std::pair<long const, TCountedPtr<TFSVolumeInfo> >, false, false>, std::tr1::__detail::_Hashtable_iterator<std::pair<long const, TCountedPtr<TFSVolumeInfo> >, false, false>, void (*)(std::pair<long, TCountedPtr<TFSVolumeInfo> > const&)))(std::pair<long, TCountedPtr<TFSVolumeInfo> > const&)
PUBLIC 8127c 0 TCFURLInfo::SetIsInPackage(bool)
PUBLIC 812aa 0 TCFURLInfo::Close()
PUBLIC 812ba 0 TCFURLInfo::GetZeroCreationDate()
PUBLIC 81356 0 TCFURLInfo::GetMode() const
PUBLIC 813ce 0 TCFURLInfo::CopyCreationDate() const
PUBLIC 81416 0 TCFURLInfo::AddCopyACE(_acl*)
PUBLIC 815a8 0 TCFURLInfo::IsCopyOperationACE(_acl_entry*, acl_tag_t, _acl_permset*)
PUBLIC 8172c 0 TCFURLInfo::GetUserGroups() const
PUBLIC 817a2 0 TCFURLInfo::EverybodyUUID()
PUBLIC 81808 0 TCFURLInfo::AddBackupGuardACE(_acl*, bool)
PUBLIC 8197a 0 TCFURLInfo::IsSpecialFolderGuardACE(_acl_entry*, acl_tag_t, _acl_permset*)
PUBLIC 81aa4 0 TCFURLInfo::IsBackupGuardACE(_acl_entry*, acl_tag_t, _acl_permset*, bool)
PUBLIC 81c1a 0 TCFURLInfo::GetCreator() const
PUBLIC 81c9a 0 TCFURLInfo::QuarantineEAName()
PUBLIC 81d4e 0 TCFURLInfo::operator==(TCFURLInfo const&) const
PUBLIC 81d78 0 TCFURLInfo::SetIsLocked(bool)
PUBLIC 81dda 0 TCFURLInfo::SetResourceProperties(__CFDictionary const*)
PUBLIC 81e28 0 TCFURLInfo::IsHardlink() const
PUBLIC 81e5c 0 TCFURLInfo::GetFSIdentity() const
PUBLIC 81f26 0 TCFURLInfo::LSRegister() const
PUBLIC 81f52 0 TCFURLInfo::SetDataForkEmpty()
PUBLIC 81f80 0 TCFURLInfo::Delete(bool, bool)
PUBLIC 8202e 0 TCFURLInfo::DeleteDeep(bool, bool)
PUBLIC 820dc 0 TCFURLInfo::UserIsOwner() const
PUBLIC 8212a 0 TCFURLInfo::CreateFile(char const*, unsigned long, TUString const&, __FSFileSecurity*, bool, char*)
PUBLIC 8228e 0 TCFURLInfo::SetMDAttributeIfAppropriate(unsigned long, TPropertyInfo const*)
PUBLIC 823f4 0 TCFURLInfo::SetName(TUString const&)
PUBLIC 824d2 0 TCFURLInfo::CopyExtendedAttribute(char const*, __CFString const*, int, __CFData const**)
PUBLIC 82790 0 TDeepCFURLIterator::CurrentContainerInfo() const
PUBLIC 827ca 0 TCFURLInfo::SetQuarantineData(_qtn_file*&)
PUBLIC 8281e 0 TCFURLInfo::FNNotify() const
PUBLIC 82854 0 TCFURLInfo::MakePOSIXPath(char*, unsigned long, unsigned long&) const
PUBLIC 828ba 0 TCFURLInfo::MoveAndRenameTo(TCountedPtr<TCFURLInfo> const&, TUString*, TCountedPtr<TCFURLInfo>&) const
PUBLIC 82aa2 0 TCFURLInfo::FSReservationCreate() const
PUBLIC 82b7a 0 TDeepCFURLIterator::RecordHardlink(std::tr1::unordered_map<std::pair<unsigned long long, int>, std::pair<unsigned long long, int>, TINodeHasher, std::equal_to<std::pair<unsigned long long, int> >, std::allocator<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > >, false>*, TCountedPtr<TCFURLInfo>&)
PUBLIC 82d4e 0 TCFURLInfo::CopyUsingCopyFile(TCountedPtr<TCFURLInfo> const&, TUString const&, unsigned long, TCountedPtr<TCFURLInfo>&) const
PUBLIC 82eb6 0 TCFURLInfo::LinkObject(TCountedPtr<TCFURLInfo> const&, TUString const&, TCountedPtr<TCFURLInfo>&) const
PUBLIC 830b6 0 TCFURLInfo::CreateFile(TUString const&, TUniqueNamer*, __FSFileSecurity*, bool, TCountedPtr<TCFURLInfo>&) const
PUBLIC 83336 0 TCFURLInfo::GetParent(TCountedPtr<TCFURLInfo>&, bool) const
PUBLIC 8349e 0 TCFURLInfo::CopySymlinkFile(TCountedPtr<TCFURLInfo> const&, TUString const&, unsigned long, TCountedPtr<TCFURLInfo>&) const
PUBLIC 8387c 0 TDeepCFURLIterator::TDeepCFURLIterator(TCountedPtr<TCFURLInfo> const&, __CFArray const*, bool, bool, std::tr1::unordered_map<std::pair<unsigned long long, int>, std::pair<unsigned long long, int>, TINodeHasher, std::equal_to<std::pair<unsigned long long, int> >, std::allocator<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > >, false>*, std::stack<TReservationRecord*, std::deque<TReservationRecord*, std::allocator<TReservationRecord*> > >*, bool, bool)
PUBLIC 83968 0 TDeepCFURLIterator::TDeepCFURLIterator(TCountedPtr<TCFURLInfo> const&, __CFArray const*, bool, bool, std::tr1::unordered_map<std::pair<unsigned long long, int>, std::pair<unsigned long long, int>, TINodeHasher, std::equal_to<std::pair<unsigned long long, int> >, std::allocator<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > >, false>*, std::stack<TReservationRecord*, std::deque<TReservationRecord*, std::allocator<TReservationRecord*> > >*, bool, bool)
PUBLIC 83986 0 TCFURLInfo::CreateLockFile(TCountedPtr<TCFURLInfo> const&, TUString const*, __FSFileSecurity*, bool, TCountedPtr<TCFURLInfo>&) const
PUBLIC 83bbc 0 std::tr1::_Hashtable<std::pair<unsigned long long, int>, std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> >, std::allocator<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > >, std::_Select1st<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > >, std::equal_to<std::pair<unsigned long long, int> >, TINodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::find(std::pair<unsigned long long, int> const&)
PUBLIC 83c2a 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::back()
PUBLIC 83c4a 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_pop_back_aux()
PUBLIC 83c84 0 std::tr1::_Hashtable<std::pair<unsigned long long, int>, std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> >, std::allocator<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > >, std::_Select1st<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > >, std::equal_to<std::pair<unsigned long long, int> >, TINodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_deallocate_nodes(std::tr1::__detail::_Hash_node<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> >, false>**, unsigned long)
PUBLIC 83cc0 0 std::tr1::_Hashtable<std::pair<unsigned long long, int>, std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> >, std::allocator<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > >, std::_Select1st<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > >, std::equal_to<std::pair<unsigned long long, int> >, TINodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_allocate_buckets(unsigned long)
PUBLIC 83d12 0 std::tr1::_Hashtable<std::pair<unsigned long long, int>, std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> >, std::allocator<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > >, std::_Select1st<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > >, std::equal_to<std::pair<unsigned long long, int> >, TINodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_rehash(unsigned long)
PUBLIC 83db6 0 std::tr1::_Hashtable<std::pair<unsigned long long, int>, std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> >, std::allocator<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > >, std::_Select1st<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > >, std::equal_to<std::pair<unsigned long long, int> >, TINodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_insert_bucket(std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > const&, unsigned long, unsigned long)
PUBLIC 83eb2 0 std::tr1::__detail::_Map_base<std::pair<unsigned long long, int>, std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> >, std::_Select1st<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > >, true, std::tr1::_Hashtable<std::pair<unsigned long long, int>, std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> >, std::allocator<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > >, std::_Select1st<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > >, std::equal_to<std::pair<unsigned long long, int> >, TINodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true> >::operator[](std::pair<unsigned long long, int> const&)
PUBLIC 83f4f 0 TReservationRecord*** std::__copy_backward<true, std::random_access_iterator_tag>::__copy_b<TReservationRecord**>(TReservationRecord** const*, TReservationRecord** const*, TReservationRecord***)
PUBLIC 83f7e 0 TCFURLIterator** std::__copy_backward<true, std::random_access_iterator_tag>::__copy_b<TCFURLIterator*>(TCFURLIterator* const*, TCFURLIterator* const*, TCFURLIterator**)
PUBLIC 83fae 0 TCFURLInfo::GetLogicalSize() const
PUBLIC 84004 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_reallocate_map(unsigned long, bool)
PUBLIC 84154 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_reserve_map_at_back(unsigned long)
PUBLIC 84196 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_push_back_aux(TReservationRecord* const&)
PUBLIC 841fc 0 TOperationRecord::~TOperationRecord()
PUBLIC 84202 0 TOperationRecord::SetResolution(unsigned long)
PUBLIC 8421a 0 TOperationRecord::SetRequestedOperation(long)
PUBLIC 8422e 0 TOperationRecord::SetOperationOption(unsigned long)
PUBLIC 84242 0 TOperationRecord::SetNoConflict()
PUBLIC 8425a 0 TOperationRecord::TOperationRecord()
PUBLIC 84298 0 LocumParentDefs_server_routine
PUBLIC 842c3 0 _XNotifyGetRequestedOperation
PUBLIC 84384 0 _XNotifyGetTargetName
PUBLIC 84471 0 _XNotifyFlushRootLock
PUBLIC 84577 0 _XNotifyFlushLock
PUBLIC 8467d 0 _XNotifySetOperationCurrentTarget
PUBLIC 84737 0 _XNotifyReportOperationError
PUBLIC 848c5 0 _XNotifyGetRootLock
PUBLIC 849ba 0 _XNotifyOperationStatus
PUBLIC 84b68 0 _XNotifyTrashDone
PUBLIC 84c01 0 _XNotifyTrashStatus
PUBLIC 84cf9 0 _XNotifyPreflightResults
PUBLIC 84ddf 0 _XNotifyTrashError
PUBLIC 84f19 0 _ChildSecureEraseCancel
PUBLIC 84f77 0 _ChildDeleteBackupOperation
PUBLIC 8507c 0 _ChildRunCopyMoveOperation
PUBLIC 85232 0 _ChildRunDeleteOperation
PUBLIC 85337 0 _ChildRunTrashOperation
PUBLIC 854a5 0 _ChildPermissionsOperation
PUBLIC 8572c 0 _ChildRename
PUBLIC 8595d 0 _ChildCopyPermissions
PUBLIC 85b6b 0 _ChildDelete
PUBLIC 85d79 0 _ChildCreateLock
PUBLIC 86065 0 _ChildMoveRename
PUBLIC 86351 0 _ChildMove
PUBLIC 8660e 0 TCopyQueue::SetCurrentTarget(unsigned long long)
PUBLIC 8663e 0 TCopyQueue::DestinationSupportsSymlinks() const
PUBLIC 86650 0 TOperationErrorRecord::TOperationErrorRecord(long, long, unsigned long, TOperation*, TCountedPtr<TFSInfo> const&, bool)
PUBLIC 866e8 0 TOperationErrorRecord::TOperationErrorRecord(long, long, unsigned long, TOperation*, TCountedPtr<TFSInfo> const&, bool)
PUBLIC 866f2 0 TCopyErrorMonitor::FinalizeLock()
PUBLIC 86730 0 TOperationErrorRecord::TOperationErrorRecord(long, long, unsigned long, TOperation*, TCountedPtr<TCFURLInfo> const&, bool)
PUBLIC 867c8 0 TOperationErrorRecord::TOperationErrorRecord(long, long, unsigned long, TOperation*, TCountedPtr<TCFURLInfo> const&, bool)
PUBLIC 867d2 0 TCopyQueue::ReportErrorFromUnprotectedContext(long, TCountedPtr<TCFURLInfo> const&, TCountedPtr<TCFURLInfo> const&, TCountedPtr<TCFURLInfo> const&, TUString const&, TCountedPtr<TCFURLInfo> const&, bool)
PUBLIC 86968 0 TCopyErrorMonitor::TCopyErrorMonitor()
PUBLIC 869d8 0 TCopyReader::HandleError(long)
PUBLIC 86d00 0 TCopyWriter::SetSuppressPropertyCopyForBackup()
PUBLIC 86d16 0 TCopyWriter::SetAppendProtectionForBackup()
PUBLIC 86d28 0 TCopyWriter::ShouldExplicitlyCopyProperties()
PUBLIC 86d40 0 TCopyWriter::HandleFileSkip(unsigned long long const&)
PUBLIC 86e9c 0 TCopyWriter::SetInterCopyDelayInSeconds(unsigned long)
PUBLIC 86f1e 0 TCopyWriter::GetIconFileName()
PUBLIC 86f90 0 TCopyWriter::CopyUsingCopyFile(bool)
PUBLIC 87192 0 TCopyWriter::CopyUsingCopyFileAtRoot()
PUBLIC 87292 0 TCopyWriter::CopySymlinkFile(bool, unsigned long long)
PUBLIC 87516 0 TCopyWriter::CopySymlinkFileAtRoot()
PUBLIC 87626 0 std::tr1::_Hashtable<std::pair<unsigned long long, int>, std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> >, std::allocator<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > >, std::_Select1st<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > >, std::equal_to<std::pair<unsigned long long, int> >, TINodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::find(std::pair<unsigned long long, int> const&)
PUBLIC 87694 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> std::__copy<false, std::random_access_iterator_tag>::copy<std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> >(std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>)
PUBLIC 87758 0 std::tr1::_Hashtable<std::pair<unsigned long long, int>, std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> >, std::allocator<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > >, std::_Select1st<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > >, std::equal_to<std::pair<unsigned long long, int> >, TINodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_allocate_buckets(unsigned long)
PUBLIC 877aa 0 std::tr1::_Hashtable<std::pair<unsigned long long, int>, std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> >, std::allocator<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > >, std::_Select1st<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > >, std::equal_to<std::pair<unsigned long long, int> >, TINodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_rehash(unsigned long)
PUBLIC 8782c 0 std::tr1::_Hashtable<std::pair<unsigned long long, int>, std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> >, std::allocator<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > >, std::_Select1st<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > >, std::equal_to<std::pair<unsigned long long, int> >, TINodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_Hashtable(unsigned long, TINodeHasher const&, std::tr1::__detail::_Mod_range_hashing const&, std::tr1::__detail::_Default_ranged_hash const&, std::equal_to<std::pair<unsigned long long, int> > const&, std::_Select1st<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > > const&, std::allocator<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > > const&)
PUBLIC 8788b 0 TCopyItem** std::__copy_backward<true, std::random_access_iterator_tag>::__copy_b<TCopyItem*>(TCopyItem* const*, TCopyItem* const*, TCopyItem**)
PUBLIC 878ba 0 std::tr1::_Hashtable<std::pair<unsigned long long, int>, std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> >, std::allocator<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > >, std::_Select1st<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > >, std::equal_to<std::pair<unsigned long long, int> >, TINodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_allocate_node(std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > const&)
PUBLIC 87942 0 TCopyItem::SourceIsSystemCompressed() const
PUBLIC 87966 0 std::tr1::_Hashtable<std::pair<unsigned long long, int>, std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> >, std::allocator<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > >, std::_Select1st<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > >, std::equal_to<std::pair<unsigned long long, int> >, TINodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_deallocate_node(std::tr1::__detail::_Hash_node<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> >, false>*)
PUBLIC 87996 0 std::tr1::_Hashtable<std::pair<unsigned long long, int>, std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> >, std::allocator<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > >, std::_Select1st<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > >, std::equal_to<std::pair<unsigned long long, int> >, TINodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_deallocate_nodes(std::tr1::__detail::_Hash_node<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> >, false>**, unsigned long)
PUBLIC 879dc 0 std::tr1::_Hashtable<std::pair<unsigned long long, int>, std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> >, std::allocator<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > >, std::_Select1st<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > >, std::equal_to<std::pair<unsigned long long, int> >, TINodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::~_Hashtable()
PUBLIC 87a1c 0 std::tr1::_Hashtable<std::pair<unsigned long long, int>, std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> >, std::allocator<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > >, std::_Select1st<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > >, std::equal_to<std::pair<unsigned long long, int> >, TINodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_M_insert_bucket(std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > const&, unsigned long, unsigned long)
PUBLIC 87ae2 0 std::tr1::__detail::_Map_base<std::pair<unsigned long long, int>, std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> >, std::_Select1st<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > >, true, std::tr1::_Hashtable<std::pair<unsigned long long, int>, std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> >, std::allocator<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > >, std::_Select1st<std::pair<std::pair<unsigned long long, int> const, TCountedPtr<TCFURLInfo> > >, std::equal_to<std::pair<unsigned long long, int> >, TINodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true> >::operator[](std::pair<unsigned long long, int> const&)
PUBLIC 87bac 0 TOperationSizer::TOperationSizer(TCountedPtr<TFSInfo> const&, long long, bool, unsigned long long, void (*)(unsigned long long, TCountedPtr<TCFURLInfo> const&, long long, long long, long long, bool), bool (*)(unsigned long long), long long, long long, long long, long long, long long, long long, bool, bool, unsigned char (*)(FSRef const*, FSRef const*, unsigned char, HFSUniStr255 const*, unsigned long, FSCatalogInfo const*, void*), unsigned char (*)(void*), NodeClientContext*)
PUBLIC 87ec4 0 TOperationSizer::TOperationSizer(TCountedPtr<TFSInfo> const&, long long, bool, unsigned long long, void (*)(unsigned long long, TCountedPtr<TCFURLInfo> const&, long long, long long, long long, bool), bool (*)(unsigned long long), long long, long long, long long, long long, long long, long long, bool, bool, unsigned char (*)(FSRef const*, FSRef const*, unsigned char, HFSUniStr255 const*, unsigned long, FSCatalogInfo const*, void*), unsigned char (*)(void*), NodeClientContext*)
PUBLIC 87ee0 0 std::tr1::_Hashtable<std::pair<unsigned long long, int>, std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> >, std::allocator<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > >, std::_Select1st<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > >, std::equal_to<std::pair<unsigned long long, int> >, TINodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::~_Hashtable()
PUBLIC 87f18 0 std::tr1::_Hashtable<std::pair<unsigned long long, int>, std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> >, std::allocator<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > >, std::_Select1st<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > >, std::equal_to<std::pair<unsigned long long, int> >, TINodeHasher, std::tr1::__detail::_Mod_range_hashing, std::tr1::__detail::_Default_ranged_hash, std::tr1::__detail::_Prime_rehash_policy, false, false, true>::_Hashtable(unsigned long, TINodeHasher const&, std::tr1::__detail::_Mod_range_hashing const&, std::tr1::__detail::_Default_ranged_hash const&, std::equal_to<std::pair<unsigned long long, int> > const&, std::_Select1st<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > > const&, std::allocator<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > > const&)
PUBLIC 87f78 0 TPropertyReference::Asbool(bool&) const
PUBLIC 87f9a 0 TPropertyReference::AsSInt16(short&) const
PUBLIC 87fc8 0 TPropertyReference::SetValue(long)
PUBLIC 87fe8 0 TPropertyReference::AsUTCDateTime(UTCDateTime&) const
PUBLIC 88010 0 TPropertyValue::TPropertyValue(__CFArray const*)
PUBLIC 88048 0 TPropertyValue::TPropertyValue(__CFArray const*)
PUBLIC 88052 0 TPropertyValue::TPropertyValue(__CFURL const*)
PUBLIC 8808a 0 TPropertyValue::TPropertyValue(__CFURL const*)
PUBLIC 88094 0 TPropertyValue::TPropertyValue(__CFDictionary const*)
PUBLIC 880cc 0 TPropertyValue::TPropertyValue(__CFDictionary const*)
PUBLIC 880d6 0 TPropertyValue::TPropertyValue(__CFNumber const*)
PUBLIC 8810e 0 TPropertyValue::TPropertyValue(__CFNumber const*)
PUBLIC 88118 0 TPropertyValue::TPropertyValue(__CFString const*)
PUBLIC 88150 0 TPropertyValue::TPropertyValue(__CFString const*)
PUBLIC 8815a 0 TPropertyValue::TPropertyValue(TUString const&)
PUBLIC 881c6 0 TPropertyValue::TPropertyValue(TUString const&)
PUBLIC 881d0 0 TPropertyReference::AsTUString(TUString&) const
PUBLIC 88274 0 TPropertyValue::operator==(TPropertyValue const&) const
PUBLIC 884ec 0 TPropertyValue::TPropertyValue(unsigned char)
PUBLIC 88506 0 TPropertyValue::TPropertyValue(Point const&)
PUBLIC 88522 0 TPropertyValue::TPropertyValue(UTCDateTime const&)
PUBLIC 88547 0 NodeErrorLogging(long, bool)
PUBLIC 885e4 0 std::_Rb_tree<long, long, std::_Identity<long>, std::less<long>, std::allocator<long> >::_M_erase(std::_Rb_tree_node<long>*)
PUBLIC 88642 0 std::_Rb_tree<long, long, std::_Identity<long>, std::less<long>, std::allocator<long> >::_M_create_node(long const&)
PUBLIC 88676 0 std::_Rb_tree<long, long, std::_Identity<long>, std::less<long>, std::allocator<long> >::_M_insert(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, long const&)
PUBLIC 886ea 0 std::_Rb_tree<long, long, std::_Identity<long>, std::less<long>, std::allocator<long> >::_M_insert_unique(long const&)
PUBLIC 88776 0 std::set<long, std::less<long>, std::allocator<long> >::insert(long const&)
PUBLIC 887b2 0 std::_Rb_tree<long, long, std::_Identity<long>, std::less<long>, std::allocator<long> >::erase(std::_Rb_tree_iterator<long>)
PUBLIC 887e0 0 std::_Rb_tree<long, long, std::_Identity<long>, std::less<long>, std::allocator<long> >::erase(std::_Rb_tree_iterator<long>, std::_Rb_tree_iterator<long>)
PUBLIC 8884a 0 std::_Rb_tree<long, long, std::_Identity<long>, std::less<long>, std::allocator<long> >::erase(long const&)
PUBLIC 888c0 0 TFSInfo::CopyParentFSRef() const
PUBLIC 888f0 0 TFSInfo::ReadOnlyError(TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 888fa 0 TFSInfo::NoSynchronize(TCountedPtr<TFSInfo> const&, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >&)
PUBLIC 88902 0 TQueryDataRecord::SetNodeQuery(void*, void (*)(void*), void (*)(void*))
PUBLIC 88952 0 TQueryDataRecord::SetQueryNode(void*, void (*)(void*), void (*)(void*))
PUBLIC 889a4 0 TQueryDataRecord::~TQueryDataRecord()
PUBLIC 889fe 0 TQueryDataRecord::RemovePtrReference()
PUBLIC 88a34 0 TMDItemRecord::AddPtrReference()
PUBLIC 88a48 0 TQueryDataRecord::AddPtrReference()
PUBLIC 88a5e 0 TFSInfo::GetNULLFSIdentity()
PUBLIC 88aba 0 TUniqueNamer::TUniqueNamer(TUniqueNamer const&)
PUBLIC 88b4e 0 TUniqueNamer::TUniqueNamer(TUniqueNamer const&)
PUBLIC 88b58 0 TUniqueNamer::TUniqueNamer(long (*)(__CFString const*, __CFString const*, NodeClientContext*, __CFString const**), NodeClientContext*)
PUBLIC 88c0c 0 TUniqueNamer::TUniqueNamer(long (*)(__CFString const*, __CFString const*, NodeClientContext*, __CFString const**), NodeClientContext*)
PUBLIC 88c18 0 TVersionData::RemovePtrReference()
PUBLIC 88c50 0 TiDiskMonitor::FinalizeLock()
PUBLIC 88c90 0 TFSInfo::TranslatePOSIXError(int)
PUBLIC 88ed0 0 TFSInfo::SetNameAndDisplayName(TUString const&, TUString const&)
PUBLIC 88f7e 0 TFSInfo::RealUserCanRead(bool*) const
PUBLIC 88fd2 0 TFSInfo::GetVolumeLockedAndLocal(short, bool&, bool&)
PUBLIC 8912f 0 NetworkResolveCallBack(__NWNode*, __CFString const*, unsigned long, NWNodeError, void*)
PUBLIC 891ee 0 TFSInfo::iToolsPassword(TUString const&)
PUBLIC 8941c 0 TFSInfo::CloseResourceFork(OpaqueResourceFileRef*)
PUBLIC 89430 0 TFSInfo::GetClippingExtensionForType(unsigned long)
PUBLIC 89718 0 TFSInfo::AddClippingExtensionForType(TUString const&, unsigned long, TUString&)
PUBLIC 8977c 0 TFSInfo::ApplyClippingData(void const*, void const*, void*)
PUBLIC 89878 0 TFSInfo::FetchFontVersion(TVersionData&) const
PUBLIC 89a6c 0 TFSInfo::FetchPlistVersion(TVersionData&) const
PUBLIC 89c54 0 TFSInfo::FetchFlatFileVersion(TVersionData&) const
PUBLIC 89e06 0 TFSInfo::GetBootVRefNum()
PUBLIC 89e5a 0 TFSInfo::Unlink(FSRef const*)
PUBLIC 89ec8 0 TFSInfo::StripACLForCopy(_acl*, FSRef const&, bool, bool, bool)
PUBLIC 8a0e6 0 TFSInfo::CreateStrippedFileSecurityRef(__CFAllocator const*, __FSFileSecurity*, FSRef const&, bool, bool, bool)
PUBLIC 8a1ba 0 TFSInfo::SetCatalogInfo(unsigned long, TFSCatalogInfo const&) const
PUBLIC 8a1ee 0 TFSInfo::SetIsLocked(TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 8a3a6 0 TFSInfo::GetHomeVRefNum()
PUBLIC 8a492 0 TFSInfo::GetObjectAccess(TFSPermissions&) const
PUBLIC 8a55e 0 TFSInfo::ResourceForkName()
PUBLIC 8a5f0 0 TFSInfo::GetURLType(TUString)
PUBLIC 8a854 0 TFSInfo::Delete(bool, bool)
PUBLIC 8a93e 0 TFSInfo::IsBusyApplication(FSRef const&)
PUBLIC 8a9da 0 TFSInfo::Finalize()
PUBLIC 8aade 0 TFSInfo::IsFolderProtected() const
PUBLIC 8ab0e 0 TFSInfo::CopyFullPermissionInfo(FSPermissionInfo*) const
PUBLIC 8acb4 0 TFSInfo::FNNotify() const
PUBLIC 8ace6 0 TFSInfo::CopyFSRef() const
PUBLIC 8ad14 0 TFSInfo::SetModificationDate(TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 8aea2 0 TFSInfo::GetLogicalSize(TPropertyReference&, unsigned long) const
PUBLIC 8af30 0 TFSInfo::SetIgnoreOwnership(TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 8af78 0 TReservationRecord::CreateAndAcquireReservationRef(TCountedPtr<TCFURLInfo> const&, unsigned long, __FSReservation*&)
PUBLIC 8b012 0 TFSInfo::SetLabel(TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 8b17a 0 TFSInfo::SetIsStationery(TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 8b32c 0 TFSInfo::SetCreationDate(TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 8b4bc 0 TFSInfo::SetOwner(TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 8b676 0 TFSInfo::SetUserGroups(TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 8b830 0 TFSInfo::HandleiDiskChanged()
PUBLIC 8b908 0 TFSInfo::OpenResourceFork(signed char, OpaqueResourceFileRef*&, bool) const
PUBLIC 8b9d6 0 TFSInfo::SetMode(TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 8bba6 0 TMDItemRecord::~TMDItemRecord()
PUBLIC 8bc0e 0 TMDItemRecord::RemovePtrReference()
PUBLIC 8bc44 0 TMDItemRecord::TMDItemRecord(__MDItem*, __MDQuery*)
PUBLIC 8bcb6 0 TMDItemRecord::TMDItemRecord(__MDItem*, __MDQuery*)
PUBLIC 8bcc0 0 TFSInfo::IsDropBox() const
PUBLIC 8bd0a 0 TFSInfo::SetHasCustomIcon(bool)
PUBLIC 8be0e 0 TFSInfo::UserIsRoot()
PUBLIC 8be48 0 TFSInfo::UserIsOwner() const
PUBLIC 8be9c 0 TReservationRecord::CreateAndAcquireReservationRef(TCountedPtr<TFSInfo> const&, unsigned long, __FSReservation*&)
PUBLIC 8bf48 0 TFSInfo::SetPermissions(TFSPermissions const&, bool, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 8c1dc 0 TFSInfo::CopyPath() const
PUBLIC 8c2b6 0 TFSInfo::CopyAttributes(__CFArray const*) const
PUBLIC 8c40a 0 TDeepFSIterator::RecordHardlink(std::tr1::unordered_map<std::pair<unsigned long long, int>, std::pair<unsigned long long, int>, TINodeHasher, std::equal_to<std::pair<unsigned long long, int> >, std::allocator<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > >, false>*, TCountedPtr<TFSInfo>&)
PUBLIC 8c5a8 0 TFSInfo::GetMDQueryRef() const
PUBLIC 8c5ca 0 TFSInfo::GetMDItemRef() const
PUBLIC 8c776 0 TFSInfo::SetMDAttributeIfAppropriate(unsigned long, TPropertyInfo const*)
PUBLIC 8c8b8 0 TFSInfo::GetQueryDataRecord() const
PUBLIC 8ca24 0 TFSInfo::SetSearchCount(long)
PUBLIC 8ca62 0 TFSInfo::GetSystemBuildVersion(TPropertyReference&, unsigned long) const
PUBLIC 8caf2 0 TFSInfo::SetLockedInSidebar(TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 8cbcc 0 TFSInfo::SetHiddenInSidebar(TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 8ccac 0 TFSInfo::GetAboutToUnmount(TPropertyReference&, unsigned long) const
PUBLIC 8cd48 0 TFSInfo::GetVolumeFormatString(TPropertyReference&, unsigned long) const
PUBLIC 8cdd6 0 TFSInfo::GetVolumeFormat(TPropertyReference&, unsigned long) const
PUBLIC 8ce66 0 TFSInfo::GetCapacity(TPropertyReference&, unsigned long) const
PUBLIC 8cef8 0 TFSInfo::GetNoVolumeSizes(TPropertyReference&, unsigned long) const
PUBLIC 8cf86 0 TFSInfo::GetIgnoreOwnership(TPropertyReference&, unsigned long) const
PUBLIC 8d018 0 TFSInfo::GetMediaTypes(long&) const
PUBLIC 8d07a 0 TFSInfo::IsUnmountableVolume() const
PUBLIC 8d0ba 0 TFSInfo::operator==(TFSInfo const&) const
PUBLIC 8d1da 0 TFSInfo::SetNWNode(__NWNode*)
PUBLIC 8d276 0 TFSInfo::~TFSInfo()
PUBLIC 8d280 0 TFSInfo::Initialize(unsigned long, TCountedPtr<TMDItemRecord> const&)
PUBLIC 8d350 0 TFSInfo::GetKindString(TPropertyReference&, unsigned long) const
PUBLIC 8d3b6 0 TFSInfo::SynchronizeKindsForce(TCountedPtr<TFSInfo> const&, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >&)
PUBLIC 8d696 0 TFSInfo::CopyAttributes(__CFString const*) const
PUBLIC 8d884 0 TFSInfo::CreateResourceFile() const
PUBLIC 8d94a 0 TFSInfo::IsFramework() const
PUBLIC 8d9e0 0 TFSInfo::HasScriptingTerminology() const
PUBLIC 8dafa 0 TFSInfo::IsFontFile() const
PUBLIC 8dc0c 0 TFSInfo::IsTrash() const
PUBLIC 8dd28 0 TFSInfo::CopyDataAsURLFromDataFork(__CFURL const*&) const
PUBLIC 8df1a 0 TFSInfo::GetArchitecturesSupported(unsigned long&, unsigned long) const
PUBLIC 8e222 0 TFSInfo::GetArchitecturesSupported(TPropertyReference&, unsigned long) const
PUBLIC 8e262 0 TFSInfo::GetArchitecturePreference(TUString&, unsigned long) const
PUBLIC 8e4e4 0 TFSInfo::GetArchitecturePreference(TPropertyReference&, unsigned long) const
PUBLIC 8e548 0 TFSInfo::SetArchitecturePreference(TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 8e73e 0 TFSInfo::LSUnregister() const
PUBLIC 8e77c 0 TFSInfo::LSRegister() const
PUBLIC 8e7c0 0 TFSInfo::IsBusyApplication() const
PUBLIC 8e7ee 0 TFSInfo::ShouldSkip(bool, bool, bool) const
PUBLIC 8e88e 0 TFSInfo::AcquireReservation(__FSReservation*&) const
PUBLIC 8e966 0 TFSInfo::SetCreator(TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 8eb26 0 TFSInfo::SetType(TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 8ece4 0 TFSInfo::SetIsExtensionHidden(TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 8edde 0 TFSInfo::SetName(TUString const&)
PUBLIC 8ee9c 0 TFSInfo::SetName(TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 8f0d2 0 TFSInfo::SetIsVisible(TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 8f296 0 TReservationRecord::~TReservationRecord()
PUBLIC 8f310 0 TReservationRecord::~TReservationRecord()
PUBLIC 8f31a 0 TDeepFSIterator::ResetReservationStack()
PUBLIC 8f384 0 TReservationRecord::TReservationRecord(TCountedPtr<TFSInfo> const&, __FSReservation*)
PUBLIC 8f3ec 0 TReservationRecord::TReservationRecord(TCountedPtr<TCFURLInfo> const&, __FSReservation*)
PUBLIC 8f452 0 TReservationRecord::TReservationRecord(TCountedPtr<TCFURLInfo> const&, __FSReservation*)
PUBLIC 8f45e 0 TDeepFSIterator::PopIterator()
PUBLIC 8f59a 0 TDeepFSIterator::DestroyIterators()
PUBLIC 8f610 0 TDeepFSIterator::~TDeepFSIterator()
PUBLIC 8f6b6 0 TDeepFSIterator::PushIterator(TCountedPtr<TFSInfo> const&)
PUBLIC 8f86e 0 TDeepFSIterator::Reset()
PUBLIC 8f9ba 0 TDeepFSIterator::TDeepFSIterator(TCountedPtr<TFSInfo> const&, unsigned long, bool, bool, std::tr1::unordered_map<std::pair<unsigned long long, int>, std::pair<unsigned long long, int>, TINodeHasher, std::equal_to<std::pair<unsigned long long, int> >, std::allocator<std::pair<std::pair<unsigned long long, int> const, std::pair<unsigned long long, int> > >, false>*, std::stack<TReservationRecord*, std::deque<TReservationRecord*, std::allocator<TReservationRecord*> > >*, bool)
PUBLIC 8fa80 0 TFSInfo::Dump()
PUBLIC 8fc1c 0 TFSInfo::GetAliasInfoFrom(bool&, bool&, TUString*, TUString*) const
PUBLIC 900f6 0 TDeepFSIterator::NextInternal(TCountedPtr<TFSInfo>&, long&, long&, bool&)
PUBLIC 9023a 0 TDeepFSIterator::Next(TCountedPtr<TFSInfo>&)
PUBLIC 902ca 0 TFSInfo::DeleteDeep(bool, bool)
PUBLIC 904dc 0 TFSInfo::MountiDisk(TCountedPtr<TFSInfo>&)
PUBLIC 90654 0 TFSInfo::TrashForInfo(TCountedPtr<TFSInfo>&) const
PUBLIC 9074e 0 TFSInfo::MoveAndRenameTo(TCountedPtr<TFSInfo> const&, TUString*, TCountedPtr<TFSInfo>&) const
PUBLIC 90852 0 TFSInfo::CreateDirectory(TUString const&, TUniqueNamer*, unsigned long, TFSCatalogInfo const&, TCountedPtr<TFSInfo>&) const
PUBLIC 90a50 0 TFSInfo::RefetchNameAndDisplayName(TUString&, TUString&) const
PUBLIC 90b48 0 TFSInfo::Initialize(char const*, unsigned long)
PUBLIC 90bc8 0 TFSInfo::FollowAlias(AliasRecord**, unsigned long, TCountedPtr<TFSInfo>&)
PUBLIC 90d3e 0 TFSInfo::FollowVirtualAlias(unsigned long, TCountedPtr<TFSInfo>&) const
PUBLIC 91468 0 TFSInfo::FollowAlias(unsigned long, TCountedPtr<TFSInfo>&) const
PUBLIC 917ca 0 TFSInfo::AddClippingData(__CFDictionary const*) const
PUBLIC 918d2 0 TFSInfo::CopyClippingDataFromFile(__CFDictionary const*&) const
PUBLIC 91acc 0 TFSInfo::AddURLData(__CFURL const*) const
PUBLIC 91e1e 0 TFSInfo::CopyDataAsURLFromResourceFork(__CFURL const*&) const
PUBLIC 9200e 0 TFSInfo::CopyLocationDataFromFile(__CFURL const*&) const
PUBLIC 9206c 0 TFSInfo::FetchOldStyleVersion(TVersionData&) const
PUBLIC 922ea 0 TFSInfo::FetchVersionMetaData(unsigned long) const
PUBLIC 92464 0 TFSInfo::GetCopyrightString(TUString&, unsigned long) const
PUBLIC 924ee 0 TFSInfo::GetCopyrightString(TPropertyReference&, unsigned long) const
PUBLIC 92554 0 TFSInfo::GetSystemVersion(TUString&, unsigned long) const
PUBLIC 925de 0 TFSInfo::GetSystemVersion(TPropertyReference&, unsigned long) const
PUBLIC 92644 0 TFSInfo::GetLongVersion(TUString&, unsigned long) const
PUBLIC 926ce 0 TFSInfo::GetLongVersion(TPropertyReference&, unsigned long) const
PUBLIC 92734 0 TFSInfo::GetShortVersion(TUString&, unsigned long) const
PUBLIC 927be 0 TFSInfo::GetShortVersion(TPropertyReference&, unsigned long) const
PUBLIC 92824 0 TFSInfo::SynchronizeVersions(TCountedPtr<TFSInfo> const&, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >&)
PUBLIC 92a82 0 TFSInfo::SynchronizeVersionsForce(TCountedPtr<TFSInfo> const&, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >&)
PUBLIC 92e04 0 TFSInfo::CopyPermissions()
PUBLIC 935e6 0 TFSInfo::SetAlias(TCountedPtr<TFSInfo> const&, TUString const*, TUniqueNamer*, TCountedPtr<TFSInfo>&)
PUBLIC 93af0 0 TFSInfo::GetCustomVolumeIconFile(TCountedPtr<TFSInfo>&, unsigned char) const
PUBLIC 93cf2 0 TFSInfo::GetCustomIconFile(TCountedPtr<TFSInfo>&, unsigned char) const
PUBLIC 93f58 0 TFSInfo::RemoveCustomIcon() const
PUBLIC 940de 0 TFSInfo::SetCustomIcon(char**)
PUBLIC 94398 0 TFSInfo::SetCustomIconRef(TPropertyReference const&, unsigned long, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> >*)
PUBLIC 94472 0 TFSInfo::UnimplementedGetError(TPropertyReference&, unsigned long) const
PUBLIC 9447c 0 std::_Vector_base<TFSIterator*, std::allocator<TFSIterator*> >::~_Vector_base()
PUBLIC 94494 0 std::vector<TFSIterator*, std::allocator<TFSIterator*> >::~vector()
PUBLIC 9449e 0 std::_Rb_tree<TPropertyRecord, TPropertyRecord, std::_Identity<TPropertyRecord>, PropertyRecordCompare, std::allocator<TPropertyRecord> >::_M_erase(std::_Rb_tree_node<TPropertyRecord>*)
PUBLIC 944d8 0 TVersionData::TVersionData()
PUBLIC 94574 0 TVersionData::~TVersionData()
PUBLIC 94612 0 TFSIterator** std::__copy_backward<true, std::random_access_iterator_tag>::__copy_b<TFSIterator*>(TFSIterator* const*, TFSIterator* const*, TFSIterator**)
PUBLIC 94642 0 TFSInfo::IsPublishedFolder(TPropertyReference&, unsigned long) const
PUBLIC 94662 0 TFSInfo::IsContainer(TPropertyReference&, unsigned long) const
PUBLIC 94684 0 TFSInfo::HasCustomIcon(TPropertyReference&, unsigned long) const
PUBLIC 946a6 0 TFSInfo::GetFinderFlags(TPropertyReference&, unsigned long) const
PUBLIC 946c2 0 TFSInfo::GetMode(TPropertyReference&, unsigned long) const
PUBLIC 946fe 0 TFSInfo::GetResourcePhysicalSize(TPropertyReference&, unsigned long) const
PUBLIC 94722 0 TFSInfo::GetDataPhysicalSize(TPropertyReference&, unsigned long) const
PUBLIC 94746 0 TFSInfo::GetResourceLogicalSize(TPropertyReference&, unsigned long) const
PUBLIC 9476a 0 TFSInfo::GetDataLogicalSize(TPropertyReference&, unsigned long) const
PUBLIC 9478e 0 TFSInfo::GetUserAccess(TPropertyReference&, unsigned long) const
PUBLIC 947be 0 TFSInfo::GetUserGroups(TPropertyReference&, unsigned long) const
PUBLIC 947e8 0 TFSInfo::GetOwner(TPropertyReference&, unsigned long) const
PUBLIC 94812 0 TFSInfo::GetIconRef(TPropertyReference&, unsigned long) const
PUBLIC 9482e 0 TFSInfo::GetCreationDate(TPropertyReference&, unsigned long) const
PUBLIC 9485e 0 TFSInfo::GetCustomIconRef(TPropertyReference&, unsigned long) const
PUBLIC 9487a 0 TFSInfo::IsAlias(TPropertyReference&, unsigned long) const
PUBLIC 948b6 0 std::vector<TFSIterator*, std::allocator<TFSIterator*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<TFSIterator**, std::vector<TFSIterator*, std::allocator<TFSIterator*> > >, TFSIterator* const&)
PUBLIC 949d2 0 std::vector<TFSIterator*, std::allocator<TFSIterator*> >::push_back(TFSIterator* const&)
PUBLIC 94a0e 0 std::vector<TFSIterator*, std::allocator<TFSIterator*> >::erase(__gnu_cxx::__normal_iterator<TFSIterator**, std::vector<TFSIterator*, std::allocator<TFSIterator*> > >, __gnu_cxx::__normal_iterator<TFSIterator**, std::vector<TFSIterator*, std::allocator<TFSIterator*> > >)
PUBLIC 94a5a 0 TFSInfo::GetOldIconOrigin(TPropertyReference&, unsigned long) const
PUBLIC 94aae 0 TFSInfo::GetDeepItemCount(TPropertyReference&, unsigned long) const
PUBLIC 94b22 0 TFSInfo::GetDeepVisibleItemCount(TPropertyReference&, unsigned long) const
PUBLIC 94b96 0 TFSInfo::GetPath(TPropertyReference&, unsigned long) const
PUBLIC 94bee 0 TFSInfo::IsLockedInSidebar(TPropertyReference&, unsigned long) const
PUBLIC 94c64 0 TFSInfo::GetServerUserName() const
PUBLIC 94c80 0 TFSInfo::GetSortingGroup() const
PUBLIC 94ca2 0 TFSInfo::RequiresAsk() const
PUBLIC 94cca 0 TFSInfo::GetServerUserName(TPropertyReference&, unsigned long) const
PUBLIC 94d3e 0 TFSInfo::SupportsScreenSharing(TPropertyReference&, unsigned long) const
PUBLIC 94db6 0 TFSInfo::SupportsFileSharing(TPropertyReference&, unsigned long) const
PUBLIC 94e2e 0 TFSInfo::GetNetworkConnectionState(TPropertyReference&, unsigned long) const
PUBLIC 94ea2 0 TFSInfo::GetSortingGroup(TPropertyReference&, unsigned long) const
PUBLIC 94f16 0 TFSInfo::RequiresAsk(TPropertyReference&, unsigned long) const
PUBLIC 94f8e 0 TFSInfo::IsMountedSharepoint(TPropertyReference&, unsigned long) const
PUBLIC 95006 0 TFSInfo::HasScriptingTerminology(TPropertyReference&, unsigned long) const
PUBLIC 9502e 0 TFSInfo::IsApplication(TPropertyReference&, unsigned long) const
PUBLIC 95056 0 TFSInfo::IsPackage(TPropertyReference&, unsigned long) const
PUBLIC 9507e 0 TFSInfo::CanSetExtensionHidden(TPropertyReference&, unsigned long) const
PUBLIC 950b6 0 TFSInfo::IsExtensionHidden(TPropertyReference&, unsigned long) const
PUBLIC 950ee 0 TFSInfo::IsVisible(TPropertyReference&, unsigned long) const
PUBLIC 95116 0 TUString::CFStringToCString(__CFString const*, char*, int)
PUBLIC 95170 0 TUString::GetCurrentUTCTime(UTCDateTime&)
PUBLIC 9518c 0 TUString::operator==(TUString const&) const
PUBLIC 951ca 0 TUString::GetFilenameTimeFormatter()
PUBLIC 95284 0 TUString::TUString(unsigned char const*)
PUBLIC 952ae 0 TUString::TUString(unsigned char const*)
PUBLIC 952b8 0 TUString::TUString(unsigned long, char const*)
PUBLIC 952f8 0 TUString::TUString(long, unsigned short const*)
PUBLIC 95320 0 TUString::GetFontSuffix()
PUBLIC 95398 0 TUString::SetLength(unsigned long)
PUBLIC 953fa 0 TUString::TrimSuffix(TUString const&)
PUBLIC 9548e 0 TUString::FormatAsDateTimeString(UTCDateTime, TUString&, __CFDateFormatter*)
PUBLIC 955ca 0 TUString::Append(unsigned short)
PUBLIC 9569a 0 TDSMutex::~TDSMutex()
PUBLIC 956a4 0 Page::IsLeaf()
PUBLIC 956ac 0 Page::EntryStoreSize(PageEntry*)
PUBLIC 956ba 0 Page::Equal(void*, void*)
PUBLIC 956de 0 Leaf::IsLeaf()
PUBLIC 956e8 0 Page::ReplaceObj(PageEntry*, IAOrderedStorable*)
PUBLIC 95746 0 PageCache::Equal(void*, void*)
PUBLIC 95762 0 BTree::Count()
PUBLIC 9576e 0 BTree::TotalSize()
PUBLIC 95780 0 BTree::BestTwoPagination()
PUBLIC 9586a 0 BTree::~BTree()
PUBLIC 95920 0 BTree::~BTree()
PUBLIC 9592a 0 PageCache::MaybeWritePage(PageCacheEntry*)
PUBLIC 959b0 0 Page::EntryStore(PageEntry*, IAOutputBlock*)
PUBLIC 959ea 0 PageCache::ReportStats()
PUBLIC 95a66 0 BTree::ReportStats()
PUBLIC 95b48 0 Scroll::~Scroll()
PUBLIC 95bbc 0 Scroll::~Scroll()
PUBLIC 95bc6 0 Scroll::Initialize(Page*, PageEntry*, Page*)
PUBLIC 95d38 0 PageCache::AddMru(PageCacheEntry*)
PUBLIC 95dfa 0 PageCache::Purge()
PUBLIC 95eb4 0 BTree::Purge()
PUBLIC 95ee2 0 Page::PopEntry(PageEntry*)
PUBLIC 95f26 0 PageCache::PurgeEntry(PageCacheEntry*)
PUBLIC 95fca 0 PageCache::Remove(unsigned long)
PUBLIC 960a0 0 PageCache::Delete(unsigned long)
PUBLIC 960cc 0 PageCache::~PageCache()
PUBLIC 9613e 0 PageCache::~PageCache()
PUBLIC 961a8 0 PageCache::~PageCache()
PUBLIC 961b2 0 Page::~Page()
PUBLIC 961bc 0 Page::RemoveEntryAtFinger(void**)
PUBLIC 96256 0 Page::RemoveEntry(PageEntry*)
PUBLIC 96290 0 Page::PushEntry(PageEntry*)
PUBLIC 962ca 0 Page::InsertEntry(PageEntry*)
PUBLIC 9630e 0 PageCache::SetFinger(void*, void**)
PUBLIC 9638e 0 Page::EntryRestore(PageEntry*, IAOrderedStorable*, IAInputBlock*)
PUBLIC 963f2 0 BTree::PositionEstimate(IAOrderedStorable const*)
PUBLIC 964a0 0 PageCache::LessThan(void*, void*)
PUBLIC 964bc 0 Page::~Page()
PUBLIC 9652a 0 Page::LessThan(void*, void*)
PUBLIC 9654e 0 Page::ShiftContentsLeft(Page*, PageEntry*, Page*, PageEntry*)
PUBLIC 96610 0 BTree::ShrinkTree()
PUBLIC 966b2 0 Page::ShiftContentsRight(Page*, PageEntry*, Page*, PageEntry*)
PUBLIC 967a4 0 BTree::PaginateTwo(Page*, PageEntry*, Page*, Page*, unsigned long)
PUBLIC 9682a 0 BTree::MergeTwo(Page*, PageEntry*, Page*, Page*, unsigned long)
PUBLIC 968d6 0 BTree::RebalanceTwo(Page*, PageEntry*, Page*, Page*, unsigned long)
PUBLIC 9698a 0 PageCache::Unlock(unsigned long, unsigned long, bool)
PUBLIC 96ad4 0 BTreeIterator::UnlockPage(unsigned long, unsigned long)
PUBLIC 96b6c 0 BTreeIterator::~BTreeIterator()
PUBLIC 96c14 0 BTreeIterator::~BTreeIterator()
PUBLIC 96c1e 0 PageCache::Put(Page*, unsigned long, bool)
PUBLIC 96cd8 0 BTree::SplitOne(Page*, Page*, unsigned long)
PUBLIC 96d88 0 BTree::GrowTree()
PUBLIC 96eda 0 PageCache::Get(unsigned long, unsigned long, bool)
PUBLIC 97016 0 BTreeIterator::GetLockedPage(unsigned long, unsigned long)
PUBLIC 9709e 0 BTreeIterator::PushTo(Page*, IAOrderedStorable const*)
PUBLIC 9718e 0 BTreeIterator::BTreeIterator(BTree*, IAOrderedStorable const*)
PUBLIC 971e6 0 BTree::MakeIterator(IAOrderedStorable const*)
PUBLIC 97234 0 BTree::DestroySubPage(unsigned long, unsigned long)
PUBLIC 9729c 0 BTree::DestroyNonLeaf(Page*, unsigned long)
PUBLIC 9730a 0 BTree::Destroy()
PUBLIC 9736a 0 BTree::Get(IAOrderedStorable const*)
PUBLIC 97424 0 BTree::RebalanceNonRoot(Page*, Page*, PageEntry*, unsigned long)
PUBLIC 975a4 0 BTree::ReplaceWithPrevObj(Page*, PageEntry*, Page*, Page*, PageEntry*, unsigned long)
PUBLIC 97690 0 BTree::RemoveInternal(Page*, Page*, PageEntry*, IAOrderedStorable const*, unsigned long)
PUBLIC 97840 0 BTree::Remove(IAOrderedStorable const*)
PUBLIC 97880 0 IteratorFrame::~IteratorFrame()
PUBLIC 978d8 0 IteratorFrame::~IteratorFrame()
PUBLIC 978e2 0 PageCacheEntry::~PageCacheEntry()
PUBLIC 97942 0 PageCacheEntry::~PageCacheEntry()
PUBLIC 9799a 0 PageCacheEntry::~PageCacheEntry()
PUBLIC 979a4 0 IAOrderedStorableIterator::~IAOrderedStorableIterator()
PUBLIC 979ae 0 Leaf::~Leaf()
PUBLIC 979ce 0 Leaf::~Leaf()
PUBLIC 979d8 0 IAOrderedStorableIterator::~IAOrderedStorableIterator()
PUBLIC 97a10 0 BuddyStorage::OldFreeSpace()
PUBLIC 97a98 0 BuddyStorage::newFreeSpace()
PUBLIC 97b20 0 BuddyStorage::PrintFreeList()
PUBLIC 97bc0 0 BuddyStorage::CopyBytes(unsigned long, unsigned long, unsigned long)
PUBLIC 97c88 0 BuddyStorage::~BuddyStorage()
PUBLIC 97d3c 0 BuddyStorage::~BuddyStorage()
PUBLIC 97d46 0 BuddyStorage::TotalSpace()
PUBLIC 97d5a 0 BuddyStorage::CompactInternal(unsigned long)
PUBLIC 97f8e 0 BuddyStorage::Deallocate(unsigned long)
PUBLIC 98074 0 BuddyStorage::Compact()
PUBLIC 98136 0 BuddyStorage::FreeSpace()
PUBLIC 981ae 0 BuddyStorage::TOC_Remove(char const*)
PUBLIC 9821c 0 AddressIdMap::LessThan(void*, void*)
PUBLIC 98232 0 AddressIdMap::Equal(void*, void*)
PUBLIC 98248 0 AddressIdMap::~AddressIdMap()
PUBLIC 98268 0 AddressIdMap::~AddressIdMap()
PUBLIC 98272 0 StringUInt32Map::~StringUInt32Map()
PUBLIC 98292 0 StringUInt32Map::~StringUInt32Map()
PUBLIC 9829c 0 AddressIdMap::~AddressIdMap()
PUBLIC 982d4 0 IAStorable::DeepCopying(IAStorable const*)
PUBLIC 982da 0 IAStorable::Restoring(IAInputBlock*, IAStorable const*)
PUBLIC 982e0 0 IAOrderedStorableSet::ReportStats()
PUBLIC 982e6 0 IAOrderedStorableSet::~IAOrderedStorableSet()
PUBLIC 982f0 0 IAStorable::~IAStorable()
PUBLIC 98328 0 IAStorable::~IAStorable()
PUBLIC 98332 0 IAOrderedStorableSet::~IAOrderedStorableSet()
PUBLIC 9836a 0 IAStorage::PrintFreeList()
PUBLIC 98370 0 IAStorage::~IAStorage()
PUBLIC 983d0 0 IAStorage::~IAStorage()
PUBLIC 983da 0 IAStoreStream::~IAStoreStream()
PUBLIC 9843e 0 IAStoreStream::~IAStoreStream()
PUBLIC 98448 0 IAStoreStream::ReadUInt64()
PUBLIC 985e4 0 IAStoreStream::WriteUInt64(unsigned long long)
PUBLIC 9873c 0 IADeleteOnUnwind::~IADeleteOnUnwind()
PUBLIC 98756 0 IADeleteArrayOnUnwind::IADeleteArrayOnUnwind(void*)
PUBLIC 98764 0 IAException::what() const
PUBLIC 98770 0 IAException::What() const
PUBLIC 9877c 0 IAException::GetLocation() const
PUBLIC 9878a 0 IAException::GetCode() const
PUBLIC 98798 0 IAException::SetLocation(char const*)
PUBLIC 987c0 0 IAException::IAException(char const*)
PUBLIC 98818 0 IAException::IAException(char const*)
PUBLIC 98822 0 IAException::~IAException()
PUBLIC 98842 0 IAException::~IAException()
PUBLIC 9885c 0 IADeleteArrayOnUnwind::~IADeleteArrayOnUnwind()
PUBLIC 9886f 0 IAThrowException(IAException)
PUBLIC 9897a 0 IAStruct::~IAStruct()
PUBLIC 9899a 0 IAStruct::~IAStruct()
PUBLIC 989b5 0 _IAAssertionFunc(char const*, int, char const*, char const*, long)
PUBLIC 98b06 0 SkipList::FingerEnd(void**)
PUBLIC 98b66 0 SkipList::~SkipList()
PUBLIC 98bdc 0 SkipList::~SkipList()
PUBLIC 98be6 0 SkipList::PreviousNode(void*)
PUBLIC 98c6a 0 SkipList::LastNode()
PUBLIC 98cf2 0 UInt32Set::LessThan(void*, void*)
PUBLIC 98d08 0 StringSet::~StringSet()
PUBLIC 98d12 0 StringSet::~StringSet()
PUBLIC 98d7c 0 StringUInt32Map::Remove(char const*)
PUBLIC 98da4 0 UInt32Set::~UInt32Set()
PUBLIC 98dc4 0 UInt32Set::~UInt32Set()
PUBLIC 98dce 0 TFSPermissions::GetFileSec() const
PUBLIC 98dda 0 TFSPermissions::SetMode(unsigned short)
PUBLIC 98dea 0 TFSPermissions::SetOwnerID(unsigned long)
PUBLIC 98df8 0 TFSPermissions::SetUserGroupID(unsigned long)
PUBLIC 98e06 0 TFSCatalogInfo::SetLockBit(bool)
PUBLIC 98e1e 0 TFSCatalogInfo::CopyRawCatalogInfo() const
PUBLIC 98e94 0 TFSCatalogInfo::SetIsExtensionHidden(bool)
PUBLIC 98eb2 0 TFSCatalogInfo::SetLabel(short)
PUBLIC 98ed4 0 TFSCatalogInfo::SetHasCustomIcon(bool)
PUBLIC 98ef4 0 TFSCatalogInfo::SetIsStationery(bool)
PUBLIC 98f14 0 DumpWhichInfo
PUBLIC 9923c 0 TFSCatalogInfo::SetCreationDate(UTCDateTime)
PUBLIC 9927a 0 TFSPermissions::SetFileSec(__FSFileSecurity*)
PUBLIC 992be 0 TFSPermissions::operator=(TFSPermissions const&)
PUBLIC 9930e 0 TFSCatalogInfo::SetPermissions(TFSPermissions const&)
PUBLIC 99320 0 TFSPermissions::TFSPermissions(FSPermissionInfo const&)
PUBLIC 99352 0 TFSPermissions::TFSPermissions()
PUBLIC 99376 0 TCountedFSPermissions::Retain(void*)
PUBLIC 99396 0 TFSCatalogInfo::SetOwner(unsigned long)
PUBLIC 993a4 0 TFSCatalogInfo::SetUserGroups(unsigned long)
PUBLIC 993b2 0 TFSPermissions::TFSPermissions(TFSPermissions const&)
PUBLIC 993e4 0 TFSCatalogInfo::TFSCatalogInfo(TFSCatalogInfo const&)
PUBLIC 99426 0 TFSPermissions::~TFSPermissions()
PUBLIC 9943e 0 TCountedFSPermissions::TCountedFSPermissions(TFSPermissions*)
PUBLIC 994ae 0 TCountedFSPermissions::TCountedFSPermissions(TFSPermissions*)
PUBLIC 994b8 0 TCountedFSPermissions::~TCountedFSPermissions()
PUBLIC 9951e 0 TCountedFSPermissions::Release(void*)
PUBLIC 9955c 0 TPropertyStream::GetEOF()
PUBLIC 99568 0 TPropertyStream::SetEOF(unsigned long)
PUBLIC 9956e 0 TPropertyStream::WriteZeroes(long)
PUBLIC 995e8 0 TPropertyStream::Clone()
PUBLIC 99630 0 TPropertyStream::~TPropertyStream()
PUBLIC 9966e 0 TPropertyStream::~TPropertyStream()
PUBLIC 99678 0 TPropertyInfo::SetName(TUString const&)
PUBLIC 9968a 0 TPropertyInfo::Equal(IAOrderedStorable const*) const
PUBLIC 996ca 0 TPropertyInfoList::~TPropertyInfoList()
PUBLIC 996d4 0 IAObject::~IAObject()
PUBLIC 9970c 0 IAOrderedStorable::~IAOrderedStorable()
PUBLIC 99716 0 IAObject::~IAObject()
PUBLIC 99720 0 IAOrderedStorable::~IAOrderedStorable()
PUBLIC 99758 0 FSCopyFormatNameForFSType
PUBLIC 99eef 0 _FSCopyLocalizedNameForVolumeFormatAtURL
PUBLIC 9ac88 0  stub helpers
PUBLIC 9dba0 0 std::tr1::__detail::_Primes<4>::__primes
PUBLIC 9e070 0 kUTCBusyCreationDate
PUBLIC 9e270 0 TPathName::kPOSIXPathNameSeparator
PUBLIC 9e2f0 0 kMaximumTickleDelta
PUBLIC 9e2f8 0 kMinimumTickleDelta
PUBLIC 9e330 0 kUTCZeroCreationDate
PUBLIC 9e338 0 kUTCBusyCreationDate
PUBLIC 9e360 0 kLocalIOChunkSize
PUBLIC 9e364 0 kMinimalRemoteIOChunkSize
PUBLIC 9e368 0 kBasicBufferSize
PUBLIC 9e3f0 0 TPropertyReference::gNullProperty
PUBLIC 9e430 0 kUTCBusyCreationDate
PUBLIC 9e438 0 kUTCZeroCreationDate
PUBLIC 9e460 0 kLocalIOChunkSize
PUBLIC 9e464 0 kMinimalRemoteIOChunkSize
PUBLIC 9e4d5 0 IACloneOSSetStoreStreams
PUBLIC dbb40 0 kNodeQueryVersionStringKey
PUBLIC dbb44 0 kNodeQueryStringKey
PUBLIC dbb48 0 kNodeQueryScopeArrayKey
PUBLIC dbb4c 0 kNodeAttributesArrayKey
PUBLIC dbb50 0 kNodeAttributesSelectorKey
PUBLIC dbde4 0 TDeleteBackupSnapShotOperation::LogOperationName(TCountedPtr<TOperationRecord> const&) const::name
PUBLIC dbde8 0 TCopyPermissionsOperation::LogOperationName(TCountedPtr<TOperationRecord> const&) const::name
PUBLIC dbdec 0 TDeleteImmediatelyOperation::LogOperationName(TCountedPtr<TOperationRecord> const&) const::name
PUBLIC dbdf0 0 TCopyMoveOperation::LogOperationName(TCountedPtr<TOperationRecord> const&) const::move
PUBLIC dbdf4 0 TCopyMoveOperation::LogOperationName(TCountedPtr<TOperationRecord> const&) const::forcemove
PUBLIC dbdf8 0 TCopyMoveOperation::LogOperationName(TCountedPtr<TOperationRecord> const&) const::copy
PUBLIC dbdfc 0 TCopyMoveOperation::LogOperationName(TCountedPtr<TOperationRecord> const&) const::moveinsameparent
PUBLIC dbe00 0 TCopyMoveOperation::LogOperationName(TCountedPtr<TOperationRecord> const&) const::generic
PUBLIC dbe04 0 TTrashOperation::LogOperationName(TCountedPtr<TOperationRecord> const&) const::name
PUBLIC dbe08 0 TOperation::LogOperationName(TCountedPtr<TOperationRecord> const&) const::name
PUBLIC dbecc 0 TFSCopyOperation::DoMoveToTrash(TCountedPtr<TCFURLInfo> const&)::move
PUBLIC dbed0 0 TFSCopyOperation::DoMove(TCountedPtr<TCFURLInfo> const&)::move
PUBLIC dbed4 0 TFSCopyOperation::DoCopy(TCountedPtr<TCFURLInfo> const&)::copy
PUBLIC dbf4c 0 TPermissionsOperation::LogOperationName(TCountedPtr<TOperationRecord> const&) const::name
PUBLIC dbfa0 0 _ParentXLocumParentDefs_subsystem
PUBLIC dc14c 0 TFSInfo::Dump()::FSInfoUnknown
PUBLIC dc150 0 TFSInfo::Dump()::FSInfoNetworkRemoteDisk
PUBLIC dc154 0 TFSInfo::Dump()::FSInfoNetworkSidebar
PUBLIC dc158 0 TFSInfo::Dump()::FSInfoNetworkNearby
PUBLIC dc15c 0 TFSInfo::Dump()::FSInfoPublishedFolders
PUBLIC dc160 0 TFSInfo::Dump()::FSInfoSavedSearches
PUBLIC dc164 0 TFSInfo::Dump()::FSInfoPlaces
PUBLIC dc168 0 TFSInfo::Dump()::FSInfoDevices
PUBLIC dc16c 0 TFSInfo::Dump()::FSInfoUnresolvedAlias
PUBLIC dc170 0 TFSInfo::Dump()::FSInfoTrash
PUBLIC dc174 0 TFSInfo::Dump()::FSInfoDesktop
PUBLIC dc178 0 TFSInfo::Dump()::FSInfoiDisk
PUBLIC dc17c 0 TFSInfo::Dump()::FSInfoQueryHit
PUBLIC dc180 0 TFSInfo::Dump()::FSInfoQueryHitsContainer
PUBLIC dc184 0 TFSInfo::Dump()::FSInfoQueryAlias
PUBLIC dc188 0 TFSInfo::Dump()::FSInfoVirtualDocument
PUBLIC dc18c 0 TFSInfo::Dump()::FSInfoVirtualAlias
PUBLIC dc190 0 TFSInfo::Dump()::FSInfoVirtualFolder
PUBLIC dc194 0 TFSInfo::Dump()::FSInfoComputer
PUBLIC dc198 0 TFSInfo::Dump()::FSInfoNonVirtual
PUBLIC dcaf0 0 TNode::gSystemNotificationRunloop
PUBLIC dcaf8 0 __block_descriptor_tmp_1.490
PUBLIC dcb04 0 __block_holder_tmp_1.431
PUBLIC dcbd0 0 TNode::gKQueue
PUBLIC dcbd8 0 iDiskContext
PUBLIC dcbe0 0 __block_descriptor_tmp_1.432
PUBLIC dcbe8 0 __block_descriptor_tmp_5.471
PUBLIC dcbf0 0 __block_descriptor_tmp_1.455
PUBLIC dcbf8 0 __block_descriptor_tmp_2.458
PUBLIC dcc00 0 TFSCopyOperation::gCopyExactPermissions
PUBLIC dcc04 0 __block_descriptor_tmp_4.438
PUBLIC dcc0c 0 __block_descriptor_tmp_3.432
PUBLIC dcc14 0 __block_descriptor_tmp_2.427
PUBLIC dcc1c 0 __block_descriptor_tmp_1.423
PUBLIC dcc24 0 __block_descriptor_tmp_2.439
PUBLIC dcc2c 0 __block_descriptor_tmp_1.436
PUBLIC dcc38 0 TPropertyMonitor::gPropertyLock
PUBLIC dcc3c 0 sInstantOffCallback
PUBLIC dcc41 0 TNode::gFinalizing
PUBLIC dcc44 0 TNode::gBootNode
PUBLIC dcc48 0 TNode::gRootNode
PUBLIC dcc4c 0 TNode::gHomeNode
PUBLIC dcc50 0 TNode::gDevicesNode
PUBLIC dcc54 0 TNode::gPlacesNode
PUBLIC dcc58 0 TNode::gSavedSearchesNode
PUBLIC dcc5c 0 TNode::gApplicationsNode
PUBLIC dcc60 0 TNode::gDocumentsNode
PUBLIC dcc64 0 TNode::gMoviesNode
PUBLIC dcc68 0 TNode::gMusicNode
PUBLIC dcc6c 0 TNode::gPicturesNode
PUBLIC dcc70 0 TNode::gDownloadsNode
PUBLIC dcc74 0 TNode::gUtilitiesNode
PUBLIC dcc78 0 TNode::gDesktopNode
PUBLIC dcc7c 0 TNode::giDiskNode
PUBLIC dcc80 0 TNode::gNetworkNearbyNode
PUBLIC dcc84 0 TNode::gNetworkSidebarNode
PUBLIC dcc88 0 TNode::gNetworkRemoteDiskNode
PUBLIC dcc8c 0 TNode::gPublishedFoldersNode
PUBLIC dcc90 0 TNode::gSlashVolumesNode
PUBLIC dcc94 0 TNode::gSlashUsersNode
PUBLIC dcc98 0 TNode::gTrashNode
PUBLIC dcc9c 0 TNode::gHomeVRefNum
PUBLIC dcc9e 0 TNode::gBootRefNum
PUBLIC dcca0 0 TNode::gHomeIsOnReadOnlyVolume
PUBLIC dcca4 0 TNode::gKQueueRegistrationCount
PUBLIC dcca8 0 TNode::gClientNodes
PUBLIC dccac 0 TNode::gNWNearbyNodeMap
PUBLIC dccb0 0 TNode::gNWSidebarNodeMap
PUBLIC dccb4 0 TNode::gNWODSNodeMap
PUBLIC dccb8 0 TOperationLockMonitor::gOperationLock
PUBLIC dccbc 0 gInitialized
PUBLIC dccc0 0 gPowerNotificationRootPort
PUBLIC dccc4 0 gPowerNotificationNotify
PUBLIC dccc8 0 gPowerNotificationIterator
PUBLIC dcccc 0 gLocksInitialized
PUBLIC dccd0 0 TNodeEvent::gInternalEventQueue
PUBLIC dccd4 0 TNodeEvent::gInternalTickleProc
PUBLIC dccd8 0 TNodeEvent::ginternalQueueCreated
PUBLIC dccdc 0 TNodeEvent::gInternalNotifier
PUBLIC dcce0 0 TNodeEvent::gInternalClientChangeNotifier
PUBLIC dcce4 0 TTaskMonitor::gTaskLock
PUBLIC dcce8 0 TSystemNotificationTask::gSystemNotificationTask
PUBLIC dccec 0 TSystemNotificationTask::gHandleFolderManager
PUBLIC dcced 0 TSystemNotificationTask::gFSEventsEnabled
PUBLIC dccf0 0 TNodeOperationTask::gOperations
PUBLIC dccf4 0 TNodeOperationTask::gOperationCount
PUBLIC dccf8 0 TNodeMonitor::gNodeLock
PUBLIC dccfc 0 TNodeQuery::gNodeQueryList
PUBLIC dcd00 0 TNodeQuery::gQueryListLock
PUBLIC dcd04 0 TFSCopyOperation::gSourceParentStore
PUBLIC dcd08 0 TFSCopyOperation::gTargetParentStore
PUBLIC dcd0c 0 TClientChangeNotifier::gClientNotifierList
PUBLIC dcd10 0 TNotifier::gRegistrationLock
PUBLIC dcd14 0 TNotifier::gTickleLock
PUBLIC dcd18 0 TFSVolumeInfo::gLastSavedStore
PUBLIC dcd20 0 TFSVolumeInfo::gLastSavedID
PUBLIC dcd28 0 TFSVolumeInfo::gPreferencesInitialized
PUBLIC dcd29 0 TFSVolumeInfo::gNoNetworkPropertyStores
PUBLIC dcd2c 0 TFSVolumeInfo::gVolumeMap
PUBLIC dcd30 0 TFSVolumeInfo::gAllowRootStoreCreation
PUBLIC dcd34 0 TFSVolumeInfo::gMountedNetworkRemoteDisks
PUBLIC dcd38 0 TFSVolumeInfo::gPhysicalVolumeMap
PUBLIC dcd3c 0 TCFURLInfo::gQuarantineEAString
PUBLIC dcd40 0 TCopyErrorMonitor::gCopyErrorLock
PUBLIC dcd44 0 TCopyQueue::gUsedBigBuffer
PUBLIC dcd48 0 TCopyWriter::gCopyToBackup
PUBLIC dcd4c 0 TCopyWriter::gIconFileName
PUBLIC dcd50 0 TCopyWriter::gInterCopyDelay
PUBLIC dcd58 0 gDiagnosticsInitialized
PUBLIC dcd60 0 gDiagnosticLoggingFlags
PUBLIC dcd68 0 gHandledErrors
PUBLIC dcd6c 0 gErrorLoggingLock
PUBLIC dcd70 0 TFSInfo::gDataForkName
PUBLIC dcd74 0 TFSInfo::gResourceForkName
PUBLIC dcd78 0 TFSInfo::giDiskMemberName
PUBLIC dcd7c 0 TFSInfo::gFlags
PUBLIC dcd80 0 TFSInfo::gNetworkNearbyBrowserRef
PUBLIC dcd84 0 TFSInfo::gNetworkSidebarBrowserRef
PUBLIC dcd88 0 TFSInfo::gNetworkRemoteDiskBrowserRef
PUBLIC dcd8c 0 TFSInfo::gDevicesListRef
PUBLIC dcd90 0 TFSInfo::gPlacesListRef
PUBLIC dcd94 0 TFSInfo::gSavedSearchesListRef
PUBLIC dcd98 0 TFSInfo::gPublishedFoldersListRef
PUBLIC dcd9c 0 TFSInfo::gHomeVRefNum
PUBLIC dcd9e 0 TFSInfo::gLastVRefNum
PUBLIC dcda0 0 TFSInfo::gLastVolumeLocked
PUBLIC dcda1 0 TFSInfo::gLastVolumeLocal
PUBLIC dcda4 0 TFSInfo::gURLKey
PUBLIC dcda8 0 TiDiskMonitor::giDiskLock
PUBLIC dcdac 0 TUString::gFontSuffix
PUBLIC dcdc0 0 THFSPlusPropertyStore::GetPropertyStoreLock()::localLock
PUBLIC dcdc4 0 THFSPlusPropertyStore::GetPropertyStoreLock()::gPropertyStoreLock
PUBLIC dcdc8 0 THFSPlusPropertyStore::CopyProperties(THFSPlusExtendedPropertyIterator&, TUString const&, bool, bool&, TPropertyInfo*&)::localLock
PUBLIC dcdcc 0 TNode::GetOperationLock()::localLock
PUBLIC dcdd0 0 TNode::DoExternalRegistration(TCountedPtr<TNotifier> const&)::gFNSubscriptionUPP
PUBLIC dcdd4 0 TNode::HandleChange(char*, unsigned long, TCountedPtr<TVolumeSyncThread> const&)::dev
PUBLIC dcdd8 0 TNode::GetNotifierList() const::localLock
PUBLIC dcddc 0 TNode::AsFullPOSIXPath(TUString&) const::bootVRefNum
PUBLIC dcde0 0 TNode::GetSuperRootNode()::localLock
PUBLIC dcde4 0 TNode::GetSavedSearchNode(TUString const&)::finderBundle
PUBLIC dcde8 0 TNode::SetSpecialGlobalNodeForType(unsigned long, TNodePtr const&, long)::locallock
PUBLIC dcdec 0 TNode::GetSpecialNodeWithStatus(unsigned long, OpaqueNodeRequest* const&, unsigned long, TNodePtr&)::locallock
PUBLIC dcdf0 0 TNode::GetSpecialNodeWithStatus(unsigned long, OpaqueNodeRequest* const&, unsigned long, TNodePtr&)::locallock
PUBLIC dcdf4 0 TNode::GetNetworkRemoteDiskBrowser()::localLock
PUBLIC dcdf8 0 TNode::GetNetworkSidebarBrowser()::localLock
PUBLIC dcdfc 0 TNode::GetNetworkNearbyBrowser()::localLock
PUBLIC dce00 0 TNode::GetGlobalTrashNode()::localLock
PUBLIC dce04 0 TNode::GetPublishedFoldersNode()::localLock
PUBLIC dce08 0 TNode::GetSavedSearchesNode()::localLock
PUBLIC dce0c 0 TNode::GetPlacesNode()::localLock
PUBLIC dce10 0 TNode::GetDevicesNode()::localLock
PUBLIC dce14 0 TNode::GetSlashUsersNode()::localLock
PUBLIC dce18 0 TNode::GetSlashVolumesNode()::localLock
PUBLIC dce1c 0 TNode::GetBootNode()::localLock
PUBLIC dce20 0 TNode::CreateChildrenList()::localLock
PUBLIC dce24 0 TNode::GetClientNodeSet()::localLock
PUBLIC dce28 0 TNode::GetParentKeyName()::gParentKeyName
PUBLIC dce2c 0 TPathName::FullPath(TUString const&, TUString&, unsigned short) const::volumes
PUBLIC dce30 0 TNodeEvent::GetInternalClientNotifier()::internalNotifierLock
PUBLIC dce34 0 TSystemNotificationTask::Run()::localLock
PUBLIC dce38 0 TClientChangeNotifier::GetClientNotifierList()::internalNotifierLock
PUBLIC dce3c 0 TChildrenList::GetIteratorLock()::localLock
PUBLIC dce40 0 TThreadMonitor::GetThreadLock()::localLock
PUBLIC dce44 0 TThreadMonitor::GetThreadLock()::gThreadLock
PUBLIC dce48 0 TFSVolumeInfo::GetVolumeFormatString() const::unknownFormat
PUBLIC dce4c 0 TFSVolumeInfo::GetFolderSizingThread()::localLock
PUBLIC dce50 0 TFSVolumeInfo::GetVolumeSyncThread()::localLock
PUBLIC dce54 0 TFSVolumeInfo::InitializeVolumeMaps()::localLock
PUBLIC dce58 0 TCFURLInfo::GetZeroCreationDate()::localLock
PUBLIC dce5c 0 TCFURLInfo::GetZeroCreationDate()::zeroCreationDate
PUBLIC dce60 0 TCFURLInfo::GetLockCreationDate()::localLock
PUBLIC dce64 0 TCFURLInfo::GetLockCreationDate()::lockCreationDate
PUBLIC dce68 0 TCFURLInfo::EverybodyUUID()::localLock
PUBLIC dce6c 0 TCFURLInfo::EverybodyUUID()::everybodyUUIDValid
PUBLIC dce6d 0 TCFURLInfo::EverybodyUUID()::everybodyUUID
PUBLIC dce80 0 TCFURLInfo::QuarantineEAName()::localLock
PUBLIC dce84 0 TCFURLInfo::GetUserID()::UID
PUBLIC dce88 0 TCFURLInfo::GetUserID()::inited
PUBLIC dce8c 0 TCFURLInfo::CopySymlinkFile(TCountedPtr<TCFURLInfo> const&, TUString const&, unsigned long, TCountedPtr<TCFURLInfo>&) const::mach
PUBLIC dce90 0 TCFURLInfo::IsTrash() const::trashesName
PUBLIC dce94 0 TCFURLInfo::IsTrash() const::trashName
PUBLIC dce98 0 TCFURLInfo::POSIXPath(unsigned long&) const::localLock
PUBLIC dce9c 0 TCFURLInfo::GetDisplayName() const::emptyString
PUBLIC dcea0 0 TCFURLInfo::GetName() const::emptyString
PUBLIC dcea4 0 TCFURLInfo::GetBasicInfoPropertyKeys()::localLock
PUBLIC dcea8 0 TCFURLInfo::GetBasicInfoPropertyKeys()::basicKeys
PUBLIC dceac 0 TCFURLInfo::GetCopyItemRequestedPropertyKeys()::localLock
PUBLIC dceb0 0 TCFURLInfo::GetCopyItemRequestedPropertyKeys()::copyKeys
PUBLIC dceb4 0 TCFURLInfo::Initialize(TCountedPtr<TCFURLInfo> const&, TUString const&, bool)::slash
PUBLIC dceb8 0 TCopyQueue::GetCopyBufferSize()::machineBufferSize
PUBLIC dcec0 0 guard variable for TCopyWriter::WriteDates()::zeroinfo
PUBLIC dcee0 0 TCopyWriter::WriteDates()::zeroinfo
PUBLIC dcf00 0 TCopyWriter::WriteDates()::localLock
PUBLIC dcf04 0 TCopyWriter::WriteDates()::localLock
PUBLIC dcf08 0 TCopyWriter::WriteDates()::dateKeysPlusCompressedFlag
PUBLIC dcf0c 0 TCopyWriter::WriteDates()::dateKeys
PUBLIC dcf10 0 TCopyWriter::SetInterCopyDelayInSeconds(unsigned long)::isMirrorAgent
PUBLIC dcf11 0 TCopyWriter::SetInterCopyDelayInSeconds(unsigned long)::checkedFirstTime
PUBLIC dcf20 0 TFSInfo::GetBootRefNum()::bootRefNum
PUBLIC dcf24 0 TFSInfo::FetchVersionMetaData(unsigned long) const::localLock
PUBLIC dcf28 0 TFSInfo::GetKindStrings(unsigned long) const::localLock
PUBLIC dcf2c 0 TFSInfo::GetArchitecturesSupported(unsigned long&, unsigned long) const::generation
PUBLIC dcf30 0 TFSInfo::GetArchitecturePreference(TUString&, unsigned long) const::generation
PUBLIC dcf34 0 TFSInfo::GetCustomVolumeIconFile(TCountedPtr<TFSInfo>&, unsigned char) const::customVolumeIconFileName
PUBLIC dcf38 0 TFSInfo::GetCustomIconFile(TCountedPtr<TFSInfo>&, unsigned char) const::customIconFileName
PUBLIC dcf3c 0 TFSInfo::IsFramework() const::kFrameworkExtension
PUBLIC dcf40 0 TFSInfo::IsSavedSearch() const::kSavedSearchExtension
PUBLIC dcf44 0 TFSInfo::IsBurnFolder() const::burnFolderExtension
PUBLIC dcf48 0 TFSInfo::GetBootVRefNum()::gBootVRefNum
PUBLIC dcf4a 0 TFSInfo::StripACLForCopy(_acl*, FSRef const&, bool, bool, bool)::everybodyUUIDValid
PUBLIC dcf4b 0 TFSInfo::StripACLForCopy(_acl*, FSRef const&, bool, bool, bool)::everybodyUUID
PUBLIC dcf5c 0 TFSInfo::IsTrash() const::trashesName
PUBLIC dcf60 0 TFSInfo::IsTrash() const::trashName
PUBLIC dcf64 0 TFSInfo::CopyGenericIconRef(OpaqueIconRef*&) const::genericFileServerIcon
PUBLIC dcf68 0 TFSInfo::CopyGenericIconRef(OpaqueIconRef*&) const::genericHardDiskIcon
PUBLIC dcf6c 0 TFSInfo::CopyGenericIconRef(OpaqueIconRef*&) const::genericFolderIcon
PUBLIC dcf70 0 TFSInfo::CopyGenericIconRef(OpaqueIconRef*&) const::genericApplicationIcon
PUBLIC dcf74 0 TFSInfo::CopyGenericIconRef(OpaqueIconRef*&) const::genericDocumentIcon
PUBLIC dcf78 0 TFSInfo::CopyGenericIconRef(OpaqueIconRef*&) const::placeHolderIcon
PUBLIC dcf7c 0 TFSInfo::GetClippingExtensionForType(unsigned long)::kInternetLocationExtension
PUBLIC dcf80 0 TFSInfo::GetClippingExtensionForType(unsigned long)::kVNCInternetLocationExtension
PUBLIC dcf84 0 TFSInfo::GetClippingExtensionForType(unsigned long)::kATInternetLocationExtension
PUBLIC dcf88 0 TFSInfo::GetClippingExtensionForType(unsigned long)::kAFPInternetLocationExtension
PUBLIC dcf8c 0 TFSInfo::GetClippingExtensionForType(unsigned long)::kNNTPInternetLocationExtension
PUBLIC dcf90 0 TFSInfo::GetClippingExtensionForType(unsigned long)::kMailInternetLocationExtension
PUBLIC dcf94 0 TFSInfo::GetClippingExtensionForType(unsigned long)::kFileInternetLocationExtension
PUBLIC dcf98 0 TFSInfo::GetClippingExtensionForType(unsigned long)::kFTPInternetLocationExtension
PUBLIC dcf9c 0 TFSInfo::GetClippingExtensionForType(unsigned long)::kHTTPInternetLocationExtension
PUBLIC dcfa0 0 TFSInfo::GetClippingExtensionForType(unsigned long)::kSoundClippingExtension
PUBLIC dcfa4 0 TFSInfo::GetClippingExtensionForType(unsigned long)::kTextClippingExtension
PUBLIC dcfa8 0 TFSInfo::GetClippingExtensionForType(unsigned long)::kPictureClippingExtension
PUBLIC dcfac 0 TFSInfo::GetClippingExtensionForType(unsigned long)::kClippingExtension
PUBLIC dcfb0 0 TFSInfo::GetURLType(TUString)::kvncUrlString
PUBLIC dcfb4 0 TFSInfo::GetURLType(TUString)::katUrlString
PUBLIC dcfb8 0 TFSInfo::GetURLType(TUString)::kafpUrlString
PUBLIC dcfbc 0 TFSInfo::GetURLType(TUString)::knewsUrlString
PUBLIC dcfc0 0 TFSInfo::GetURLType(TUString)::kmailtoUrlString
PUBLIC dcfc4 0 TFSInfo::GetURLType(TUString)::kfiletoUrlString
PUBLIC dcfc8 0 TFSInfo::GetURLType(TUString)::kftpUrlString
PUBLIC dcfcc 0 TFSInfo::GetURLType(TUString)::khttpsUrlString
PUBLIC dcfd0 0 TFSInfo::GetURLType(TUString)::khttpUrlString
PUBLIC dcfd4 0 TFSInfo::GetUserID()::UID
PUBLIC dcfd8 0 TFSInfo::GetUserID()::inited
PUBLIC dcfdc 0 TFSInfo::GetDisplayName() const::emptyString
PUBLIC dcfe0 0 TFSInfo::GetName() const::emptyString
PUBLIC dd000 0 TFSInfo::GetNULLFSIdentity()::gNullIdentity
PUBLIC dd050 0 TFSInfo::GetPropertyStoreName()::propertyStoreName
PUBLIC dd058 0 guard variable for TFSInfo::GetPropertyRecord(unsigned long const&, TPropertyRecord&)::records
PUBLIC dd060 0 TFSInfo::GetPropertyRecord(unsigned long const&, TPropertyRecord&)::records
PUBLIC dd078 0 ConvertUniCharsToDecomposed(unsigned long, unsigned short*, unsigned long, unsigned long*, unsigned short*)::lock
PUBLIC dd07c 0 ConvertUniCharsToDecomposed(unsigned long, unsigned short*, unsigned long, unsigned long*, unsigned short*)::textinfo
PUBLIC dd080 0 TUString::InitializeStaticString(TUString*&, char const*)::localLock
PUBLIC dd084 0 TUString::FormatAsDateTimeString(UTCDateTime, TUString&, __CFDateFormatter*)::localLock
PUBLIC dd088 0 TUString::GetFilenameTimeFormatter()::localLock
PUBLIC dd08c 0 TUString::GetFilenameTimeFormatter()::filenameDateFormatter
PUBLIC dd090 0 __FSLocalizedNameTableLock
PUBLIC dd094 0 __FSLocalizedNameTable
PUBLIC dd098 0 unknownTypeString.24989
PUBLIC dd09c 0 searchPaths.24953
PUBLIC de008 0 .objc_class_name_FINode
