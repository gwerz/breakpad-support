MODULE mac x86 C3591383780DD12594C37DBDE59958B60 DesktopServicesPriv
PUBLIC 1894 0 InitializeCatalog
PUBLIC 189e 0 NodeContextOpen
PUBLIC 1abc 0 InitializeLocks()
PUBLIC 1afe 0 TNodeMonitor::InitializeLock()
PUBLIC 1b4a 0 TTaskMonitor::InitializeLock()
PUBLIC 1b92 0 TPropertyMonitor::InitializeLock()
PUBLIC 1bda 0 TCopyErrorMonitor::InitializeLock()
PUBLIC 1c3c 0 TiDiskMonitor::InitializeLock()
PUBLIC 1c84 0 TNotifier::GetTickleLock()
PUBLIC 1d1c 0 TDSMutex::Acquire()
PUBLIC 1d26 0 InitializeDebugFlags()
PUBLIC 1d7e 0 TSystemNotificationTask::TSystemNotificationTask()
PUBLIC 1d94 0 TSystemNotificationTask::Run()
PUBLIC 1e08 0 TSystemNotificationTask::SystemNotificationTaskProc(void*)
PUBLIC 1e90 0 TNode::SetMainRunloop(__CFRunLoop*)
PUBLIC 1ea4 0 TNode::GetMainRunloop()
PUBLIC 1eb6 0 TFSEventsNotificationTask::TFSEventsNotificationTask()
PUBLIC 1ecc 0 TFSEventsNotificationTask::Run()
PUBLIC 1f24 0 TFSEventsNotificationTask::FSEventsNotificationTaskProc(void*)
PUBLIC 2014 0 RegisterForComputerNameChanges()
PUBLIC 2142 0 RegisterForIDiskChanges()
PUBLIC 22d6 0 TChildrenList::GetIteratorLock()
PUBLIC 2378 0 TNode::GetBootNode()
PUBLIC 252a 0 TNodePtr::TNodePtr()
PUBLIC 2538 0 TNode::GetBootVRefNum()
PUBLIC 2568 0 THFSPlusRef::GetBootRefNum()
PUBLIC 2598 0 TMountPointList::Find(short, TNode::StPopulating*)
PUBLIC 2620 0 TMountPointList::FindButDontSynchronize(short, TNode::StPopulating*)
PUBLIC 270a 0 TNode::GetSuperRootNode()
PUBLIC 286e 0 TUString::TUString(char const*, unsigned long)
PUBLIC 289e 0 TUString::TUString(__CFString const*, bool)
PUBLIC 28a8 0 TUString::operator=(TUString const&)
PUBLIC 28e8 0 TUString::~TUString()
PUBLIC 2900 0 TUString::CopyToHFSUniStr255(HFSUniStr255*) const
PUBLIC 2970 0 TNode::TNode(TNode*)
PUBLIC 297a 0 THFSPlusRef::THFSPlusRef()
PUBLIC 29e2 0 TNodePtr::TNodePtr(TNode*)
PUBLIC 2a06 0 TNodePtr::operator=(TNodePtr const&)
PUBLIC 2a4e 0 TNodePtr::~TNodePtr()
PUBLIC 2a66 0 TNode::RemovePtrReference()
PUBLIC 2ae6 0 TNode::SetVirtualNode(HFSUniStr255 const&, bool, OpaqueIconRef*)
PUBLIC 2b62 0 THFSPlusRef::SetVirtualNode(HFSUniStr255 const&, bool, bool)
PUBLIC 2c2c 0 NewHFSUniStr255(HFSUniStr255 const&)
PUBLIC 2c8a 0 THFSPlusRef::Reset()
PUBLIC 2cfe 0 TNode::SetAliasTarget(TNodePtr const&, bool)
PUBLIC 2dbe 0 THFSPlusRef::IsAlias() const
PUBLIC 2de0 0 TNode::SetIconRef(OpaqueIconRef* const&)
PUBLIC 2e34 0 TNode::CreateTypeSpecificData()
PUBLIC 2ea0 0 TChildrenList::TChildrenList(TNode const*)
PUBLIC 2eaa 0 TCountedPtr<TNodeQueryDataRecord>::operator=(TCountedPtr<TNodeQueryDataRecord> const&)
PUBLIC 2eee 0 TNode::StPopulating::StPopulating(TNode const*, TNode::StPopulating*)
PUBLIC 2ef8 0 TDSMutex::Release()
PUBLIC 2f02 0 TNode::GetChildren() const
PUBLIC 2f5a 0 TChildrenList::begin()
PUBLIC 2f70 0 TChildrenList::GetChildrenListRecord() const
PUBLIC 2fac 0 TChildListRecord::TChildListRecord()
PUBLIC 303c 0 std::allocator<TNode*>::allocator()
PUBLIC 3042 0 std::vector<TNode*, std::allocator<TNode*> >::vector(std::allocator<TNode*> const&)
PUBLIC 304c 0 std::_Vector_base<TNode*, std::allocator<TNode*> >::_Vector_base(std::allocator<TNode*> const&)
PUBLIC 3056 0 std::_Vector_base<TNode*, std::allocator<TNode*> >::_Vector_impl::_Vector_impl(std::allocator<TNode*> const&)
PUBLIC 308a 0 std::allocator<TNode*>::allocator(std::allocator<TNode*> const&)
PUBLIC 3090 0 TChildrenList::end()
PUBLIC 30a6 0 bool __gnu_cxx::operator!=<TNode**, std::vector<TNode*, std::allocator<TNode*> > >(__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > > const&, __gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > > const&)
PUBLIC 30bc 0 TNode::StPopulating::~StPopulating()
PUBLIC 30c6 0 LockGetVolumeInfo(short, unsigned long, short*, unsigned long, FSVolumeInfo*, FSRef*)
PUBLIC 313e 0 THFSPlusRef::Initialize(FSRef const&)
PUBLIC 31e4 0 LockGetCatalogInfo(FSRef const&, unsigned long, FSCatalogInfo*, HFSUniStr255*, FSSpec*, FSRef*)
PUBLIC 3254 0 THFSPlusRef::Set(FSRef const&, HFSUniStr255 const*, short, unsigned long, bool, unsigned long, FSCatalogInfo*)
PUBLIC 38e0 0 THFSPlusRef::SetTypeInfo(unsigned long, FSCatalogInfo*, bool) const
PUBLIC 3e8e 0 CopyHFSUniStr255(HFSUniStr255 const&, HFSUniStr255&)
PUBLIC 3ece 0 THFSPlusRef::GetFSRef() const
PUBLIC 415c 0 LockLSCopyItemInfoForRefInfo(LSExtendedFSRefInfo const*, unsigned long, LSItemInfoRecord*)
PUBLIC 41b4 0 FSPermissions::GetMode() const
PUBLIC 41c0 0 FSPermissions::GetOwnerID() const
PUBLIC 41ca 0 FSPermissions::GetUserGroupID() const
PUBLIC 41d6 0 FSPermissions::GetUserAccess() const
PUBLIC 41e2 0 THFSPlusRef::SetIfHidden()
PUBLIC 4316 0 THFSPlusRef::SetDisplayName(unsigned long, FSCatalogInfo&)
PUBLIC 439c 0 THFSPlusRef::GetDistinctDisplayName(unsigned long, FSCatalogInfo*, HFSUniStr255&) const
PUBLIC 44f4 0 LockLSCopyItemAttributeForRefInfo(LSExtendedFSRefInfo const*, unsigned long, __CFString const*, void const**)
PUBLIC 4552 0 THFSPlusRef::UpdateFromCatalogInfo(unsigned long, FSCatalogInfo&)
PUBLIC 4a32 0 THFSPlusRef::SetIfExtensionHidden(unsigned long, FSCatalogInfo&)
PUBLIC 4aec 0 THFSPlusRef::InitializeBasicData()
PUBLIC 4b0e 0 THFSPlusRef::Fetch(unsigned long) const
PUBLIC 4bc4 0 THFSPlusRef::GetCatalogInfo(unsigned long, FSCatalogInfo*, HFSUniStr255*) const
PUBLIC 4c32 0 TNode::SetRootRef(THFSPlusRef const&)
PUBLIC 4c44 0 THFSPlusRef::operator=(THFSPlusRef const&)
PUBLIC 5254 0 THFSPlusCatalog::THFSPlusCatalog(TNode*, short, FSVolumeInfo const&)
PUBLIC 5264 0 LockGetCatalogInfoByName(short, unsigned long, unsigned long, unsigned short const*, unsigned long, FSCatalogInfo*, FSRef*)
PUBLIC 52dc 0 TNode::SetCatalog(THFSPlusCatalog*)
PUBLIC 534e 0 THFSPlusRef::IsVolume() const
PUBLIC 5360 0 TNode::IsVolumeiDisk(short)
PUBLIC 53b6 0 TNode::iToolsMemberName()
PUBLIC 548a 0 TUString::TUString(TUString const&)
PUBLIC 54b4 0 THFSPlusCatalog::RecalculateFreeSpaceAndCapacity() const
PUBLIC 55ac 0 THFSPlusCatalog::GetVolumeParent(TNodePtr&) const
PUBLIC 5642 0 THFSPlusCatalog::SystemBuildVersion()
PUBLIC 584c 0 TUString::TUString()
PUBLIC 585a 0 TNode::GetPathName(TUString&, bool, bool) const
PUBLIC 5910 0 TNode::AsFullPOSIXPath(unsigned long, unsigned long&, unsigned short*&) const
PUBLIC 5bac 0 TNodePtr::TNodePtr(TNodePtr const&)
PUBLIC 5bd2 0 TUString::TUString(long, unsigned short const*)
PUBLIC 5bfa 0 TUString::Append(TUString const&)
PUBLIC 5c92 0 TUString::Length() const
PUBLIC 5cac 0 NewHFSUniStr255(__CFString const*)
PUBLIC 5d42 0 TChildrenList::insert(__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >, TNode*)
PUBLIC 5d6c 0 std::vector<TNode*, std::allocator<TNode*> >::insert(__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >, TNode* const&)
PUBLIC 5e00 0 std::vector<TNode*, std::allocator<TNode*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >, TNode* const&)
PUBLIC 5f76 0 std::vector<TNode*, std::allocator<TNode*> >::size() const
PUBLIC 6026 0 void std::_Destroy<__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >, std::allocator<TNode*> >(__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >, __gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >, std::allocator<TNode*>)
PUBLIC 6050 0 THFSPlusCatalog::GetExtendedPropertyStoreForContainer(TNodePtr const&) const
PUBLIC 60b6 0 THFSPlusRef::IsContainer() const
PUBLIC 60cc 0 THFSPlusRef::GetFileSystemID() const
PUBLIC 60e6 0 THFSPlusCatalog::GetExtendedPropertyStore(unsigned long) const
PUBLIC 62f8 0 TPropertyMonitor::TPropertyMonitor()
PUBLIC 633c 0 THashTable<long long, THFSPlusPropertyStore*>::find(long long const&)
PUBLIC 6430 0 TPropertyMonitor::~TPropertyMonitor()
PUBLIC 6474 0 LockMakeDirectoryFSRef(short, unsigned long, FSRef*)
PUBLIC 64ce 0 TFSInfo::TFSInfo()
PUBLIC 64d8 0 TFSCatalogInfo::TFSCatalogInfo()
PUBLIC 64fe 0 TFSInfo::Initialize(FSRef const&, unsigned long const&)
PUBLIC 658c 0 TFSInfo::Initialize(FSRef const&, FSRef const&, HFSUniStr255 const&, FSCatalogInfo const&, unsigned long)
PUBLIC 66b6 0 TFSCatalogInfo::TFSCatalogInfo(FSCatalogInfo const&)
PUBLIC 66d8 0 TFSCatalogInfo::operator=(TFSCatalogInfo const&)
PUBLIC 6734 0 TFSCatalogInfo::~TFSCatalogInfo()
PUBLIC 673e 0 THFSPlusPropertyStore::THFSPlusPropertyStore(TFSInfo&)
PUBLIC 674a 0 TFSInfo::TFSInfo(TFSInfo const&)
PUBLIC 6754 0 THashTable<long long, THFSPlusPropertyStore*>::operator[](long long const&)
PUBLIC 6848 0 THashTable<long long, THFSPlusPropertyStore*>::reserve(unsigned long)
PUBLIC 6b56 0 THashTable<long long, THFSPlusPropertyStore*>::hash_increment(long long const&) const
PUBLIC 6b86 0 TFSInfo::~TFSInfo()
PUBLIC 6b90 0 THFSPlusPropertyStore::GetProperties(bool) const
PUBLIC 6be8 0 THFSPlusPropertyStore::Open(bool, bool) const
PUBLIC 6d4a 0 TPropertyInfoList::TPropertyInfoList()
PUBLIC 6d54 0 std::allocator<TPropertyInfo*>::allocator()
PUBLIC 6d5a 0 std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> >::vector(std::allocator<TPropertyInfo*> const&)
PUBLIC 6d64 0 std::_Vector_base<TPropertyInfo*, std::allocator<TPropertyInfo*> >::_Vector_base(std::allocator<TPropertyInfo*> const&)
PUBLIC 6d6e 0 std::_Vector_base<TPropertyInfo*, std::allocator<TPropertyInfo*> >::_Vector_impl::_Vector_impl(std::allocator<TPropertyInfo*> const&)
PUBLIC 6da2 0 std::allocator<TPropertyInfo*>::allocator(std::allocator<TPropertyInfo*> const&)
PUBLIC 6da8 0 std::allocator<TPropertyInfo*>::~allocator()
PUBLIC 6db0 0 TMountPointList::SupportsInvisibleBit(short, TNode::StPopulating*, bool)
PUBLIC 6e26 0 THFSPlusCatalog::SupportsInvisibleBit() const
PUBLIC 6e32 0 TFSInfo::Mode() const
PUBLIC 6e4e 0 TFSInfo::GetOwnerID() const
PUBLIC 6e5e 0 THFSPlusCatalog::HasPersistentStores(unsigned long, unsigned long) const
PUBLIC 6e9e 0 TPropertyInfo::CreatePropertyList(FSRef const*, UTCDateTime&, bool, bool, TPropertyInfoList*)
PUBLIC 71da 0 TPropertyInfo::GetPropertyStoreName()
PUBLIC 73aa 0 TFSInfo::IsVisible() const
PUBLIC 73c2 0 TFSInfo::DataForkName()
PUBLIC 741c 0 TPropertyInfo::MakeProperties(TPropertyInfoList*, unsigned char*, unsigned long, bool)
PUBLIC 7622 0 IAMalloc(unsigned long)
PUBLIC 7644 0 TPropertyStream::TPropertyStream(unsigned char*, unsigned long)
PUBLIC 76a6 0 IAStoreStream::IAStoreStream()
PUBLIC 7722 0 IAObject::IAObject()
PUBLIC 7746 0 IAMallocArraySizedOfType(unsigned long, unsigned long)
PUBLIC 77c8 0 IAMallocSized(unsigned long)
PUBLIC 77ea 0 TPropertyStream::SetMarker(long, TPropertyStream::EFrom)
PUBLIC 7828 0 IAMakeStorage(IAStoreStream*)
PUBLIC 7870 0 BuddyStorage::BuddyStorage(IAStoreStream*)
PUBLIC 79a6 0 IAStorage::IAStorage(IAStoreStream*, unsigned long)
PUBLIC 79e0 0 IAMallocArrayOfType(unsigned long, unsigned long)
PUBLIC 7a62 0 UInt32Set::UInt32Set()
PUBLIC 7a9a 0 SkipList::SkipList(unsigned char)
PUBLIC 7b48 0 SL_Ceiling(unsigned char, unsigned char)
PUBLIC 7b64 0 StringUInt32Map::StringUInt32Map()
PUBLIC 7b9c 0 StringSet::StringSet(unsigned char)
PUBLIC 7bd4 0 BuddyStorage::Open(bool)
PUBLIC 7d0c 0 TPropertyStream::Open(bool)
PUBLIC 7d12 0 IAStoreStream::SetPosition(unsigned long, unsigned long)
PUBLIC 7d5a 0 IAStoreStream::MaybeFlushBuffer()
PUBLIC 7de4 0 IAStoreStream::ReadUInt32()
PUBLIC 7e80 0 IAStoreStream::ReadPastEndOfBuffer()
PUBLIC 7f66 0 TPropertyStream::Read(unsigned long, unsigned char*, unsigned long)
PUBLIC 7fe8 0 TPropertyStream::ReadData(unsigned char*, long&)
PUBLIC 8056 0 BuddyStorage::BlockInfoRead(IAStoreStream*)
PUBLIC 816a 0 BuddyStorage::TOCRead(IAStoreStream*)
PUBLIC 8264 0 IAStoreStream::ReadBytes(void*, unsigned long)
PUBLIC 82a2 0 StringUInt32Map::Put(char const*, unsigned long)
PUBLIC 831a 0 SkipList::Put(void*, void*)
PUBLIC 83b6 0 SkipList::SetFinger(void*, void**)
PUBLIC 8444 0 SkipList::Insert(void*, void**)
PUBLIC 8512 0 SkipList::NewNode(unsigned char, void*)
PUBLIC 855e 0 BuddyStorage::FreeAddressesRead(IAStoreStream*)
PUBLIC 85d0 0 UInt32Set::SetFinger(void*, void**)
PUBLIC 863e 0 TPropertyInfo::TPropertyInfo()
PUBLIC 8648 0 IAOrderedStorable::IAOrderedStorable()
PUBLIC 8678 0 IAStorable::IAStorable()
PUBLIC 86a8 0 TPropertyValue::TPropertyValue()
PUBLIC 86c4 0 IAMakeOrderedStorableSet(IAOrderedStorable*)
PUBLIC 8714 0 BTree::BTree(IAOrderedStorable*, unsigned long)
PUBLIC 87bc 0 IAOrderedStorableSet::IAOrderedStorableSet()
PUBLIC 87ec 0 IAStruct::operator new(unsigned long)
PUBLIC 87f6 0 Scroll::Scroll()
PUBLIC 8828 0 IAStorage::GetNamedBlock(char const*)
PUBLIC 8864 0 BuddyStorage::TOC_Get(char const*)
PUBLIC 88d8 0 TPropertyStream::IsOpen()
PUBLIC 88e2 0 StringUInt32Map::Get(char const*)
PUBLIC 8910 0 SkipList::Get(void*, void*)
PUBLIC 8982 0 StringSet::LessThan(void*, void*)
PUBLIC 89a4 0 StringSet::Equal(void*, void*)
PUBLIC 89ca 0 BTree::Open(IAStorage*, unsigned long, bool, bool)
PUBLIC 8bb2 0 TPropertyStream::IsWritable()
PUBLIC 8bbc 0 IAInputBlock::IAInputBlock(IAStorage*, unsigned long, IAStoreStream*)
PUBLIC 8bc6 0 BuddyStorage::GetReadAddress(unsigned long)
PUBLIC 8cc6 0 BuddyStorage::GetBlockSize(unsigned long)
PUBLIC 8cf0 0 BTHeader::Restore(IAInputBlock*)
PUBLIC 8d46 0 IAInputBlock::~IAInputBlock()
PUBLIC 8d4c 0 ReadPage(unsigned long, IAStorage*, IAStoreStream*, IAOrderedStorable*)
PUBLIC 8e38 0 Leaf::Leaf(unsigned long)
PUBLIC 8e6c 0 Page::Page(unsigned long)
PUBLIC 8eba 0 Page::ReadEntries(IAInputBlock*, IAOrderedStorable*)
PUBLIC 8f32 0 SkipList::FingerStart(void**)
PUBLIC 8f56 0 Leaf::EntryRestore(PageEntry*, IAOrderedStorable*, IAInputBlock*)
PUBLIC 8faa 0 TPropertyInfo::Restore(IAInputBlock*) const
PUBLIC 94c4 0 IAStoreStream::ReadBufferOfUInt16(void*, unsigned long)
PUBLIC 94f2 0 IAStoreStream::ReadUInt16()
PUBLIC 954a 0 TPropertyValue::TPropertyValue(unsigned long, unsigned char*)
PUBLIC 9568 0 TPropertyValue::operator=(TPropertyValue const&)
PUBLIC 95aa 0 TPropertyValue::Release()
PUBLIC 9614 0 TPropertyValue::TPropertyValue(TPropertyValue const&)
PUBLIC 96fc 0 TPropertyValue::~TPropertyValue()
PUBLIC 9706 0 TPropertyValue::TPropertyValue(bool)
PUBLIC 971a 0 BTree::MakeIterator()
PUBLIC 9762 0 BTreeIterator::BTreeIterator(BTree*)
PUBLIC 97c0 0 IAOrderedStorableIterator::IAOrderedStorableIterator()
PUBLIC 97f0 0 BTreeIterator::BuildStack(IAOrderedStorable const*)
PUBLIC 9862 0 BTreeIterator::PushForward(Page*)
PUBLIC 98e2 0 IteratorFrame::IteratorFrame(PageEntry*, Page*, IteratorFrame*)
PUBLIC 9918 0 TPropertyInfo::DeepCopy() const
PUBLIC 9960 0 TPropertyInfo::TPropertyInfo(TPropertyInfo const&)
PUBLIC 996a 0 BTreeIterator::Next()
PUBLIC 9a04 0 BTreeIterator::Increment()
PUBLIC 9aa6 0 std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> >::push_back(TPropertyInfo* const&)
PUBLIC 9ae8 0 std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >, TPropertyInfo* const&)
PUBLIC 9c5e 0 std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> >::size() const
PUBLIC 9d0e 0 void std::_Destroy<__gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >, std::allocator<TPropertyInfo*> >(__gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >, __gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >, std::allocator<TPropertyInfo*>)
PUBLIC 9d38 0 bool __gnu_cxx::operator!=<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >(__gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > > const&, __gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > > const&)
PUBLIC 9d4e 0 BTreeIterator::PopForward()
PUBLIC 9daa 0 IAStruct::~IAStruct()
PUBLIC 9dc8 0 IAStruct::operator delete(void*)
PUBLIC 9dd2 0 IAFree(void*)
PUBLIC 9de4 0 BTreeIterator::~BTreeIterator()
PUBLIC 9dee 0 BTree::~BTree()
PUBLIC 9df8 0 Leaf::~Leaf()
PUBLIC 9e02 0 Page::~Page()
PUBLIC 9e6e 0 SkipList::Pop(void*)
PUBLIC 9f48 0 IAFreeSized(void*, unsigned long)
PUBLIC 9f5a 0 BuddyStorage::FreeChunks(unsigned long**)
PUBLIC 9fb2 0 StringSet::~StringSet()
PUBLIC a018 0 TPropertyStream::~TPropertyStream()
PUBLIC a022 0 TPropertyInfoList::AddPtrReference()
PUBLIC a03e 0 TPropertyInfoList::RemovePtrReference()
PUBLIC a078 0 TNode::FindFolder(unsigned long, bool, FSRef&) const
PUBLIC a170 0 LockFindFolder(short, unsigned long, unsigned char, FSRef*)
PUBLIC a22e 0 TNode::SendNotification(unsigned long, TNodePtr const&, unsigned long, long)
PUBLIC a35a 0 TNodeEvent::CreateNodeEvent(unsigned long, TNodePtr const&, unsigned long, TCountedPtr<TNotifier> const&, bool, long)
PUBLIC a3c6 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, unsigned long, TCountedPtr<TNotifier> const&, bool, long)
PUBLIC a3d6 0 TCountedPtr<TNotifier>::operator=(TCountedPtr<TNotifier> const&)
PUBLIC a414 0 TCountedPtr<TNodeTask>::operator=(TCountedPtr<TNodeTask> const&)
PUBLIC a452 0 TNodeEvent::AddPtrReference()
PUBLIC a466 0 TNode::GetNotifierList() const
PUBLIC a4a0 0 TNotifierList::TNotifierList()
PUBLIC a4d6 0 std::allocator<TCountedPtr<TNotifier> >::allocator()
PUBLIC a4dc 0 std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::vector(std::allocator<TCountedPtr<TNotifier> > const&)
PUBLIC a4e6 0 std::_Vector_base<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::_Vector_base(std::allocator<TCountedPtr<TNotifier> > const&)
PUBLIC a4f0 0 std::_Vector_base<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::_Vector_impl::_Vector_impl(std::allocator<TCountedPtr<TNotifier> > const&)
PUBLIC a524 0 std::allocator<TCountedPtr<TNotifier> >::allocator(std::allocator<TCountedPtr<TNotifier> > const&)
PUBLIC a52a 0 TNodeEvent::Notify(TNotifierList const&)
PUBLIC a618 0 TNotifierList::TNotifierList(TNotifierList const&)
PUBLIC a644 0 std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::vector(std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > const&)
PUBLIC a6b8 0 std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::size() const
PUBLIC a6f2 0 std::_Vector_base<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::_Vector_base(unsigned long, std::allocator<TCountedPtr<TNotifier> > const&)
PUBLIC a75c 0 TCountedPtr<TNotifier>* std::__uninitialized_copy_aux<__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier> const*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >, TCountedPtr<TNotifier>*>(__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier> const*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >, __gnu_cxx::__normal_iterator<TCountedPtr<TNotifier> const*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >, TCountedPtr<TNotifier>*, __false_type)
PUBLIC a79e 0 bool __gnu_cxx::operator!=<TCountedPtr<TNotifier> const*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >(__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier> const*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > > const&, __gnu_cxx::__normal_iterator<TCountedPtr<TNotifier> const*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > > const&)
PUBLIC a7b4 0 std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::~vector()
PUBLIC a800 0 std::_Vector_base<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::~_Vector_base()
PUBLIC a818 0 TNodeEvent::RemovePtrReference()
PUBLIC a84e 0 TNodeEvent::~TNodeEvent()
PUBLIC a8e0 0 THFSPlusRef::~THFSPlusRef()
PUBLIC a8ea 0 TNodePtr::operator->() const
PUBLIC a8f4 0 TNode::FindChild(HFSUniStr255 const&) const
PUBLIC ac5c 0 TChildrenList::Find(HFSUniStr255 const&)
PUBLIC acc2 0 TChildrenList::size() const
PUBLIC acdc 0 THFSPlusRef::InitializeWithParentFSRef(FSRef const&, HFSUniStr255 const&)
PUBLIC ad08 0 THFSPlusRef::InitializeWithParentFSRef(FSRef const&, unsigned long, unsigned short const*)
PUBLIC adac 0 NewHFSUniStr255(unsigned long, unsigned short const*)
PUBLIC ae24 0 LockMakeFSRefUnicode(FSRef const&, unsigned long, unsigned short const*, unsigned long, FSRef*)
PUBLIC ae8c 0 THFSPlusCatalog::GetHiddenList()
PUBLIC b4c6 0 std::allocator<HFSUniStr255*>::allocator()
PUBLIC b4cc 0 std::vector<HFSUniStr255*, std::allocator<HFSUniStr255*> >::vector(std::allocator<HFSUniStr255*> const&)
PUBLIC b4d6 0 std::_Vector_base<HFSUniStr255*, std::allocator<HFSUniStr255*> >::_Vector_base(std::allocator<HFSUniStr255*> const&)
PUBLIC b4e0 0 std::_Vector_base<HFSUniStr255*, std::allocator<HFSUniStr255*> >::_Vector_impl::_Vector_impl(std::allocator<HFSUniStr255*> const&)
PUBLIC b514 0 std::allocator<HFSUniStr255*>::allocator(std::allocator<HFSUniStr255*> const&)
PUBLIC b51a 0 TNode::MakePOSIXPath(unsigned char*, unsigned long) const
PUBLIC b594 0 std::vector<HFSUniStr255*, std::allocator<HFSUniStr255*> >::push_back(HFSUniStr255* const&)
PUBLIC b5d6 0 std::vector<HFSUniStr255*, std::allocator<HFSUniStr255*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<HFSUniStr255**, std::vector<HFSUniStr255*, std::allocator<HFSUniStr255*> > >, HFSUniStr255* const&)
PUBLIC b73e 0 std::vector<HFSUniStr255*, std::allocator<HFSUniStr255*> >::size() const
PUBLIC b7ee 0 void std::_Destroy<__gnu_cxx::__normal_iterator<HFSUniStr255**, std::vector<HFSUniStr255*, std::allocator<HFSUniStr255*> > >, std::allocator<HFSUniStr255*> >(__gnu_cxx::__normal_iterator<HFSUniStr255**, std::vector<HFSUniStr255*, std::allocator<HFSUniStr255*> > >, __gnu_cxx::__normal_iterator<HFSUniStr255**, std::vector<HFSUniStr255*, std::allocator<HFSUniStr255*> > >, std::allocator<HFSUniStr255*>)
PUBLIC b818 0 bool __gnu_cxx::operator!=<HFSUniStr255**, std::vector<HFSUniStr255*, std::allocator<HFSUniStr255*> > >(__gnu_cxx::__normal_iterator<HFSUniStr255**, std::vector<HFSUniStr255*, std::allocator<HFSUniStr255*> > > const&, __gnu_cxx::__normal_iterator<HFSUniStr255**, std::vector<HFSUniStr255*, std::allocator<HFSUniStr255*> > > const&)
PUBLIC b82e 0 CompareUniChars(unsigned long, unsigned short const*, unsigned long, unsigned short const*, bool, long*)
PUBLIC b8a0 0 TNode::AddChild(TNodePtr&, THFSPlusExtendedPropertyIterator*, TCountedPtr<TPropertyMap> const&)
PUBLIC b942 0 TNode::AddChild(TNodePtr&, THFSPlusExtendedPropertyIterator*)
PUBLIC ba26 0 TChildrenList::AddNewChild(TNode*, bool&)
PUBLIC bbbc 0 TChildrenList::Find(TNodePtr const&)
PUBLIC bbde 0 TChildrenList::Find(THFSPlusRef const&)
PUBLIC bc44 0 bool __gnu_cxx::operator==<TNode**, std::vector<TNode*, std::allocator<TNode*> > >(__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > > const&, __gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > > const&)
PUBLIC bc5a 0 THFSPlusRef::InvalidateCount() const
PUBLIC bc6a 0 TNode::CopyProperties(TCountedPtr<TPropertyMap> const&)
PUBLIC bcee 0 TNode::SetIfIsBackup()
PUBLIC bdf0 0 TUString::CopyToUniString(UniString*) const
PUBLIC be68 0 TNodePtr::operator!=(TNode*) const
PUBLIC be7c 0 TNode::AddPtrReference()
PUBLIC be98 0 TNode::RegisterForInternalNotifications(TNodePtr const&)
PUBLIC bf00 0 TNodeEvent::GetInternalEventQueue()
PUBLIC bf38 0 TNodeEvent::InitializeInternalQueue()
PUBLIC bfa2 0 TClientChangeNotifier::GetClientChangeNotifier(NodeClientContext, OpaqueEventQueue*, void (*)(OpaqueEventQueue*), __CFRunLoop*)
PUBLIC c10c 0 TClientChangeNotifier::TClientChangeNotifier(NodeClientContext, OpaqueEventQueue*, void (*)(OpaqueEventQueue*), __CFRunLoop*)
PUBLIC c160 0 TClientChangeNotifier::AddEventHandlerToRunLoop()
PUBLIC c25a 0 TClientChangeNotifier::GetClientNotifierList()
PUBLIC c2d2 0 TNotifier::TNotifier(TCountedPtr<TClientChangeNotifier> const&, TNodePtr const&, TNodePtr const&)
PUBLIC c2dc 0 TCountedPtr<TClientChangeNotifier>::operator=(TCountedPtr<TClientChangeNotifier> const&)
PUBLIC c31a 0 TClientChangeNotifier::AddPtrReference()
PUBLIC c32e 0 TNotifier::AddPtrReference()
PUBLIC c34a 0 TNotifier::RemovePtrReference()
PUBLIC c384 0 TClientChangeNotifier::RemovePtrReference()
PUBLIC c3f8 0 TNotifier::GetRunLoop() const
PUBLIC c406 0 TNotifier::GetEventHandlerProc() const
PUBLIC c414 0 TNotifier::GetEventQueue() const
PUBLIC c422 0 TNotifier::GetEventListener() const
PUBLIC c442 0 TClientChangeNotifier::~TClientChangeNotifier()
PUBLIC c4a6 0 TNotifier::Register(TCountedPtr<TClientChangeNotifier> const&, TNodePtr const&, TNodePtr const&, unsigned long)
PUBLIC c86a 0 bool __gnu_cxx::operator!=<TCountedPtr<TNotifier>*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >(__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier>*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > > const&, __gnu_cxx::__normal_iterator<TCountedPtr<TNotifier>*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > > const&)
PUBLIC c880 0 bool __gnu_cxx::operator==<TCountedPtr<TNotifier>*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >(__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier>*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > > const&, __gnu_cxx::__normal_iterator<TCountedPtr<TNotifier>*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > > const&)
PUBLIC c896 0 std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::push_back(TCountedPtr<TNotifier> const&)
PUBLIC c8da 0 std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::_M_insert_aux(__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier>*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >, TCountedPtr<TNotifier> const&)
PUBLIC cac2 0 void std::_Destroy<__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier>*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >, std::allocator<TCountedPtr<TNotifier> > >(__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier>*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >, __gnu_cxx::__normal_iterator<TCountedPtr<TNotifier>*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >, std::allocator<TCountedPtr<TNotifier> >)
PUBLIC cb02 0 TNode::GetVolumesNode()
PUBLIC cc92 0 TChildrenList::SetIsVolumes()
PUBLIC cd06 0 TAliasRecord::TAliasRecord()
PUBLIC cd26 0 TNode::PostInternalRequest(unsigned long, TNodePtr const&, void*)
PUBLIC cdac 0 PropertyStoreCalled()
PUBLIC cdbe 0 TNodeEvent::CreateNodeEvent(unsigned long, TNodePtr const&, void*, TCountedPtr<TNotifier> const&, bool)
PUBLIC ce22 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, void*, TCountedPtr<TNotifier> const&, bool)
PUBLIC ce2c 0 TNodeSyncTask::RequestSync(TCountedPtr<TNodeEvent> const&)
PUBLIC ce52 0 TNodeSyncTask::GetTask()
PUBLIC ced0 0 TNodeSyncTask::Cancelled()
PUBLIC cee2 0 TNodeSyncTask::TNodeSyncTask()
PUBLIC ceec 0 TNodeThread::TNodeThread(long (*)(void*))
PUBLIC cf1c 0 TNodeThread::Run()
PUBLIC cf66 0 TNodeSyncTask::SyncTaskProc(void*)
PUBLIC d07e 0 TNodeSyncTask::GetQueue()
PUBLIC d0d2 0 TNodeSyncTask::Synchronize(TCountedPtr<TNodeEvent> const&)
PUBLIC d118 0 TNode::GetFavoritesNode()
PUBLIC d2a6 0 TChildrenList::SetIsFavorites()
PUBLIC d31a 0 TNode::PostInternalRequest(unsigned long, TNodePtr const&, unsigned long)
PUBLIC d3a8 0 TNode::GetSharedFoldersNode()
PUBLIC d51e 0 TNode::GetSharedFoldersList()
PUBLIC d594 0 TNodeSyncTask::HandleInternalEvent(TCountedPtr<TNodeEvent> const&)
PUBLIC d7dc 0 TNodeSyncTask::HandleInternalEventVirtualChildListChanged(TCountedPtr<TNodeEvent> const&, TNodePtr const&)
PUBLIC d854 0 TChildrenList::GetSFLList() const
PUBLIC dfe8 0 TNode::TestAndSetInitialPopulationStarted()
PUBLIC e00e 0 TNode::GetVolumesFileList()
PUBLIC e080 0 LockSFLGetVolumesList(__CFString const*, __CFString const*, unsigned long, unsigned long*)
PUBLIC e0de 0 TFSEventsNotificationTask::HandleFileChanged(__FSEventStream const*, void*, unsigned long, void*, unsigned long const*, unsigned long long const*)
PUBLIC e182 0 TNode::HandleChange(char*)
PUBLIC e51e 0 TUString::BeginsWith(TUString const&) const
PUBLIC e54e 0 TPathName::TPathName(TUString const&, unsigned short)
PUBLIC e558 0 std::allocator<HFSUniStr255>::allocator()
PUBLIC e55e 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::deque(std::allocator<HFSUniStr255> const&)
PUBLIC e580 0 std::_Deque_base<HFSUniStr255, std::allocator<HFSUniStr255> >::_Deque_base(std::allocator<HFSUniStr255> const&, unsigned long)
PUBLIC e5b4 0 std::_Deque_base<HFSUniStr255, std::allocator<HFSUniStr255> >::_Deque_impl::_Deque_impl(std::allocator<HFSUniStr255> const&)
PUBLIC e61e 0 std::allocator<HFSUniStr255>::allocator(std::allocator<HFSUniStr255> const&)
PUBLIC e624 0 std::_Deque_base<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_initialize_map(unsigned long)
PUBLIC e6ce 0 std::_Deque_base<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_allocate_map(unsigned long)
PUBLIC e706 0 std::_Deque_base<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_get_map_allocator() const
PUBLIC e740 0 std::allocator<HFSUniStr255*>::allocator<HFSUniStr255>(std::allocator<HFSUniStr255> const&)
PUBLIC e746 0 std::_Deque_base<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_create_nodes(HFSUniStr255**, HFSUniStr255**)
PUBLIC e772 0 std::_Deque_base<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_allocate_node()
PUBLIC e7b8 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::push_back(HFSUniStr255 const&)
PUBLIC e80e 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_push_back_aux(HFSUniStr255 const&)
PUBLIC e89c 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_reserve_map_at_back(unsigned long)
PUBLIC e8e0 0 TMountPointList::Find(HFSUniStr255 const&)
PUBLIC e9ea 0 TNode::Equal(HFSUniStr255 const&) const
PUBLIC eac0 0 THFSPlusCatalog::CaseSensitive() const
PUBLIC eacc 0 TNode::HandleRecursiveListeners()
PUBLIC ec9c 0 TNodeTask::TNodeTask()
PUBLIC eca6 0 TChildCreator::TChildCreator()
PUBLIC ecb0 0 TCountedPtr<TPropertyMap>::operator=(TCountedPtr<TPropertyMap> const&)
PUBLIC ecee 0 TCountedPtr<TClientQuery>::operator=(TCountedPtr<TClientQuery> const&)
PUBLIC ed2c 0 TNodeTask::AddPtrReference()
PUBLIC ed40 0 TNodeTask::SetRequest(TNodePtr const&, unsigned long, unsigned long)
PUBLIC ee20 0 THFSPlusCatalog::RequestSizeTask(TCountedPtr<TNodeTask> const&)
PUBLIC ee92 0 TFolderSizeTask::TFolderSizeTask(THFSPlusCatalog*)
PUBLIC ee9c 0 TFolderSizeTask::FolderSizeTaskProc(void*)
PUBLIC f0aa 0 TFolderSizeTask::RequestSizeTask(TCountedPtr<TNodeTask> const&)
PUBLIC f0fc 0 TNodeTask::RemovePtrReference()
PUBLIC f132 0 THFSPlusRef::IsPackage() const
PUBLIC f146 0 TNode::GetSlashVolumesNode()
PUBLIC f196 0 TNode::FindChildButDontSynchronize(HFSUniStr255 const&) const
PUBLIC f2e0 0 TNode::LessThan(HFSUniStr255 const&) const
PUBLIC f3b6 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::~deque()
PUBLIC f42c 0 void std::_Destroy<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::allocator<HFSUniStr255> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::allocator<HFSUniStr255>)
PUBLIC f468 0 std::_Deque_base<HFSUniStr255, std::allocator<HFSUniStr255> >::~_Deque_base()
PUBLIC f4ba 0 std::_Deque_base<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_deallocate_node(HFSUniStr255*)
PUBLIC f4ca 0 std::_Deque_base<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_deallocate_map(HFSUniStr255**, unsigned long)
PUBLIC f4f2 0 TChildrenList::LastResizeTime() const
PUBLIC f530 0 TNode::AdjustedResizeQuanta() const
PUBLIC f5cc 0 TFolderSizeTask::HandleSizeRequest(TCountedPtr<TNodeTask> const&)
PUBLIC f90a 0 TNode::ClearDeepSyncRequested()
PUBLIC f928 0 TNodeTask::SetRequestStatus(long)
PUBLIC f98e 0 TChildrenList::SetIsSizing()
PUBLIC f9d0 0 TNode::RecalculateFreeSpace()
PUBLIC fa48 0 THFSPlusCatalog::RecalculateFreeSpace()
PUBLIC fac2 0 TChildrenList::SetIsNotSizing()
PUBLIC fb04 0 TNode::SendNotification(TCountedPtr<TNodeTask> const&)
PUBLIC fb9c 0 TNodeTask::RemoveTask()
PUBLIC fc20 0 TNodeTask::GetTaskList()
PUBLIC fc94 0 TNodeTask::~TNodeTask()
PUBLIC fd62 0 TChildCreator::~TChildCreator()
PUBLIC fd6c 0 LockSFLAddCallback(OpaqueSFLRef*, void (*)(OpaqueSFLRef*, void*), void*)
PUBLIC fdcc 0 TChildrenList::SetSFLList(OpaqueSFLRef*)
PUBLIC fe40 0 NodeEventNewEventQueue
PUBLIC fe5a 0 TNodeEvent::NewEventQueue(OpaqueEventQueue*&)
PUBLIC fe90 0 TNode::PopulateVirtualContainerFromSFL(OpaqueSFLRef*, bool)
PUBLIC 10790 0 TNode::StSynchronize::StSynchronize(TNode*, bool, bool)
PUBLIC 107a0 0 TChildrenList::LastSyncStartTime() const
PUBLIC 107b6 0 TNode::AdjustedSyncQuanta() const
PUBLIC 1083a 0 TChildrenList::GetLastSyncDuration() const
PUBLIC 10850 0 TNode::HandleSyncStarted()
PUBLIC 108c8 0 TSFLSynchronizer::TSFLSynchronizer(TNodePtr const&, OpaqueSFLRef*, bool)
PUBLIC 108d2 0 std::allocator<TSFLRecord*>::allocator()
PUBLIC 108d8 0 std::vector<TSFLRecord*, std::allocator<TSFLRecord*> >::vector(std::allocator<TSFLRecord*> const&)
PUBLIC 108e2 0 std::_Vector_base<TSFLRecord*, std::allocator<TSFLRecord*> >::_Vector_base(std::allocator<TSFLRecord*> const&)
PUBLIC 108ec 0 std::_Vector_base<TSFLRecord*, std::allocator<TSFLRecord*> >::_Vector_impl::_Vector_impl(std::allocator<TSFLRecord*> const&)
PUBLIC 10920 0 std::allocator<TSFLRecord*>::allocator(std::allocator<TSFLRecord*> const&)
PUBLIC 10926 0 LockSFLCreateSnapshot(OpaqueSFLRef*, unsigned long)
PUBLIC 10976 0 GetRootNode
PUBLIC 109ac 0 NodeCopySpecialFolder
PUBLIC 10a38 0 TNode::GetSpecialNodeWithStatus(unsigned long, OpaqueNodeRequest* const&, unsigned long, TNodePtr&)
PUBLIC 10f2c 0 TNodePtr::ReturnAsNodeRef() const
PUBLIC 10f56 0 CopyNodeRef
PUBLIC 10f8a 0 TNode::WeakValidate(TNode*)
PUBLIC 10fa2 0 DisposeNode
PUBLIC 11074 0 CreateClientNodeRef
PUBLIC 11162 0 TNode::CreateNewVirtualNode(TNodePtr const&, TUString const&, bool, TNodePtr const&, OpaquePropertyListRef*)
PUBLIC 111ec 0 TNode::SetVirtualNode(HFSUniStr255 const&, bool, TNodePtr const&)
PUBLIC 11246 0 TNode::SetVirtualProxyNode(TNodePtr const&)
PUBLIC 11334 0 TNode::GetNetworkNode(unsigned long)
PUBLIC 113c2 0 TNode::GetNetworkNearbyBrowser()
PUBLIC 1169e 0 TNode::GetNetworkIcon(__NWNode*, OpaqueIconRef**)
PUBLIC 116cc 0 TChildrenList::GetVirtualAliasRecord() const
PUBLIC 1173a 0 NodeIs
PUBLIC 117e0 0 LockSFLGetFirstItem(OpaqueSFLSnapshotRef*)
PUBLIC 1182a 0 TNode::NodeIs(unsigned long long&) const
PUBLIC 12024 0 TNode::CreateVirtualAliasRecord(OpaqueSFLItemRef*, TNodePtr&, VirtualAliasRecord**, bool)
PUBLIC 12b86 0 LockSFLItemCopyDisplayName(OpaqueSFLItemRef*)
PUBLIC 12bd0 0 LockSFLItemGetISImageRef(OpaqueSFLItemRef*)
PUBLIC 12c1a 0 LockSFLItemIsSpecial(OpaqueSFLItemRef*, unsigned long*)
PUBLIC 12c70 0 LockSFLItemGetAliasData(OpaqueSFLItemRef*, unsigned long*)
PUBLIC 12cc0 0 THFSPlusRef::IsSavedSearch(HFSUniStr255 const&, unsigned long)
PUBLIC 12d5a 0 TUString::TUString(HFSUniStr255 const&)
PUBLIC 12d84 0 TUString::EndsWith(TUString const&) const
PUBLIC 12db4 0 THFSPlusRef::GetDisplayName() const
PUBLIC 12e22 0 THFSPlusRef::DisplayNameState()
PUBLIC 12e38 0 TNode::GetSpecialNode(unsigned long, OpaqueNodeRequest* const&, unsigned long)
PUBLIC 12e70 0 TNode::GetWhichSpecialNode(unsigned long)
PUBLIC 1308a 0 TNode::SetSpecialNode(unsigned long, TNodePtr&)
PUBLIC 13200 0 TNode::SetSpecialNodeFromOStype(unsigned long)
PUBLIC 1325e 0 TNode::FindUserFolder(unsigned long, bool, TNodePtr&)
PUBLIC 132a8 0 TNode::GetNodeFromFSRef(FSRef const&, TNodePtr&, unsigned long)
PUBLIC 1345a 0 TPathName::TPathName()
PUBLIC 13464 0 TPathName::GetPathNameFromFSRef(FSRef const&, short&)
PUBLIC 135a4 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::operator=(std::deque<HFSUniStr255, std::allocator<HFSUniStr255> > const&)
PUBLIC 138c6 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>::difference_type std::operator-<HFSUniStr255, HFSUniStr255&, HFSUniStr255*, HFSUniStr255&, HFSUniStr255*>(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> const&, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> const&)
PUBLIC 138f2 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::copy<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 1396a 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__copy_normal<false, false>::copy_n<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 139ee 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__copy_aux<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 13a72 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__copy<false, std::random_access_iterator_tag>::copy<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 13b2e 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>::difference_type std::operator-<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*, HFSUniStr255 const&, HFSUniStr255 const*>(std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*> const&, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*> const&)
PUBLIC 13b5a 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::erase(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 13f0e 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::clear()
PUBLIC 13fec 0 TPathName::GetParent(THFSPlusRef&, bool&, bool&)
PUBLIC 140a0 0 THFSPlusRef::GetVRefNum() const
PUBLIC 140ac 0 THFSPlusRef::GetParentFileSystemID() const
PUBLIC 140b8 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::push_front(HFSUniStr255 const&)
PUBLIC 1410c 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_push_front_aux(HFSUniStr255 const&)
PUBLIC 1419c 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_reserve_map_at_front(unsigned long)
PUBLIC 141ca 0 TMountPointList::VolumeIsNotAutoMounted(short const&, bool&)
PUBLIC 1423a 0 TNode::GetNodeFromPathName(TPathName const&, TNodePtr&) const
PUBLIC 1436c 0 NodeNewChangeNotifier
PUBLIC 1443c 0 NodeRegisterChangeNotification
PUBLIC 144e6 0 TNode::RegisterChangeNotification(TCountedPtr<TClientChangeNotifier> const&, unsigned long)
PUBLIC 1453a 0 TNode::AliasIsContainer() const
PUBLIC 1462c 0 THFSPlusRef::AliasIsContainer(bool&) const
PUBLIC 1468c 0 TNode::IsPopulated() const
PUBLIC 146c8 0 TNode::IsPopulating() const
PUBLIC 14704 0 TNodeTask::SetRequest(TNodePtr const&, TCountedPtr<TNotifier> const&, unsigned long)
PUBLIC 147fe 0 THFSPlusCatalog::RequestPropertyTask(TCountedPtr<TNodeTask> const&)
PUBLIC 14878 0 TPropertyTask::PropertyTaskProc(void*)
PUBLIC 149ec 0 TPropertyTask::RequestPropertyTask(TCountedPtr<TNodeTask> const&)
PUBLIC 14a3e 0 NodeDisposeNotifier
PUBLIC 14a86 0 TPropertyTask::HandlePropertyRequest(TCountedPtr<TNodeTask> const&)
PUBLIC 14e68 0 TPropertyTask::HandleInternalRegisterForNotification(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 14f1e 0 TNodeTask::GetClientChangeNotifier() const
PUBLIC 14f4c 0 TNode::FindRegistration(TCountedPtr<TClientChangeNotifier> const&, bool)
PUBLIC 1506c 0 TNode::DoExternalRegistration(TCountedPtr<TNotifier> const&)
PUBLIC 1537a 0 TNode::IsNetworkNode(unsigned long) const
PUBLIC 153c8 0 TNode::PopulateChildren(OpaqueNodeRequest* const&) const
PUBLIC 154d4 0 TNode::LessThan(THFSPlusRef const&) const
PUBLIC 1560e 0 TNode::Equal(TNodePtr const&) const
PUBLIC 15630 0 TNode::Equal(THFSPlusRef const&) const
PUBLIC 157ca 0 TNode::GetCanonicalName(HFSUniStr255&) const
PUBLIC 15818 0 SlashesToColons(HFSUniStr255 const&, HFSUniStr255&)
PUBLIC 1585a 0 TNode::SetSpecialGlobalNodeForType(unsigned long, TNodePtr const&, long)
PUBLIC 159ba 0 THFSPlusRef::ReadIconRefForProxy(OpaqueIconRef*&, bool) const
PUBLIC 15ad2 0 THFSPlusRef::GetFSCatalogInfo(unsigned long&, FSCatalogInfo&) const
PUBLIC 15b20 0 THFSPlusRef::GetFSCatalogInfoFrom(unsigned long&, FSCatalogInfo&) const
PUBLIC 15ec0 0 FSPermissions::SetOwnerID(unsigned long)
PUBLIC 15ece 0 FSPermissions::SetUserGroupID(unsigned long)
PUBLIC 15edc 0 FSPermissions::SetUserAccess(unsigned char)
PUBLIC 15eea 0 FSPermissions::SetMode(unsigned short)
PUBLIC 15efa 0 LockGetIconRefFromFileInfo(FSRef const&, unsigned long, unsigned short const*, unsigned long, FSCatalogInfo const*, unsigned long, OpaqueIconRef**, short*)
PUBLIC 15f74 0 THFSPlusRef::IsApplication() const
PUBLIC 15f88 0 TSFLRecord::TSFLRecord(VirtualAliasRecord*, TNodePtr const&, OpaqueSFLItemRef*)
PUBLIC 15fbc 0 std::vector<TSFLRecord*, std::allocator<TSFLRecord*> >::push_back(TSFLRecord* const&)
PUBLIC 15ffe 0 std::vector<TSFLRecord*, std::allocator<TSFLRecord*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<TSFLRecord**, std::vector<TSFLRecord*, std::allocator<TSFLRecord*> > >, TSFLRecord* const&)
PUBLIC 16166 0 std::vector<TSFLRecord*, std::allocator<TSFLRecord*> >::size() const
PUBLIC 16216 0 void std::_Destroy<__gnu_cxx::__normal_iterator<TSFLRecord**, std::vector<TSFLRecord*, std::allocator<TSFLRecord*> > >, std::allocator<TSFLRecord*> >(__gnu_cxx::__normal_iterator<TSFLRecord**, std::vector<TSFLRecord*, std::allocator<TSFLRecord*> > >, __gnu_cxx::__normal_iterator<TSFLRecord**, std::vector<TSFLRecord*, std::allocator<TSFLRecord*> > >, std::allocator<TSFLRecord*>)
PUBLIC 16240 0 bool __gnu_cxx::operator!=<TSFLRecord**, std::vector<TSFLRecord*, std::allocator<TSFLRecord*> > >(__gnu_cxx::__normal_iterator<TSFLRecord**, std::vector<TSFLRecord*, std::allocator<TSFLRecord*> > > const&, __gnu_cxx::__normal_iterator<TSFLRecord**, std::vector<TSFLRecord*, std::allocator<TSFLRecord*> > > const&)
PUBLIC 16256 0 LockSFLGetNextItem(OpaqueSFLItemRef*)
PUBLIC 162a0 0 TNode::UnmarkChildren() const
PUBLIC 16322 0 TSFLSynchronizer::Next()
PUBLIC 1635e 0 TSFLRecord::GetSFLItemRef() const
PUBLIC 1636a 0 LockSFLItemGetID(OpaqueSFLItemRef*)
PUBLIC 163b4 0 TSFLRecord::GetResolvedNode() const
PUBLIC 163da 0 TNode::FindVirtualProxyIn(unsigned long, TNodePtr&) const
PUBLIC 164ce 0 TSFLRecord::RetrieveAliasRecord()
PUBLIC 164de 0 TNode::SetVirtualProxyNode(VirtualAliasRecord const&)
PUBLIC 1651e 0 THFSPlusRef::SetVirtualProxyNode(VirtualAliasRecord const&)
PUBLIC 166e6 0 EqualHFSUniStr255(unsigned long, unsigned short const*, unsigned long, unsigned short const*)
PUBLIC 16744 0 TNode::SetAliasTarget(TNodePtr const&, VirtualAliasRecord*, unsigned long)
PUBLIC 167fa 0 TNode::GetAliasTarget() const
PUBLIC 16850 0 TChildrenList::GetAliasTarget() const
PUBLIC 16884 0 TChildrenList::SetAliasTarget(TNodePtr const&, VirtualAliasRecord*, unsigned long)
PUBLIC 16924 0 TChildrenList::SetSFLItemID(unsigned long)
PUBLIC 16998 0 LockSFLItemGetFlags(OpaqueSFLItemRef*)
PUBLIC 169e2 0 std::vector<TNode*, std::allocator<TNode*> >::push_back(TNode* const&)
PUBLIC 16a24 0 TChildrenList::erase(__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >, __gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >)
PUBLIC 16a4e 0 std::vector<TNode*, std::allocator<TNode*> >::rbegin()
PUBLIC 16a60 0 std::vector<TNode*, std::allocator<TNode*> >::rend()
PUBLIC 16a72 0 bool std::operator==<__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > > >(std::reverse_iterator<__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > > > const&, std::reverse_iterator<__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > > > const&)
PUBLIC 16aa0 0 std::reverse_iterator<__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > > >::operator*() const
PUBLIC 16ad0 0 TNode** std::__copy_backward<true, std::random_access_iterator_tag>::copy_b<TNode*>(TNode* const*, TNode* const*, TNode**)
PUBLIC 16b00 0 TNode::HandleSyncCompleted(bool)
PUBLIC 16b4e 0 std::vector<TNode*, std::allocator<TNode*> >::~vector()
PUBLIC 16b84 0 std::_Vector_base<TNode*, std::allocator<TNode*> >::~_Vector_base()
PUBLIC 16b9c 0 TSFLSynchronizer::~TSFLSynchronizer()
PUBLIC 16ba6 0 LockSFLReleaseSnapshot(OpaqueSFLSnapshotRef*)
PUBLIC 16bf0 0 TSFLRecord::~TSFLRecord()
PUBLIC 16c28 0 std::vector<TSFLRecord*, std::allocator<TSFLRecord*> >::~vector()
PUBLIC 16c5e 0 std::_Vector_base<TSFLRecord*, std::allocator<TSFLRecord*> >::~_Vector_base()
PUBLIC 16c76 0 TNode::SendNotification(unsigned long, TNodePtr const&, void*)
PUBLIC 16d94 0 TNode::StSynchronize::~StSynchronize()
PUBLIC 16d9e 0 TNode::GetFavoritesFileList(bool&)
PUBLIC 16e9c 0 NodeIsQueryHit
PUBLIC 16ece 0 NodeIs(OpaqueNodeRef*, bool (TNode::*)() const)
PUBLIC 16f52 0 TNode::IsNodeQueryHit() const
PUBLIC 16f66 0 NodeCreateNewRequest
PUBLIC 16fc8 0 TNodeRequest::TNodeRequest(TClientChangeNotifier const*)
PUBLIC 16fd2 0 TNodeRequest::GetNextRequestID()
PUBLIC 17034 0 TNodeRequest::AddPtrReference()
PUBLIC 17048 0 NodeNewIterator
PUBLIC 17088 0 NodeNewSortedIterator(OpaqueNodeRef*, short (*)(unsigned long, unsigned short const*, unsigned long, unsigned short const*), short (*)(long long, long long), unsigned long, OpaqueNodeIterator**, OpaqueNodeRequest*, unsigned long)
PUBLIC 1712e 0 TNode::NewNodeIterator(TNodeIterator*&, short (*)(unsigned long, unsigned short const*, unsigned long, unsigned short const*), short (*)(long long, long long), unsigned long, OpaqueNodeRequest* const&, unsigned long) const
PUBLIC 1733e 0 TNodeTask::TNodeTask(TCountedPtr<TNotifier> const&)
PUBLIC 17348 0 TNodeRequest::SetTask(TCountedPtr<TNodeTask> const&)
PUBLIC 173ea 0 TNode::RequestPopulate(TCountedPtr<TNodeTask> const&) const
PUBLIC 17488 0 TNodeOpenSyncTask::TNodeOpenSyncTask(TNodePtr const&, TCountedPtr<TNodeTask> const&)
PUBLIC 17492 0 TNodeOpenSyncTask::OpenSyncTaskProc(void*)
PUBLIC 17556 0 TNodeRequest::RemovePtrReference()
PUBLIC 1758c 0 TNodeIterator::TNodeIterator(TNodePtr const&, short (*)(unsigned long, unsigned short const*, unsigned long, unsigned short const*), short (*)(long long, long long), unsigned long, bool)
PUBLIC 175b8 0 std::allocator<std::pair<TNodePtr, TPropertyStore> >::allocator()
PUBLIC 175c2 0 std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::vector(std::allocator<std::pair<TNodePtr, TPropertyStore> > const&)
PUBLIC 175cc 0 std::_Vector_base<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::_Vector_base(std::allocator<std::pair<TNodePtr, TPropertyStore> > const&)
PUBLIC 175d6 0 std::_Vector_base<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::_Vector_impl::_Vector_impl(std::allocator<std::pair<TNodePtr, TPropertyStore> > const&)
PUBLIC 1760a 0 std::allocator<std::pair<TNodePtr, TPropertyStore> >::allocator(std::allocator<std::pair<TNodePtr, TPropertyStore> > const&)
PUBLIC 17610 0 std::allocator<std::pair<TNodePtr, TPropertyStore> >::~allocator()
PUBLIC 17616 0 TNode::IsVirtual() const
PUBLIC 1762a 0 TNode::IsTrash() const
PUBLIC 1763c 0 TNodeIterator::GetUnsortedChildrenForNode(TNodePtr const&, short (*)(unsigned long, unsigned short const*, unsigned long, unsigned short const*), short (*)(long long, long long), unsigned long, bool)
PUBLIC 1794e 0 TNode::HandlePopulate(bool) const
PUBLIC 1799a 0 TNode::IsVisible() const
PUBLIC 17a0a 0 THFSPlusRef::IsVisible() const
PUBLIC 17a24 0 std::pair<TNodePtr, TPropertyStore>::pair(TNodePtr const&, TPropertyStore const&)
PUBLIC 17a5e 0 std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::push_back(std::pair<TNodePtr, TPropertyStore> const&)
PUBLIC 17aa2 0 std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::_M_insert_aux(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, std::pair<TNodePtr, TPropertyStore> const&)
PUBLIC 17c52 0 std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::size() const
PUBLIC 17cae 0 bool __gnu_cxx::operator!=<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > > const&, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > > const&)
PUBLIC 17ce0 0 std::pair<TNodePtr, TPropertyStore>::pair(std::pair<TNodePtr, TPropertyStore> const&)
PUBLIC 17d18 0 void std::_Destroy<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, std::allocator<std::pair<TNodePtr, TPropertyStore> > >(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, std::allocator<std::pair<TNodePtr, TPropertyStore> >)
PUBLIC 17d4c 0 TNodeThread::~TNodeThread()
PUBLIC 17d6a 0 std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::begin()
PUBLIC 17d74 0 NodeDisposeRequest
PUBLIC 17dbc 0 TNodeRequest::~TNodeRequest()
PUBLIC 17df0 0 TNotifier::~TNotifier()
PUBLIC 17e2a 0 NodeIteratorFullyPopulated
PUBLIC 17e3c 0 NodeIteratorFirst
PUBLIC 17ebc 0 TNodeIterator::First()
PUBLIC 17ef8 0 TNodeIterator::Next(long long*, UniString**)
PUBLIC 17fcc 0 NodeIteratorNext
PUBLIC 18070 0 TNodeIterator::Next()
PUBLIC 180a6 0 DisposeNodeIterator
PUBLIC 180b0 0 NodeDisposeIterator
PUBLIC 18100 0 TNodeIterator::~TNodeIterator()
PUBLIC 1810a 0 std::_Vector_base<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::~_Vector_base()
PUBLIC 18122 0 GetBootNode
PUBLIC 18158 0 GetHomeNode
PUBLIC 1818e 0 TNode::SetHomeNode()
PUBLIC 1822c 0 TNode::GetCatalog() const
PUBLIC 18242 0 THFSPlusCatalog::Locked() const
PUBLIC 1824e 0 THFSPlusCatalog::GetVRefNum() const
PUBLIC 1825a 0 NodeGetVRefNum
PUBLIC 182ce 0 TNode::Validate(TNode*)
PUBLIC 182ee 0 void std::_Construct<TCountedPtr<TNotifier>, TCountedPtr<TNotifier> >(TCountedPtr<TNotifier>*, TCountedPtr<TNotifier> const&)
PUBLIC 1830e 0 NodeIsiDisk
PUBLIC 18340 0 TNode::IsiDisk() const
PUBLIC 18352 0 TNodeEvent::RedispatchEventToNotifier(unsigned long, OpaqueEventQueue*, TCountedPtr<TNotifier> const&) const
PUBLIC 18430 0 TMountPointList::SynchronizeMountPoints()
PUBLIC 18624 0 TNode::WaitToBeSynced(bool)
PUBLIC 186ae 0 TNodeEvent::CreateNodeEvent(TNodeEvent const*)
PUBLIC 18702 0 TNodeEvent::TNodeEvent(TNodeEvent const&)
PUBLIC 18836 0 TNotifier::Tickle(bool)
PUBLIC 189a0 0 std::allocator<short>::allocator()
PUBLIC 189a6 0 std::vector<short, std::allocator<short> >::vector(std::allocator<short> const&)
PUBLIC 189b0 0 std::_Vector_base<short, std::allocator<short> >::_Vector_base(std::allocator<short> const&)
PUBLIC 189ba 0 std::_Vector_base<short, std::allocator<short> >::_Vector_impl::_Vector_impl(std::allocator<short> const&)
PUBLIC 189ee 0 std::allocator<short>::allocator(std::allocator<short> const&)
PUBLIC 189f4 0 THFSPlusCatalogRefNumIterator::THFSPlusCatalogRefNumIterator()
PUBLIC 18a02 0 THFSPlusCatalogRefNumIterator::GetNextVRefNum(short&)
PUBLIC 18a62 0 std::vector<short, std::allocator<short> >::push_back(short const&)
PUBLIC 18aa6 0 std::vector<short, std::allocator<short> >::_M_insert_aux(__gnu_cxx::__normal_iterator<short*, std::vector<short, std::allocator<short> > >, short const&)
PUBLIC 18c14 0 std::vector<short, std::allocator<short> >::size() const
PUBLIC 18ca0 0 void std::_Destroy<__gnu_cxx::__normal_iterator<short*, std::vector<short, std::allocator<short> > >, std::allocator<short> >(__gnu_cxx::__normal_iterator<short*, std::vector<short, std::allocator<short> > >, __gnu_cxx::__normal_iterator<short*, std::vector<short, std::allocator<short> > >, std::allocator<short>)
PUBLIC 18cca 0 bool __gnu_cxx::operator!=<short*, std::vector<short, std::allocator<short> > >(__gnu_cxx::__normal_iterator<short*, std::vector<short, std::allocator<short> > > const&, __gnu_cxx::__normal_iterator<short*, std::vector<short, std::allocator<short> > > const&)
PUBLIC 18ce0 0 TNode::RemoveUnmarkedMountPoints()
PUBLIC 18d8e 0 TPropertyValue::TPropertyValue(unsigned long, unsigned short*)
PUBLIC 18dac 0 TPropertyValue::TPropertyValue(long)
PUBLIC 18dc0 0 TPropertyValue::TPropertyValue(short)
PUBLIC 18dd6 0 BuddyStorage::Initialize()
PUBLIC 18ec4 0 TPropertyStream::Initialize()
PUBLIC 18eca 0 BuddyStorage::AllocAddress(unsigned char)
PUBLIC 18f12 0 BuddyStorage::newAddress(unsigned char)
PUBLIC 18fd8 0 BuddyStorage::Allocate()
PUBLIC 19052 0 BuddyStorage::PopFreeID()
PUBLIC 190a2 0 BuddyStorage::newInfo()
PUBLIC 191c8 0 BuddyStorage::Commit()
PUBLIC 193dc 0 BuddyStorage::TOCSize()
PUBLIC 19426 0 BuddyStorage::FreeAddressesSize()
PUBLIC 195a6 0 IADeletePointerArrayOnUnwind::IADeletePointerArrayOnUnwind(IAObject**, unsigned long)
PUBLIC 195ba 0 IADeletePointerArrayOnUnwind::~IADeletePointerArrayOnUnwind()
PUBLIC 195c4 0 BuddyStorage::GetWriteAddressInternal(unsigned long, unsigned long)
PUBLIC 197de 0 BuddyStorage::FreeAddress(unsigned long, unsigned char)
PUBLIC 198ce 0 BuddyStorage::FreenewFreeAddress()
PUBLIC 19932 0 IAStoreStream::WriteUInt32(unsigned long)
PUBLIC 199de 0 IAStoreStream::WritePastEndOfBuffer(unsigned char)
PUBLIC 19a3e 0 BuddyStorage::BlockInfoWrite(IAStoreStream*)
PUBLIC 19a8e 0 BuddyStorage::TOCWrite(IAStoreStream*)
PUBLIC 19b86 0 BuddyStorage::FreeAddressesWrite(IAStoreStream*)
PUBLIC 19bf8 0 TPropertyStream::Flush()
PUBLIC 19c02 0 TPropertyStream::Write(unsigned long, unsigned char const*, unsigned long)
PUBLIC 19cfc 0 TPropertyStream::WriteData(unsigned char const*, long)
PUBLIC 19d80 0 IAStorage::AllocateNamedBlock(char const*)
PUBLIC 19e08 0 BuddyStorage::TOC_Set(char const*, unsigned long)
PUBLIC 19e88 0 BTree::Initialize(IAStorage*, unsigned long, bool)
PUBLIC 19f48 0 BTree::newPage(bool)
PUBLIC 19fc8 0 BTree::Flush()
PUBLIC 1a086 0 Page::Write(IAStorage*, IAStoreStream*)
PUBLIC 1a1c0 0 IAOutputBlock::IAOutputBlock(IAStorage*, unsigned long, unsigned long, IAStoreStream*)
PUBLIC 1a1ca 0 BuddyStorage::GetWriteAddress(unsigned long, unsigned long)
PUBLIC 1a23c 0 IAOutputBlock::~IAOutputBlock()
PUBLIC 1a24e 0 BTHeader::Store(IAOutputBlock*) const
PUBLIC 1a2b6 0 std::vector<short, std::allocator<short> >::~vector()
PUBLIC 1a2ec 0 std::_Vector_base<short, std::allocator<short> >::~_Vector_base()
PUBLIC 1a304 0 TNode::ResetIconRef() const
PUBLIC 1a36e 0 TNode::LowLevelIsLockFile() const
PUBLIC 1a3a4 0 TNotifier::SetTimerToHandleTickle(TCountedPtr<TNotifier> const&, double)
PUBLIC 1a4b0 0 NotifierRetainCallBack(void const*)
PUBLIC 1a4d4 0 TClientChangeNotifier::HandleEvents(void*)
PUBLIC 1a4ec 0 TNodeEvent::HandleInternalEvent(OpaqueEventQueue*)
PUBLIC 1a57e 0 NodeEventGetNextEvent
PUBLIC 1a69c 0 TNodeSyncTask::HandlePropertyChanged(TCountedPtr<TNodeEvent> const&, TNodePtr const&, bool)
PUBLIC 1aa6e 0 TNode::SetIconForProxyFromAlias()
PUBLIC 1aafa 0 TChildrenList::GetSFLItemID() const
PUBLIC 1ab18 0 THFSPlusRef::InternalGetDisplayName() const
PUBLIC 1ab8c 0 THFSPlusRef::GetInfoFetched(FSCatalogInfo&) const
PUBLIC 1abb8 0 TNode::UpdateVirtualProxy(OpaqueSFLItemRef*, TNodePtr&, unsigned long, bool, bool)
PUBLIC 1afb8 0 VirtualAliasRecord::~VirtualAliasRecord()
PUBLIC 1afc2 0 NodeMountNotificationHook(VolumeNoticeBlk*)
PUBLIC 1b18e 0 TNodeSyncTask::HandleInternalVolumeAdded(TCountedPtr<TNodeEvent> const&, TNodePtr const&)
PUBLIC 1b1fa 0 TNode::HandleSync(bool, bool, bool, bool)
PUBLIC 1b686 0 THFSPlusRef::GetContentModificationDate() const
PUBLIC 1b694 0 TNode::TNode(TNode*, THFSPlusRef const&, unsigned long)
PUBLIC 1b69e 0 THFSPlusRef::Synchronize(unsigned long const&, HFSUniStr255*)
PUBLIC 1b7b0 0 TNode::ReconcileSelf(TNodePtr const&)
PUBLIC 1b978 0 TNode::GetPropertyRecord(unsigned long)
PUBLIC 1b9ce 0 TNode::TPropertyRecordsArray::TPropertyRecordsArray()
PUBLIC 1cad8 0 TNode::ReconcileType(TNodePtr const&)
PUBLIC 1cb70 0 THFSPlusRef::IsSymLink() const
PUBLIC 1cb8e 0 TNode::GetProperty(unsigned long, TPropertyReference&) const
PUBLIC 1cc24 0 TNode::GetPropertyRecord(unsigned long const&, THFSPlusPropertyRecord&) const
PUBLIC 1cc8e 0 TNode::GetType(TPropertyReference&) const
PUBLIC 1cd26 0 THFSPlusRef::GetType() const
PUBLIC 1cd32 0 TPropertyReference::SetValue(unsigned long const&)
PUBLIC 1cd54 0 TNode::TypeDataFetched() const
PUBLIC 1cd84 0 TNode::SetProperty(unsigned long, TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 1cf1c 0 TNode::SetType(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 1cff4 0 TNode::ReconcileCreator(TNodePtr const&)
PUBLIC 1d08c 0 TNode::GetCreator(TPropertyReference&) const
PUBLIC 1d0f0 0 THFSPlusRef::GetCreator() const
PUBLIC 1d0fc 0 TNode::SetCreator(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 1d1d4 0 TNode::ReconcileIsLocked(TNodePtr const&)
PUBLIC 1d26c 0 TNode::GetIsLocked(TPropertyReference&) const
PUBLIC 1d298 0 THFSPlusRef::IsLocked() const
PUBLIC 1d2aa 0 TPropertyReference::SetValue(bool)
PUBLIC 1d2ca 0 TNode::SetIsLocked(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 1d3b8 0 TNode::ReconcileIsStationery(TNodePtr const&)
PUBLIC 1d450 0 TNode::GetIsStationery(TPropertyReference&) const
PUBLIC 1d4be 0 TNode::CatalogDataFetched() const
PUBLIC 1d4e8 0 TNode::SetIsStationery(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 1d5b0 0 THFSPlusRef::IsStationery() const
PUBLIC 1d5d2 0 TNode::ReconcileIsVisible(TNodePtr const&)
PUBLIC 1d66a 0 TNode::GetIsVisible(TPropertyReference&) const
PUBLIC 1d692 0 TNode::SetIsVisible(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 1d744 0 TNode::ReconcileCreationDate(TNodePtr const&)
PUBLIC 1d7c6 0 TNode::GetCreationDate(TPropertyReference&) const
PUBLIC 1d816 0 THFSPlusRef::GetCreateDate() const
PUBLIC 1d824 0 TPropertyReference::SetValue(UTCDateTime const&)
PUBLIC 1d84e 0 TNode::SetCreationDate(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 1d8d6 0 TNode::ReconcileModificationDate(TNodePtr const&)
PUBLIC 1d9b8 0 TNode::GetModificationDate(TPropertyReference&) const
PUBLIC 1da4c 0 TNode::SetModificationDate(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 1dbfc 0 TNode::ReconcileIsExtensionHidden(TNodePtr const&)
PUBLIC 1dc94 0 TNode::GetIsExtensionHidden(TPropertyReference&) const
PUBLIC 1dcde 0 THFSPlusRef::IsExtensionHidden() const
PUBLIC 1dcf2 0 TNode::SetIsExtensionHidden(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 1ddb0 0 TNode::ReconcileHasCustomIcon(TNodePtr const&)
PUBLIC 1de48 0 TNode::GetHasCustomIcon(TPropertyReference&) const
PUBLIC 1de92 0 THFSPlusRef::GetHasCustomIcon() const
PUBLIC 1deb4 0 TNode::SetHasCustomIcon(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 1df7c 0 TNode::ReconcileLabel(TNodePtr const&)
PUBLIC 1e014 0 TNode::GetLabel(TPropertyReference&) const
PUBLIC 1e05c 0 THFSPlusRef::GetLabel() const
PUBLIC 1e07c 0 TPropertyReference::SetValue(short)
PUBLIC 1e09c 0 TNode::SetLabel(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 1e170 0 TNode::ReconcileIsPackage(TNodePtr const&)
PUBLIC 1e25c 0 TNode::GetIsPackage(TPropertyReference&) const
PUBLIC 1e288 0 TNode::SetIsPackage(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 1e350 0 TNode::ReconcileLogicalSize(TNodePtr const&)
PUBLIC 1e412 0 TNode::ReconcilePhysicalSize(TNodePtr const&)
PUBLIC 1e4c6 0 TNode::ReconcilePermissions(TNodePtr const&)
PUBLIC 1e706 0 THFSPlusRef::GetUserAccess() const
PUBLIC 1e77c 0 THFSPlusRef::GetUnixPermissions() const
PUBLIC 1e788 0 THFSPlusRef::GetOwnerID() const
PUBLIC 1e794 0 THFSPlusRef::GetUserGroupID() const
PUBLIC 1e7a0 0 TNode::ReconcileChildren(bool, bool)
PUBLIC 1e84e 0 TNode::NeedsChildReconcile() const
PUBLIC 1e896 0 TNode::GetPermissions(unsigned long&) const
PUBLIC 1f034 0 TNode::UserCanBrowse() const
PUBLIC 1f090 0 THFSPlusRef::UserCanRead() const
PUBLIC 1f0a4 0 THFSPlusRef::UserCanSearch() const
PUBLIC 1f0b6 0 TNode::ModifyPermissionsIfBusy(unsigned long&) const
PUBLIC 1f0f6 0 TNode::SynchronizeChildren(bool)
PUBLIC 1f1e6 0 THFSPlusRef::SetExtendedUserAccess()
PUBLIC 1f2f2 0 THFSPlusSynchronizer::THFSPlusSynchronizer(THFSPlusRef const&)
PUBLIC 1f2fc 0 THFSPlusRef::THFSPlusRef(THFSPlusRef const&)
PUBLIC 1f306 0 std::allocator<THFSPlusRef>::allocator()
PUBLIC 1f30c 0 std::vector<THFSPlusRef, std::allocator<THFSPlusRef> >::vector(std::allocator<THFSPlusRef> const&)
PUBLIC 1f316 0 std::_Vector_base<THFSPlusRef, std::allocator<THFSPlusRef> >::_Vector_base(std::allocator<THFSPlusRef> const&)
PUBLIC 1f320 0 std::_Vector_base<THFSPlusRef, std::allocator<THFSPlusRef> >::_Vector_impl::_Vector_impl(std::allocator<THFSPlusRef> const&)
PUBLIC 1f354 0 std::allocator<THFSPlusRef>::allocator(std::allocator<THFSPlusRef> const&)
PUBLIC 1f35a 0 THFSPlusIterator::THFSPlusIterator(FSRef const&, unsigned long, unsigned long)
PUBLIC 1f3c4 0 THFSPlusRef::Expand(unsigned long)
PUBLIC 1f3e2 0 THFSPlusIterator::Next(THFSPlusRef&)
PUBLIC 1f454 0 THFSPlusIterator::First(THFSPlusRef&)
PUBLIC 1f48c 0 LockGetCatalogInfoBulk(OpaqueFSIterator*, unsigned long, unsigned long*, unsigned char*, unsigned long, FSCatalogInfo*, FSRef*, FSSpec*, HFSUniStr255*)
PUBLIC 1f510 0 IsSymLink(unsigned long, unsigned long)
PUBLIC 1f580 0 std::vector<THFSPlusRef, std::allocator<THFSPlusRef> >::push_back(THFSPlusRef const&)
PUBLIC 1f5c8 0 std::vector<THFSPlusRef, std::allocator<THFSPlusRef> >::_M_insert_aux(__gnu_cxx::__normal_iterator<THFSPlusRef*, std::vector<THFSPlusRef, std::allocator<THFSPlusRef> > >, THFSPlusRef const&)
PUBLIC 1f79e 0 std::vector<THFSPlusRef, std::allocator<THFSPlusRef> >::size() const
PUBLIC 1f84a 0 bool __gnu_cxx::operator!=<THFSPlusRef*, std::vector<THFSPlusRef, std::allocator<THFSPlusRef> > >(__gnu_cxx::__normal_iterator<THFSPlusRef*, std::vector<THFSPlusRef, std::allocator<THFSPlusRef> > > const&, __gnu_cxx::__normal_iterator<THFSPlusRef*, std::vector<THFSPlusRef, std::allocator<THFSPlusRef> > > const&)
PUBLIC 1f87c 0 void std::_Destroy<__gnu_cxx::__normal_iterator<THFSPlusRef*, std::vector<THFSPlusRef, std::allocator<THFSPlusRef> > >, std::allocator<THFSPlusRef> >(__gnu_cxx::__normal_iterator<THFSPlusRef*, std::vector<THFSPlusRef, std::allocator<THFSPlusRef> > >, __gnu_cxx::__normal_iterator<THFSPlusRef*, std::vector<THFSPlusRef, std::allocator<THFSPlusRef> > >, std::allocator<THFSPlusRef>)
PUBLIC 1f8b4 0 void std::_Construct<THFSPlusRef, THFSPlusRef>(THFSPlusRef*, THFSPlusRef const&)
PUBLIC 1f8c6 0 THFSPlusIterator::~THFSPlusIterator()
PUBLIC 1f8d0 0 THFSPlusSynchronizer::Next(THFSPlusRef&)
PUBLIC 1f938 0 std::vector<THFSPlusRef, std::allocator<THFSPlusRef> >::operator[](unsigned long)
PUBLIC 1f94a 0 TChildrenList::ReconcileChild(THFSPlusRef const&, bool)
PUBLIC 1f996 0 TChildrenList::InsertOrUpdate(__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >&, THFSPlusRef const&, bool)
PUBLIC 1fbb2 0 TNode::RemoveUnmarkedChildren()
PUBLIC 1fc3c 0 TNode::RemoveIfUnmarked()
PUBLIC 1fc70 0 THFSPlusSynchronizer::~THFSPlusSynchronizer()
PUBLIC 1fc7a 0 std::vector<THFSPlusRef, std::allocator<THFSPlusRef> >::~vector()
PUBLIC 1fcc2 0 std::_Vector_base<THFSPlusRef, std::allocator<THFSPlusRef> >::~_Vector_base()
PUBLIC 1fcdc 0 TChildrenList::SetLastSyncTime(double)
PUBLIC 1fd2c 0 TChildrenList::SetLastSyncDuration(double)
PUBLIC 1fd7a 0 THFSPlusRef::SetNewNameFromSync(HFSUniStr255 const&)
PUBLIC 1fe14 0 TNode::ReconcilePropertyStore()
PUBLIC 20042 0 THFSPlusCatalog::GetCachedExtendedPropertyStore(unsigned long) const
PUBLIC 2010c 0 TNode::~TNode()
PUBLIC 20116 0 THFSPlusRef::SetIsVisible(bool, bool)
PUBLIC 202ac 0 LockGetVolumeParent(short, FSRef*, unsigned char*)
PUBLIC 20308 0 THFSPlusCatalog::ShouldWriteNetworkPropertyStores()
PUBLIC 203aa 0 THFSPlusRef::GetUserID()
PUBLIC 203de 0 TNotifier::HandleDeferredTickle(__CFRunLoopTimer*, void*)
PUBLIC 20490 0 NotifierReleaseCallBack(void const*)
PUBLIC 204d4 0 NodeFindFolder
PUBLIC 205b8 0 void std::_Construct<std::pair<TNodePtr, TPropertyStore>, std::pair<TNodePtr, TPropertyStore> >(std::pair<TNodePtr, TPropertyStore>*, std::pair<TNodePtr, TPropertyStore> const&)
PUBLIC 205ca 0 NodeIsVolume
PUBLIC 205fc 0 TNode::IsVolume() const
PUBLIC 20616 0 VolumeIsLocal
PUBLIC 20648 0 TNode::IsLocalVolume() const
PUBLIC 20668 0 VolumeIsEjectable
PUBLIC 2069a 0 TNode::IsEjectable() const
PUBLIC 2086c 0 TNode::FSNotificationsSupported()
PUBLIC 208b4 0 GetNodeParent
PUBLIC 208be 0 NodeCopyParentNode
PUBLIC 2099c 0 THFSPlusRef::HasClippingExtension(HFSUniStr255 const&)
PUBLIC 20bd2 0 THFSPlusRef::InitializeClippingExtensions()
PUBLIC 20cf8 0 NewHFSUniStr255(char*)
PUBLIC 20d9a 0 THFSPlusRef::HasLocationExtension(HFSUniStr255 const&)
PUBLIC 210d8 0 NodeIsQuery
PUBLIC 2110a 0 TNode::IsNodeQuery() const
PUBLIC 2111e 0 TNode::GetLogicalSize(TPropertyReference&) const
PUBLIC 21140 0 TNode::GetSize(TPropertyReference&, bool) const
PUBLIC 212aa 0 THFSPlusRef::GetSizeData() const
PUBLIC 212ea 0 THFSPlusRef::GetLogicalSize() const
PUBLIC 212f8 0 TPropertyReference::SetValue(long long)
PUBLIC 21320 0 TNode::GetPhysicalSize(TPropertyReference&) const
PUBLIC 21342 0 THFSPlusRef::GetPhysicalSize() const
PUBLIC 21350 0 TNode::SetPhysicalSize(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 213ca 0 NodeIsSavedQuery
PUBLIC 213fc 0 TNode::IsNodeQuerySavedSearch() const
PUBLIC 21410 0 NodeValidate
PUBLIC 21466 0 TNode::Validate() const
PUBLIC 21486 0 TNode::IsUnconnectedAuthSymLink() const
PUBLIC 214be 0 NodeIsContainer
PUBLIC 2151c 0 NodeIsContainer(TNode*)
PUBLIC 2157e 0 NodeIsPackage
PUBLIC 215b0 0 TNode::IsPackage() const
PUBLIC 215ca 0 GetNodePropertyAsOSType
PUBLIC 21632 0 GetNodeProperty(OpaqueNodeRef*, unsigned long, TPropertyReference&, OpaqueNodeRequest*)
PUBLIC 216c4 0 TNode::GetProperty(unsigned long, TPropertyReference&, OpaqueNodeRequest* const&) const
PUBLIC 217d4 0 NodeIteratorSize
PUBLIC 217ee 0 _GetNodePropertyAsStringNew
PUBLIC 21872 0 TNode::GetName(TPropertyReference&) const
PUBLIC 218c0 0 TPropertyReference::SetValue(HFSUniStr255 const&)
PUBLIC 2193e 0 NodeGetPropertyAsUTCDateTime
PUBLIC 2197c 0 GetNodePropertyAsInt16
PUBLIC 219e4 0 TNode::GetDisplayName(TPropertyReference&) const
PUBLIC 21a14 0 TPropertyReference::SetValue(unsigned long, unsigned short const*)
PUBLIC 21a8c 0 GetNodePropertyAsIconRef
PUBLIC 21af4 0 TNode::GetIconRef(TPropertyReference&) const
PUBLIC 21bca 0 TNode::ReadIconRef(OpaqueIconRef*&) const
PUBLIC 21c52 0 THFSPlusRef::ReadIconRef(OpaqueIconRef*&, bool) const
PUBLIC 21df2 0 THFSPlusRef::GetMetaData(unsigned long const&) const
PUBLIC 21e58 0 TPropertyReference::SetValue(OpaqueIconRef*)
PUBLIC 21e88 0 NodeSync
PUBLIC 21ee2 0 TNode::RequestSynchronize()
PUBLIC 21efe 0 TNodeSyncTask::RequestSync(TNodePtr const&)
PUBLIC 21f7c 0 TNodeSyncTask::HandleInternalSync(TCountedPtr<TNodeEvent> const&, TNodePtr const&)
PUBLIC 2207e 0 TNode::DispatchSyncRequest(double, bool)
PUBLIC 220da 0 TNode::SetTimerToDispatchSyncRequest(TNode*, double)
PUBLIC 221d6 0 RetainNode(void const*)
PUBLIC 221f0 0 GetVolumeNode
PUBLIC 221fa 0 NodeCopyVolume
PUBLIC 22290 0 TNode::GetCatalogRootNode() const
PUBLIC 222da 0 TNode::GetSavedSearchesNode()
PUBLIC 2246a 0 TChildrenList::SetIsSavedSearches()
PUBLIC 224de 0 TNode::GetSavedSearchesFileList(bool&)
PUBLIC 225dc 0 TNode::LogNotification(unsigned long, TNodePtr const&, unsigned long)
PUBLIC 225e2 0 TNodeEvent::Notify(TCountedPtr<TNotifier> const&)
PUBLIC 22648 0 TNode::GetNetworkSidebarBrowser()
PUBLIC 2291a 0 TChildrenList::GetNWBrowser() const
PUBLIC 22938 0 TNode::GetNWNodeMap(__NWBrowser*)
PUBLIC 22a36 0 std::allocator<std::pair<__NWNode* const, TNodePtr> >::allocator()
PUBLIC 22a3c 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> > >::allocator<std::pair<__NWNode* const, TNodePtr> >(std::allocator<std::pair<__NWNode* const, TNodePtr> > const&)
PUBLIC 22a42 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*>::allocator<std::pair<__NWNode* const, TNodePtr> >(std::allocator<std::pair<__NWNode* const, TNodePtr> > const&)
PUBLIC 22a48 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*>::allocator(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> const&)
PUBLIC 22a4e 0 unsigned long const* std::lower_bound<unsigned long const*, unsigned long>(unsigned long const*, unsigned long const*, unsigned long const&)
PUBLIC 22ab6 0 std::iterator_traits<unsigned long const*>::difference_type std::distance<unsigned long const*>(unsigned long const*, unsigned long const*)
PUBLIC 22ac4 0 void std::advance<unsigned long const*, int>(unsigned long const*&, int)
PUBLIC 22bb4 0 void std::__fill<true>::fill<__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> > >, __gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*>(__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> > >, __gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> > >, __gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >* const&)
PUBLIC 22bea 0 bool __gnu_cxx::operator!=<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> > >(__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> > > const&, __gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> > > const&)
PUBLIC 22cb2 0 std::pair<__NWNode* const, TNodePtr>::pair(__NWNode* const&, TNodePtr const&)
PUBLIC 22cf6 0 std::allocator<std::pair<__NWNode* const, TNodePtr> >::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> > >(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> > > const&)
PUBLIC 22d18 0 std::pair<__NWNode* const, TNodePtr>::pair(std::pair<__NWNode* const, TNodePtr> const&)
PUBLIC 22d38 0 GetNodePropertyAsBoolean
PUBLIC 22daa 0 TNode::GetInvisibleInSidebar(TPropertyReference&) const
PUBLIC 22dc8 0 NodeCopyFromAlias
PUBLIC 22e90 0 TNode::ResolveAlias(TNodePtr&, unsigned char, unsigned char, OpaqueNodeRequest* const&, unsigned long) const
PUBLIC 231da 0 TNode::IsBurnFolder() const
PUBLIC 23346 0 TChildrenList::AliasTargetResolved()
PUBLIC 23362 0 TNode::FollowAlias(TNodePtr&, unsigned long) const
PUBLIC 23988 0 TNode::ResolveClientAlias(unsigned char, unsigned char) const
PUBLIC 241a4 0 TChildrenList::SetAliasTarget(TNodePtr const&, bool)
PUBLIC 24208 0 TNode::IsInTrash() const
PUBLIC 242ce 0 THFSPlusRef::IsBurnFolder() const
PUBLIC 24338 0 THFSPlusRef::IsBurnFolder(TUString const&)
PUBLIC 243a2 0 TNode::DispatchSyncRequestNow(__CFRunLoopTimer*, void*)
PUBLIC 243f2 0 ReleaseNode(void const*)
PUBLIC 243fc 0 NetworkSidebarCallback(__NWBrowser*, __NWNode*, __CFString const*, unsigned long, NWBrowserError, void*)
PUBLIC 244ae 0 TNode::SetIfNetworkSidebarBrowser(__NWBrowser*, __NWNode*) const
PUBLIC 24574 0 TNode::PopulateVirtualContainerFromNetworkBrowser(__NWBrowser*)
PUBLIC 2512a 0 TNetworkBrowserSynchronizer::TNetworkBrowserSynchronizer(TNodePtr const&, __NWBrowser*)
PUBLIC 25134 0 TChildrenList::GetNWNode() const
PUBLIC 25152 0 TNode::FindFolder(unsigned long, bool, TNodePtr&) const
PUBLIC 2519c 0 THFSPlusRef::UserCanWrite() const
PUBLIC 251b0 0 SetNodePropertyAsBoolean
PUBLIC 251ee 0 SetNodeProperty(OpaqueNodeRef*, unsigned long, TPropertyReference const&, OpaqueNodeRequest*)
PUBLIC 2527c 0 TNode::SetProperty(unsigned long, TPropertyReference const&, OpaqueNodeRequest* const&) const
PUBLIC 252f4 0 LockSetCatalogInfo(FSRef const&, unsigned long, FSCatalogInfo const*)
PUBLIC 2534e 0 THFSPlusRef::Store()
PUBLIC 25478 0 ConvertUniCharsToDecomposed(unsigned long, unsigned short*, unsigned long, unsigned long*, unsigned short*)
PUBLIC 25580 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_reallocate_map(unsigned long, bool)
PUBLIC 256fc 0 NodeEventBlockUntilNextEventNew
PUBLIC 2571a 0 NodeEventGetParent
PUBLIC 25724 0 NodeEventCopyRegistrationParent
PUBLIC 25802 0 NodeEventGetChild
PUBLIC 2580c 0 NodeEventCopyNode
PUBLIC 25888 0 NodeEventGetKind
PUBLIC 258d8 0 NodeEventGetClientRef
PUBLIC 258e2 0 NodeEventGetContextInfo
PUBLIC 259be 0 NodeEventGetProperty
PUBLIC 25a3c 0 NodeEventRelease
PUBLIC 25a90 0 GetNodePropertyAsDataNew
PUBLIC 25b14 0 TNode::GetExtendedPropertyStore() const
PUBLIC 25b8a 0 TNode::IsHome() const
PUBLIC 25cfe 0 TNode::GetPropertyStoreKeyName() const
PUBLIC 25d72 0 THFSPlusPropertyStore::GetProperty(HFSUniStr255 const&, unsigned long, TPropertyReference&) const
PUBLIC 25e38 0 TPropertyInfo::TPropertyInfo(HFSUniStr255 const&, unsigned long)
PUBLIC 25e42 0 TPropertyInfo::Find(TCountedPtr<TPropertyInfoList> const&, TPropertyInfo const&)
PUBLIC 25ea6 0 TPropertyInfo::LessThan(TPropertyInfo const&) const
PUBLIC 25f14 0 TPropertyInfo::Equal(TPropertyInfo const&) const
PUBLIC 25f74 0 TPropertyInfo::GetProperty(TPropertyReference&) const
PUBLIC 25f8c 0 TPropertyReference::SetValue(TPropertyValue const&)
PUBLIC 261be 0 TPropertyInfo::~TPropertyInfo()
PUBLIC 26226 0 GetURLAsNode
PUBLIC 2624a 0 NodeCopyFromURL
PUBLIC 263b4 0 TNode::GetNodeFromURL(__CFURL const* const&, TNodePtr&)
PUBLIC 2651a 0 TNode::HandleListeners()
PUBLIC 26588 0 std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::empty() const
PUBLIC 265b4 0 bool __gnu_cxx::operator==<TCountedPtr<TNotifier> const*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >(__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier> const*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > > const&, __gnu_cxx::__normal_iterator<TCountedPtr<TNotifier> const*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > > const&)
PUBLIC 265ca 0 TNode::FollowAlias(THFSPlusRef&, unsigned char, unsigned char) const
PUBLIC 26624 0 THFSPlusRef::FollowAlias(THFSPlusRef&, unsigned char, unsigned char, unsigned char&) const
PUBLIC 2673e 0 LockResolveAliasFile(FSRef*, unsigned char, unsigned char*, unsigned long)
PUBLIC 267c6 0 GetNodePropertyAsInt32
PUBLIC 2682e 0 GetVirtualNode
PUBLIC 26882 0 TMetaData::~TMetaData()
PUBLIC 268e4 0 THFSPlusRef::SetContentModificationDate(UTCDateTime, bool)
PUBLIC 26916 0 THFSPlusRef::InvalidateVersionData() const
PUBLIC 2693e 0 THFSPlusRef::FetchTypeInfo() const
PUBLIC 26f70 0 TNetworkBrowserSynchronizer::Next()
PUBLIC 26fe0 0 TNode::FindVirtualProxyIn(__NWNode*, bool, TNodePtr&) const
PUBLIC 270e4 0 VirtualAliasRecord::VirtualAliasRecord(__NWNode*, __NWBrowser*, HFSUniStr255 const&, OpaqueIconRef*, bool)
PUBLIC 270ee 0 TNode::SetAliasTarget(TNodePtr const&, VirtualAliasRecord*, __NWNode*, __NWBrowser*)
PUBLIC 271a8 0 TChildrenList::SetAliasTarget(TNodePtr const&, VirtualAliasRecord*, __NWNode*, __NWBrowser*)
PUBLIC 27252 0 TChildrenList::SetNWNode(__NWNode*, __NWBrowser*)
PUBLIC 27338 0 TNetworkBrowserSynchronizer::~TNetworkBrowserSynchronizer()
PUBLIC 27342 0 THFSPlusRef::SetUserAccess(unsigned long)
PUBLIC 273d0 0 TNode::UpdateVirtualProxy(__NWNode*, bool)
PUBLIC 27a20 0 NodeFindChildNew
PUBLIC 27a9c 0 NodeCopyChildFromName
PUBLIC 27d36 0 TNode::FindChild(TUString const&, bool)
PUBLIC 280f4 0 GetNodeAsFSRef
PUBLIC 28116 0 NodeAsFSRef
PUBLIC 281a2 0 TNode::GetFSRef(FSRef&)
PUBLIC 281f0 0 NodeFindVirtualChild
PUBLIC 282f0 0 TNode::FindVirtualProxyIn(TNodePtr const&, TNodePtr&, unsigned long&) const
PUBLIC 284da 0 NodeGetPermissions
PUBLIC 2853c 0 NodeIsClientNodeRef
PUBLIC 28552 0 NodeIsVirtual
PUBLIC 28584 0 NodeCopyAliasHandle
PUBLIC 28600 0 TNode::CopyAliasHandle(AliasRecord**&, OpaqueNodeRequest* const&)
PUBLIC 28750 0 TNodeTask::SetRequest(TNodePtr const&, unsigned long)
PUBLIC 28860 0 TPropertyTask::HandleFetchAliasRecord(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 28982 0 LockFSNewAlias(FSRef const&, AliasRecord***)
PUBLIC 289de 0 TNodeEvent::CreateNodeEvent(unsigned long, TNodePtr const&, AliasRecord**, long, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 28a42 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, AliasRecord**, long, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 28a4c 0 TNodeEvent::CreateNodeEvent(unsigned long, TNodePtr const&, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 28aa2 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 28aac 0 NodeRequestGetTask
PUBLIC 28b12 0 NodeCopyTask
PUBLIC 28b5e 0 NodeDisposeTask
PUBLIC 28ba6 0 NodeCopyAsPathName
PUBLIC 28c8c 0 GetNodePropertyAsInt64
PUBLIC 28cf4 0 TNode::GetFreeSpace(TPropertyReference&) const
PUBLIC 28d68 0 TNode::FreeSpaceValid() const
PUBLIC 28d9a 0 THFSPlusCatalog::GetFreeSpace() const
PUBLIC 28dce 0 NodeHasCustomIcon
PUBLIC 28e00 0 TNode::HasCustomIcon() const
PUBLIC 28e1a 0 TNode::GetTypeIdentifier(TPropertyReference&) const
PUBLIC 28fc8 0 TNode::KindStringDataFetched() const
PUBLIC 29014 0 THFSPlusRef::GetTypeIdentifierString(TUString&, bool) const
PUBLIC 29066 0 TMetaData::GetTypeIdentifierString(TUString&, bool) const
PUBLIC 290c2 0 TMetaData::FetchTypeData(bool) const
PUBLIC 2928c 0 LockCopyKindStringForRefInfo(LSExtendedFSRefInfo const*, unsigned long, __CFString const**, bool)
PUBLIC 29304 0 LockLSCopyItemAttributeForRefInfoWithOptions(LSExtendedFSRefInfo const*, unsigned long, __CFString const*, unsigned long, void const**)
PUBLIC 2936a 0 NodeEventGetStatus
PUBLIC 293c0 0 NodeEventGetAliasHandle
PUBLIC 29422 0 NodeUnregisterChangeNotification
PUBLIC 294c8 0 TNode::UnregisterChangeNotification(TCountedPtr<TClientChangeNotifier> const&, unsigned long, bool)
PUBLIC 29786 0 std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > >::erase(__gnu_cxx::__normal_iterator<TCountedPtr<TNotifier>*, std::vector<TCountedPtr<TNotifier>, std::allocator<TCountedPtr<TNotifier> > > >)
PUBLIC 29812 0 TCountedPtr<TNotifier>* std::__copy<false, std::random_access_iterator_tag>::copy<TCountedPtr<TNotifier>*, TCountedPtr<TNotifier>*>(TCountedPtr<TNotifier>*, TCountedPtr<TNotifier>*, TCountedPtr<TNotifier>*)
PUBLIC 2984c 0 THFSPlusCatalog::SetIsTrashEmpty()
PUBLIC 29958 0 NodeIsQueryHitsContainer
PUBLIC 2998a 0 TNode::IsNodeQueryHitsContainer() const
PUBLIC 2999e 0 TNode::RequestPropertyTask(unsigned long, TCountedPtr<TNodeTask> const&) const
PUBLIC 29a96 0 NodeIsAlias
PUBLIC 29ac8 0 TNode::IsAlias() const
PUBLIC 29ae2 0 NodeGetOriginal
PUBLIC 29b7e 0 GetNodePropertyAsStringNew
PUBLIC 29bd0 0 NodeRegisterChildChangedNotification
PUBLIC 29c90 0 NewNodeIterator
PUBLIC 29cf8 0 NodeFollowAlias
PUBLIC 29d96 0 NodeIsVisible
PUBLIC 29dc8 0 TNode::GetiDiskNode(bool, long&)
PUBLIC 29f76 0 TiDiskMonitor::TiDiskMonitor()
PUBLIC 29f80 0 TiDiskMonitor::~TiDiskMonitor()
PUBLIC 29f8a 0 NodeRegisterPropertyChangedNotification
PUBLIC 2a040 0 TMountPointList::RequestFullSynchronizationOfAllVolumes()
PUBLIC 2a0dc 0 NodeUnRegisterChildChangedNotification
PUBLIC 2a142 0 NewDummyChangeNotifier(NodeClientContext)
PUBLIC 2a1d8 0 TPropertyTask::HandleFetchProperty(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 2a24c 0 TNode::UpdatePropertySynchronous(unsigned long)
PUBLIC 2a68c 0 IsMountPointLink(unsigned long, unsigned long)
PUBLIC 2a6f6 0 TNode::GetGenericIconRef(OpaqueIconRef*&) const
PUBLIC 2a86c 0 TNode::UpdateIconRef()
PUBLIC 2a936 0 NodeUnRegisterPropertyChangedNotification
PUBLIC 2a99c 0 TNode::GetKindWithPlatform(TPropertyReference&) const
PUBLIC 2aaca 0 THFSPlusRef::GetKindWithPlatformString(TUString&, bool) const
PUBLIC 2ab0c 0 TMetaData::GetKindWithPlatformString(TUString&, bool) const
PUBLIC 2ab68 0 GetNodePropertyAsUTCDateTime
PUBLIC 2abd0 0 TNode::RecursivelyRemoveAllChildren(bool) const
PUBLIC 2acba 0 TChildrenList::rbegin()
PUBLIC 2ace8 0 TChildrenList::rend()
PUBLIC 2ad16 0 TNode::DeleteTypeSpecificData(bool)
PUBLIC 2ad66 0 TChildrenList::DeleteChildList()
PUBLIC 2ad9e 0 TChildrenList::~TChildrenList()
PUBLIC 2adaa 0 TAliasRecord::~TAliasRecord()
PUBLIC 2ade0 0 NodeEventDisposeEventQueue
PUBLIC 2adea 0 TNodeEvent::RemoveClientQueue(OpaqueEventQueue*)
PUBLIC 2ae4e 0 TNode::Remove(bool)
PUBLIC 2b110 0 TNode::RemoveAllChildren(bool)
PUBLIC 2b212 0 TNode::RemoveSelf()
PUBLIC 2b316 0 TNode::ResetSizes()
PUBLIC 2b400 0 THFSPlusRef::ResetSizeData() const
PUBLIC 2b446 0 TChildrenList::RemoveChild(TNode*)
PUBLIC 2b56c 0 TNode::UnRegisterForInternalNotifications()
PUBLIC 2b5b4 0 FavoritesCallback
PUBLIC 2b5f6 0 TNode::UserCanAddFolders() const
PUBLIC 2b63e 0 THFSPlusRef::UserCanAddFolder() const
PUBLIC 2b650 0 TNode::UserCanAddFiles() const
PUBLIC 2b698 0 THFSPlusRef::UserCanAddFile() const
PUBLIC 2b6ac 0 VolumeIsReadOnly
PUBLIC 2b6de 0 TNode::VolumeIsReadOnly() const
PUBLIC 2b702 0 CreatePropertyList
PUBLIC 2b714 0 NodeNewPropertyList
PUBLIC 2b742 0 TPropertyMap::TPropertyMap()
PUBLIC 2b76c 0 TPropertyMap::AddPtrReference()
PUBLIC 2b788 0 CopyPropertyList
PUBLIC 2b7c4 0 THashTable<unsigned long, TPropertyValue>::operator=(THashTable<unsigned long, TPropertyValue> const&)
PUBLIC 2b95a 0 DisposePropertyList
PUBLIC 2b96c 0 TPropertyMap::RemovePtrReference()
PUBLIC 2b9a6 0 THashTable<unsigned long, TPropertyValue>::clear()
PUBLIC 2ba00 0 SetListPropertyAsStringNew
PUBLIC 2ba0a 0 NodePropertyListSetAsString
PUBLIC 2ba48 0 NodePropertyListSet(OpaquePropertyListRef*, unsigned long, TPropertyReference const&)
PUBLIC 2baa0 0 TPropertyValue::TPropertyValue(TPropertyReference const&)
PUBLIC 2baaa 0 THashTable<unsigned long, TPropertyValue>::operator[](unsigned long const&)
PUBLIC 2bb8e 0 THashTable<unsigned long, TPropertyValue>::reserve(unsigned long)
PUBLIC 2bf1c 0 THashTable<unsigned long, TPropertyValue>::HashEntry::HashEntry()
PUBLIC 2bf26 0 std::pair<unsigned long, TPropertyValue>::pair()
PUBLIC 2bf3e 0 THashTable<unsigned long, TPropertyValue>::hash_increment(unsigned long const&) const
PUBLIC 2bf6e 0 NodeOperate
PUBLIC 2bfea 0 TNode::Operate(OperationSelector const&, OpaqueOperationRef**, __CFString const*, __CFURL const*)
PUBLIC 2c096 0 TOperation::GetFirstOperationRecordForIterator(OperationIterator*)
PUBLIC 2c0e2 0 TNodeOperationTask::TNodeOperationTask(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 2c0ec 0 TCopyMoveOperation::TCopyMoveOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 2c0f6 0 TOperation::TOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 2c3da 0 std::allocator<std::pair<TNodePtr, TNodePtr> >::allocator()
PUBLIC 2c3e0 0 std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > >::vector(std::allocator<std::pair<TNodePtr, TNodePtr> > const&)
PUBLIC 2c3ea 0 std::_Vector_base<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > >::_Vector_base(std::allocator<std::pair<TNodePtr, TNodePtr> > const&)
PUBLIC 2c3f4 0 std::_Vector_base<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > >::_Vector_impl::_Vector_impl(std::allocator<std::pair<TNodePtr, TNodePtr> > const&)
PUBLIC 2c428 0 std::allocator<std::pair<TNodePtr, TNodePtr> >::allocator(std::allocator<std::pair<TNodePtr, TNodePtr> > const&)
PUBLIC 2c42e 0 std::allocator<unsigned long>::allocator()
PUBLIC 2c434 0 std::vector<unsigned long, std::allocator<unsigned long> >::vector(std::allocator<unsigned long> const&)
PUBLIC 2c43e 0 std::_Vector_base<unsigned long, std::allocator<unsigned long> >::_Vector_base(std::allocator<unsigned long> const&)
PUBLIC 2c448 0 std::_Vector_base<unsigned long, std::allocator<unsigned long> >::_Vector_impl::_Vector_impl(std::allocator<unsigned long> const&)
PUBLIC 2c47c 0 std::allocator<unsigned long>::allocator(std::allocator<unsigned long> const&)
PUBLIC 2c484 0 TNodeOperationTask::GetOperationRefList()
PUBLIC 2c4e0 0 std::allocator<OpaqueOperationRef*>::allocator()
PUBLIC 2c4e6 0 std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> >::vector(std::allocator<OpaqueOperationRef*> const&)
PUBLIC 2c4f0 0 std::_Vector_base<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> >::_Vector_base(std::allocator<OpaqueOperationRef*> const&)
PUBLIC 2c4fa 0 std::_Vector_base<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> >::_Vector_impl::_Vector_impl(std::allocator<OpaqueOperationRef*> const&)
PUBLIC 2c52e 0 std::allocator<OpaqueOperationRef*>::allocator(std::allocator<OpaqueOperationRef*> const&)
PUBLIC 2c534 0 std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> >::push_back(OpaqueOperationRef* const&)
PUBLIC 2c576 0 std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<OpaqueOperationRef**, std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> > >, OpaqueOperationRef* const&)
PUBLIC 2c6ec 0 std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> >::size() const
PUBLIC 2c748 0 void std::_Destroy<__gnu_cxx::__normal_iterator<OpaqueOperationRef**, std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> > >, std::allocator<OpaqueOperationRef*> >(__gnu_cxx::__normal_iterator<OpaqueOperationRef**, std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> > >, __gnu_cxx::__normal_iterator<OpaqueOperationRef**, std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> > >, std::allocator<OpaqueOperationRef*>)
PUBLIC 2c772 0 bool __gnu_cxx::operator!=<OpaqueOperationRef**, std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> > >(__gnu_cxx::__normal_iterator<OpaqueOperationRef**, std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> > > const&, __gnu_cxx::__normal_iterator<OpaqueOperationRef**, std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> > > const&)
PUBLIC 2c78a 0 TNodeOperationTask::OperationTaskProc(void*)
PUBLIC 2c798 0 TNodeOperationTask::OperationTaskProcedure()
PUBLIC 2c7d4 0 TNodeOperationTask::HandleOperation(TOperation*)
PUBLIC 2ca3e 0 TCopyMoveOperation::LogOperationName(OperationRecord*) const
PUBLIC 2ca8a 0 TOperationTimer::TOperationTimer(char const*)
PUBLIC 2ca94 0 TOperation::UpdateStatusStage(unsigned long)
PUBLIC 2cad2 0 TCopyMoveOperation::TransformOperations()
PUBLIC 2ce7a 0 TOperation::ValidateOperations()
PUBLIC 2cf3c 0 THFSPlusCatalog::Flush(bool)
PUBLIC 2d002 0 std::allocator<THFSPlusPropertyStore*>::allocator()
PUBLIC 2d008 0 std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> >::vector(std::allocator<THFSPlusPropertyStore*> const&)
PUBLIC 2d012 0 std::_Vector_base<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> >::_Vector_base(std::allocator<THFSPlusPropertyStore*> const&)
PUBLIC 2d01c 0 std::_Vector_base<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> >::_Vector_impl::_Vector_impl(std::allocator<THFSPlusPropertyStore*> const&)
PUBLIC 2d050 0 std::allocator<THFSPlusPropertyStore*>::allocator(std::allocator<THFSPlusPropertyStore*> const&)
PUBLIC 2d056 0 THFSPlusCatalog::CopyDirtyStores(bool, TNode::StPopulating*, std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> >*)
PUBLIC 2d1f4 0 THFSPlusRef::GetPermissions() const
PUBLIC 2d20e 0 THashTable<long long, THFSPlusPropertyStore*>::begin()
PUBLIC 2d23e 0 THFSPlusPropertyStore::SetClean()
PUBLIC 2d24a 0 std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> >::empty() const
PUBLIC 2d276 0 bool __gnu_cxx::operator==<THFSPlusPropertyStore* const*, std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> > >(__gnu_cxx::__normal_iterator<THFSPlusPropertyStore* const*, std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> > > const&, __gnu_cxx::__normal_iterator<THFSPlusPropertyStore* const*, std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> > > const&)
PUBLIC 2d28c 0 std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> >::~vector()
PUBLIC 2d2c2 0 std::_Vector_base<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> >::~_Vector_base()
PUBLIC 2d2da 0 TCopyMoveOperation::CheckDestination(OperationRecord*)
PUBLIC 2d30c 0 TOperation::GetNextOperationRecordForIterator(OperationIterator*)
PUBLIC 2d356 0 TNode::DetermineAutoRoutingDestination(TNode*, TNodePtr&) const
PUBLIC 2d40e 0 TOperation::IncrementOperationCounts()
PUBLIC 2d472 0 TCopyMoveOperation::AcquireDestinationLocks()
PUBLIC 2d5c6 0 TOperation::CanAuthenticate(OperationRecord*)
PUBLIC 2d650 0 TOperation::AcquireChildWriteLock(TNodePtr const&)
PUBLIC 2d84a 0 TNode::ChildWriter() const
PUBLIC 2d864 0 TNode::Writers() const
PUBLIC 2d878 0 TNode::ChildWriters() const
PUBLIC 2d88c 0 TNode::Writer() const
PUBLIC 2d8a6 0 TNode::Readers() const
PUBLIC 2d8ba 0 TNode::AddChildWriter(TOperation*)
PUBLIC 2d8e4 0 TNode::AcquireOperationLock(TOperation*)
PUBLIC 2d988 0 std::pair<TNodePtr, TNodePtr>::pair(TNodePtr const&, TNodePtr const&)
PUBLIC 2d9be 0 std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > >::push_back(std::pair<TNodePtr, TNodePtr> const&)
PUBLIC 2da02 0 std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > >::_M_insert_aux(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TNodePtr>*, std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > > >, std::pair<TNodePtr, TNodePtr> const&)
PUBLIC 2dba6 0 std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > >::size() const
PUBLIC 2dc02 0 bool __gnu_cxx::operator!=<std::pair<TNodePtr, TNodePtr>*, std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > > >(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TNodePtr>*, std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > > > const&, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TNodePtr>*, std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > > > const&)
PUBLIC 2dc34 0 std::pair<TNodePtr, TNodePtr>::pair(std::pair<TNodePtr, TNodePtr> const&)
PUBLIC 2dc6a 0 void std::_Destroy<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TNodePtr>*, std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > > >, std::allocator<std::pair<TNodePtr, TNodePtr> > >(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TNodePtr>*, std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TNodePtr>*, std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > > >, std::allocator<std::pair<TNodePtr, TNodePtr> >)
PUBLIC 2dc9e 0 TNode::GetOperation() const
PUBLIC 2dcb2 0 TNode::IncrementReadersBelow(TOperation*)
PUBLIC 2dcd0 0 std::pair<TNodePtr, TNodePtr>::~pair()
PUBLIC 2dcf2 0 TOperation::AcquireSourceLocks()
PUBLIC 2ddea 0 TCopyMoveOperation::AcquireSourceLock(OperationRecord*)
PUBLIC 2df50 0 TOperation::AcquireReadLock(TNodePtr const&)
PUBLIC 2e21a 0 TNode::ReadersBelow() const
PUBLIC 2e22e 0 TNode::IncrementReaders(TOperation*)
PUBLIC 2e24a 0 void std::_Construct<std::pair<TNodePtr, TNodePtr>, std::pair<TNodePtr, TNodePtr> >(std::pair<TNodePtr, TNodePtr>*, std::pair<TNodePtr, TNodePtr> const&)
PUBLIC 2e25c 0 TOperation::ResolveConflicts()
PUBLIC 2e334 0 TCopyMoveOperation::ResolveConflict(OperationRecord*)
PUBLIC 2ebda 0 TCopyMoveOperation::CheckPermissions(OperationRecord*)
PUBLIC 2ed40 0 TCopyMoveOperation::TransformDestinationLocks()
PUBLIC 2edf2 0 TOperation::ReleaseLock(TNodePtr const&, TNodePtr const&)
PUBLIC 2ef00 0 TNode::RemoveChildWriter(TOperation*)
PUBLIC 2ef28 0 TNode::DecrementReadersBelow()
PUBLIC 2ef66 0 TCopyMoveOperation::NeedsSizeCheck() const
PUBLIC 2ef70 0 TOperation::CheckSize()
PUBLIC 2f098 0 TOperation::CheckSize(OperationRecord&)
PUBLIC 2f5ac 0 TOperation::OperationSize(TNodePtr const&, TNodePtr const&, unsigned long, bool)
PUBLIC 2f802 0 TOperation::LaunchChild(bool)
PUBLIC 2fd68 0 TOperation::PathForTool(__CFString const*, char*)
PUBLIC 2fe0c 0 IsLoggingEnabled(unsigned long long)
PUBLIC 2fe4a 0 _ChildHandshake
PUBLIC 300d0 0 THFSPlusRef::UserCanDelete() const
PUBLIC 300e4 0 THFSPlusRef::UserCanDeleteChild() const
PUBLIC 300f8 0 TNode::IsSticky() const
PUBLIC 30146 0 NodeGetNameSyntaxHint
PUBLIC 301ba 0 TNode::GetNameSyntaxHint(NodeNameSyntaxHint&) const
PUBLIC 301fa 0 THFSPlusCatalog::GetNameSyntaxHint(NodeNameSyntaxHint&) const
PUBLIC 30284 0 NodeIsApplication
PUBLIC 302b6 0 TNode::IsApplication() const
PUBLIC 302d0 0 SetNodePropertyAsStringNew
PUBLIC 30316 0 TNode::SetName(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 30434 0 TPropertyReference::operator==(HFSUniStr255 const&) const
PUBLIC 304e6 0 TNode::SetName(HFSUniStr255 const&)
PUBLIC 30798 0 THFSPlusRef::SetName(unsigned long, unsigned short const*, bool)
PUBLIC 30a0e 0 LockRenameUnicode(FSRef const&, unsigned long, unsigned short const*, unsigned long, FSRef*)
PUBLIC 30a76 0 THFSPlusPropertyStore::RenameProperties(HFSUniStr255 const&, HFSUniStr255 const&, bool&, TPropertyInfo*&)
PUBLIC 30af0 0 THFSPlusExtendedPropertyIterator::THFSPlusExtendedPropertyIterator(HFSUniStr255 const&, THFSPlusPropertyStore*)
PUBLIC 30afa 0 TPropertyInfo::operator=(TPropertyInfo const&)
PUBLIC 30b4a 0 TCountedPtr<TPropertyInfoList>::operator=(TCountedPtr<TPropertyInfoList> const&)
PUBLIC 30b88 0 THFSPlusPropertyStore::CopyProperties(THFSPlusExtendedPropertyIterator&, HFSUniStr255 const&, bool, bool&, TPropertyInfo*&)
PUBLIC 30cc2 0 THFSPlusExtendedPropertyIterator::First(bool)
PUBLIC 30cee 0 THFSPlusExtendedPropertyIterator::Next(bool)
PUBLIC 30dd8 0 bool __gnu_cxx::operator!=<TPropertyInfo**, TPropertyInfo* const*, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >(__gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > > const&, __gnu_cxx::__normal_iterator<TPropertyInfo* const*, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > > const&)
PUBLIC 30dee 0 TPropertyInfo::SetName(HFSUniStr255 const&)
PUBLIC 30e1c 0 THFSPlusPropertyStore::SetProperty(TPropertyInfo*)
PUBLIC 30f10 0 bool __gnu_cxx::operator==<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >(__gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > > const&, __gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > > const&)
PUBLIC 30f26 0 std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> >::insert(__gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >, TPropertyInfo* const&)
PUBLIC 30fba 0 std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> >::~vector()
PUBLIC 30ff0 0 std::_Vector_base<TPropertyInfo*, std::allocator<TPropertyInfo*> >::~_Vector_base()
PUBLIC 31008 0 THFSPlusExtendedPropertyIterator::RemoveProperties()
PUBLIC 3110e 0 std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> >::erase(__gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >)
PUBLIC 3116a 0 THFSPlusExtendedPropertyIterator::~THFSPlusExtendedPropertyIterator()
PUBLIC 31174 0 TNode::InvalidateTypeData() const
PUBLIC 311a6 0 THFSPlusRef::InvalidateTypeInfo() const
PUBLIC 311c0 0 TNodeSyncTask::HandleInternalFNNotify(TCountedPtr<TNodeEvent> const&, TNodePtr const&)
PUBLIC 31374 0 TChildrenList::LastNotifyTime() const
PUBLIC 313b2 0 LockFNNotify(FSRef const&, unsigned long, unsigned long)
PUBLIC 3140a 0 TChildrenList::SetLastNotifyTime(double)
PUBLIC 3145a 0 TChildrenList::SetNotifyPending(bool)
PUBLIC 314b2 0 NodeFNNotificationHook(unsigned long, unsigned long, void*, OpaqueFNSubscriptionRef*)
PUBLIC 31524 0 TNode::SetForceSync(bool)
PUBLIC 31586 0 TChildrenList::SetForceSync(bool)
PUBLIC 315de 0 TOperation::GetParentPort(unsigned int*)
PUBLIC 3162c 0 _ChildOperationFolderSize
PUBLIC 31860 0 LocumParentMessageHandler
PUBLIC 318ee 0 LocumParentDefs_server
PUBLIC 3196e 0 _XNotifyOperationDone
PUBLIC 319c2 0 _ParentXNotifyOperationDone
PUBLIC 319da 0 TFSInfo::GetVolumeInfoRecord(VolumeInfoRecord&) const
PUBLIC 31c9e 0 TOperation::ReportConflicts()
PUBLIC 321a0 0 TOperation::GetSuboperation() const
PUBLIC 321a8 0 TNodeEvent::CreateNodeEvent(unsigned long, OperationErrorRecord*, OperationIterator*, OperationMonitor*, TCountedPtr<TNotifier> const&, unsigned long)
PUBLIC 3220c 0 TNodeEvent::TNodeEvent(unsigned long, OperationErrorRecord*, OperationIterator*, OperationMonitor*, TCountedPtr<TNotifier> const&, unsigned long)
PUBLIC 32216 0 TNodeEvent::Notify(TCountedPtr<TNodeEvent> const&, bool, bool)
PUBLIC 3234a 0 NodeEventGetErrorRecord
PUBLIC 323ba 0 NodeEventGetOperationIterator
PUBLIC 3242a 0 NodeGetStatus
PUBLIC 324bc 0 TNodeOperationTask::IsOperationRefValid(OpaqueOperationRef*&)
PUBLIC 3253e 0 ConflictIteratorNext(OpaqueOperationData*)
PUBLIC 32594 0 TConflictIterator::Next() const
PUBLIC 325c6 0 NodeEventPostReply
PUBLIC 325d0 0 GetFileSuffix(HFSUniStr255 const&, HFSUniStr255&)
PUBLIC 3264e 0 TUniqueNamer::TUniqueNamer(long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), HFSUniStr255 const&, NodeNameSyntaxHint const&)
PUBLIC 32658 0 TUniqueNamer::NextUniqueName(HFSUniStr255&)
PUBLIC 326ea 0 TNode::CreateNewChildLockItem(TOperation&, OperationRecord*, HFSUniStr255 const&, TNodePtr, TCountedPtr<TPropertyMap> const&, TNodePtr&)
PUBLIC 32930 0 THFSPlusExtendedPropertyIterator::THFSPlusExtendedPropertyIterator(TNodePtr const&)
PUBLIC 3293a 0 TNode::TNode(TNode*, HFSUniStr255 const&)
PUBLIC 32a72 0 TOperation::IsMigration(OperationRecord*) const
PUBLIC 32ad8 0 TNode::IsBackupRoot() const
PUBLIC 32b94 0 TNode::CreateNewLockDirectory(TOperation&, OperationRecord*, HFSUniStr255 const&, bool, TNode*)
PUBLIC 32f58 0 THFSPlusRef::InitializeIsVisible(bool)
PUBLIC 32f9e 0 THFSPlusRef::InitializeIsExtensionHidden(bool)
PUBLIC 32fd2 0 TNode::IsBackup() const
PUBLIC 33082 0 TNode::CopySourceFileSecurityRefForCopy(bool, bool) const
PUBLIC 330ca 0 THFSPlusRef::CopySourceFileSecurityRefForCopy(bool, bool, bool) const
PUBLIC 33234 0 THFSPlusRef::InitializeFileSecurityRef(__FSFileSecurity*)
PUBLIC 33250 0 THFSPlusRef::IsDropBox() const
PUBLIC 33282 0 THFSPlusRef::InitializeBusyBitSet()
PUBLIC 332a2 0 THFSPlusRef::CreateDirectory(FSRef const&, HFSUniStr255 const&, NodeNameSyntaxHint const&, long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*))
PUBLIC 3334e 0 THFSPlusRef::GetFSDirtyCatalogInfoFrom(FSCatalogInfo&, bool) const
PUBLIC 33512 0 LockCreateDirectoryUnicode(FSRef const&, HFSUniStr255 const&, NodeNameSyntaxHint const&, long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), unsigned long, FSCatalogInfo const*, FSRef*)
PUBLIC 3363e 0 THFSPlusRef::SetCreateDate(UTCDateTime, bool)
PUBLIC 3365c 0 THFSPlusRef::IsBackupRoot() const
PUBLIC 3374e 0 THFSPlusRef::IsBackup() const
PUBLIC 33830 0 TFSInfo::CopyExtendedAttributes(FSRef const&, FSRef const&, bool)
PUBLIC 338b6 0 TNode::CopyProperties(THFSPlusExtendedPropertyIterator&)
PUBLIC 33976 0 THashTable<unsigned long, TPropertyValue>::begin()
PUBLIC 339a6 0 TOperation::AcquireWriteLock(TNodePtr const&)
PUBLIC 33c32 0 TNode::AddWriter(TOperation*)
PUBLIC 33c5c 0 TUniqueNamer::~TUniqueNamer()
PUBLIC 33c62 0 TOperation::ReportStatus(bool)
PUBLIC 33d40 0 TOperationTimer::LogPreflightEnded()
PUBLIC 33e2c 0 TOperation::ProcessSelection()
PUBLIC 33efe 0 std::allocator<OperationRecord*>::allocator()
PUBLIC 33f04 0 std::list<OperationRecord*, std::allocator<OperationRecord*> >::list(std::allocator<OperationRecord*> const&)
PUBLIC 33f0e 0 std::_List_base<OperationRecord*, std::allocator<OperationRecord*> >::_List_base(std::allocator<OperationRecord*> const&)
PUBLIC 33f48 0 std::allocator<std::_List_node<OperationRecord*> >::allocator<OperationRecord*>(std::allocator<OperationRecord*> const&)
PUBLIC 33f4e 0 std::_List_base<OperationRecord*, std::allocator<OperationRecord*> >::_List_impl::_List_impl(std::allocator<std::_List_node<OperationRecord*> > const&)
PUBLIC 33f58 0 std::allocator<std::_List_node<OperationRecord*> >::allocator(std::allocator<std::_List_node<OperationRecord*> > const&)
PUBLIC 33f5e 0 TOperation::ValidateCurrentRecordConflicts()
PUBLIC 3422a 0 TCopyMoveOperation::PerformOperation(OperationRecord*)
PUBLIC 344e0 0 TCopyMoveOperation::NeedsAuthentication(OperationRecord*)
PUBLIC 34514 0 TCopyMoveOperation::PerformCopyOrForceMove(OperationRecord*)
PUBLIC 34ae6 0 TCopyMoveOperation::GetCopyReader() const
PUBLIC 34c54 0 TCopyQueue::TCopyQueue(OperationReporter*)
PUBLIC 34c5e 0 TCopyQueue::Initialize()
PUBLIC 34cba 0 TCopyReader::TCopyReader(TCopyQueue*, bool, bool, bool)
PUBLIC 34cd0 0 TCopyItem::TCopyItem()
PUBLIC 34d4e 0 FSPermissions::FSPermissions()
PUBLIC 34da8 0 std::allocator<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >::allocator()
PUBLIC 34dae 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > > >::allocator<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >(std::allocator<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > > const&)
PUBLIC 34db4 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*>::allocator(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> const&)
PUBLIC 34dba 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*>::~allocator()
PUBLIC 34dc0 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::vector(unsigned long, __gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >* const&, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> const&)
PUBLIC 34f22 0 void std::__fill<true>::fill<__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> > >, __gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*>(__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> > >, __gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> > >, __gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >* const&)
PUBLIC 34f58 0 bool __gnu_cxx::operator!=<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> > >(__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> > > const&, __gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> > > const&)
PUBLIC 34f6e 0 std::allocator<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >::~allocator()
PUBLIC 34f74 0 std::allocator<TReservationRecord*>::allocator()
PUBLIC 34f7a 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::deque(std::allocator<TReservationRecord*> const&)
PUBLIC 34f9c 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::_Deque_base(std::allocator<TReservationRecord*> const&, unsigned long)
PUBLIC 34fe6 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::_Deque_impl::_Deque_impl(std::allocator<TReservationRecord*> const&)
PUBLIC 35050 0 std::allocator<TReservationRecord*>::allocator(std::allocator<TReservationRecord*> const&)
PUBLIC 35056 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_initialize_map(unsigned long)
PUBLIC 3514c 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_allocate_map(unsigned long)
PUBLIC 351ac 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_get_map_allocator() const
PUBLIC 351ee 0 std::allocator<TReservationRecord**>::allocator<TReservationRecord*>(std::allocator<TReservationRecord*> const&)
PUBLIC 351f4 0 std::allocator<TReservationRecord*>::~allocator()
PUBLIC 3521c 0 std::allocator<TReservationRecord**>::~allocator()
PUBLIC 35222 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_create_nodes(TReservationRecord***, TReservationRecord***)
PUBLIC 35288 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_allocate_node()
PUBLIC 352ce 0 std::stack<TReservationRecord*, std::deque<TReservationRecord*, std::allocator<TReservationRecord*> > >::stack(std::deque<TReservationRecord*, std::allocator<TReservationRecord*> > const&)
PUBLIC 352d8 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::deque(std::deque<TReservationRecord*, std::allocator<TReservationRecord*> > const&)
PUBLIC 3541a 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>::difference_type std::operator-<TReservationRecord*, TReservationRecord*&, TReservationRecord**, TReservationRecord*&, TReservationRecord**>(std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> const&, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> const&)
PUBLIC 3544a 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> std::__uninitialized_copy_a<std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>, TReservationRecord*>(std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>, std::allocator<TReservationRecord*>)
PUBLIC 354c2 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> std::uninitialized_copy<std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> >(std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>)
PUBLIC 3553e 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> std::__uninitialized_copy_aux<std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> >(std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>, __true_type)
PUBLIC 355b6 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> std::copy<std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> >(std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>)
PUBLIC 3562e 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> std::__copy_normal<false, false>::copy_n<std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> >(std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>)
PUBLIC 356a6 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> std::__copy_aux<std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> >(std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>)
PUBLIC 3571e 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> std::__copy<false, std::random_access_iterator_tag>::copy<std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**> >(std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>)
PUBLIC 357c0 0 std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*>::difference_type std::operator-<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*, TReservationRecord* const&, TReservationRecord* const*>(std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*> const&, std::_Deque_iterator<TReservationRecord*, TReservationRecord* const&, TReservationRecord* const*> const&)
PUBLIC 357f0 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::~deque()
PUBLIC 3586e 0 void std::_Destroy<std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>, std::allocator<TReservationRecord*> >(std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>, std::_Deque_iterator<TReservationRecord*, TReservationRecord*&, TReservationRecord**>, std::allocator<TReservationRecord*>)
PUBLIC 358a8 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::~_Deque_base()
PUBLIC 35900 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_deallocate_node(TReservationRecord**)
PUBLIC 35910 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_deallocate_map(TReservationRecord***, unsigned long)
PUBLIC 35944 0 std::_Deque_base<TReservationRecord*, std::allocator<TReservationRecord*> >::_Deque_impl::~_Deque_impl()
PUBLIC 3594e 0 TCopyReader::CreateWriter()
PUBLIC 359c2 0 TCopyWriter::WriteTaskProc(void*)
PUBLIC 35a30 0 TCopyWriter::TCopyWriter(TCopyQueue*)
PUBLIC 35c04 0 std::allocator<TCopyItem*>::allocator()
PUBLIC 35c0a 0 std::vector<TCopyItem*, std::allocator<TCopyItem*> >::vector(std::allocator<TCopyItem*> const&)
PUBLIC 35c14 0 std::_Vector_base<TCopyItem*, std::allocator<TCopyItem*> >::_Vector_base(std::allocator<TCopyItem*> const&)
PUBLIC 35c1e 0 std::_Vector_base<TCopyItem*, std::allocator<TCopyItem*> >::_Vector_impl::_Vector_impl(std::allocator<TCopyItem*> const&)
PUBLIC 35c52 0 std::allocator<TCopyItem*>::allocator(std::allocator<TCopyItem*> const&)
PUBLIC 35c58 0 std::allocator<TCopyItem*>::~allocator()
PUBLIC 35cd2 0 std::allocator<std::pair<std::pair<unsigned int, int> const, FSRef> >::allocator()
PUBLIC 35cd8 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> > >::allocator<std::pair<std::pair<unsigned int, int> const, FSRef> >(std::allocator<std::pair<std::pair<unsigned int, int> const, FSRef> > const&)
PUBLIC 35cde 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*>::allocator<std::pair<std::pair<unsigned int, int> const, FSRef> >(std::allocator<std::pair<std::pair<unsigned int, int> const, FSRef> > const&)
PUBLIC 35ce4 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::~_Vector_base()
PUBLIC 35d0a 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*>::allocator(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> const&)
PUBLIC 35d10 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*>::~allocator()
PUBLIC 35dd6 0 bool __gnu_cxx::operator!=<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> > >(__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> > > const&, __gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> > > const&)
PUBLIC 35dec 0 std::allocator<std::pair<std::pair<unsigned int, int> const, FSRef> >::~allocator()
PUBLIC 35df2 0 TCopyWriter::Write()
PUBLIC 360a4 0 TCopyWriter::GetNextItem()
PUBLIC 363be 0 TCopyQueue::Dequeue()
PUBLIC 36412 0 NodeEventGetMonitor
PUBLIC 36482 0 TCopyReader::Read(void*, TFSInfo, TFSInfo)
PUBLIC 36730 0 TCopyReader::Reinitialize(void*, TFSInfo, TFSInfo)
PUBLIC 367aa 0 TCopyQueue::SetNextRootRecord(void*, TFSInfo&, TFSInfo&)
PUBLIC 36a20 0 TFSInfo::operator=(TFSInfo const&)
PUBLIC 36b52 0 TFSInfo::IsBackup() const
PUBLIC 36c24 0 TFSInfo::IsBackupRoot() const
PUBLIC 36d00 0 TCopyQueue::GetCopyBufferSize()
PUBLIC 36ef8 0 TCopyReader::GetNextItem()
PUBLIC 37704 0 TDeepFSIterator::RecordHardlink(__gnu_cxx::hash_map<std::pair<unsigned int, int>, std::pair<unsigned int, int>, TINodeHasher, std::equal_to<std::pair<unsigned int, int> >, std::allocator<std::pair<unsigned int, int> > >*, TFSInfo&)
PUBLIC 377cc 0 TCopyQueue::DestinationIsDropBox() const
PUBLIC 377e8 0 TFSInfo::IsDropBox() const
PUBLIC 3782e 0 TFSInfo::UserCanRead() const
PUBLIC 3784c 0 TCopyQueue::DestinationSupportsInvisibleBit() const
PUBLIC 37860 0 TCopyQueue::GetTargetName(HFSUniStr255&) const
PUBLIC 3788c 0 GetTargetName(unsigned long long, TFSInfo const&, HFSUniStr255&)
PUBLIC 378c4 0 TCopyQueue::UseCopyFile() const
PUBLIC 37904 0 TCopyQueue::GetDestinationVRefNum()
PUBLIC 37914 0 TCopyItem::operator=(TCopyItem const&)
PUBLIC 37c76 0 FSPermissions::operator=(FSPermissions const&)
PUBLIC 37cca 0 TCopyItem::SetSavedSecurityRef(__FSFileSecurity*)
PUBLIC 37d14 0 TCopyItem::~TCopyItem()
PUBLIC 37d1e 0 FSPermissions::~FSPermissions()
PUBLIC 37d28 0 TDeepFSIterator::TDeepFSIterator(TFSInfo const&, unsigned long, bool, bool, __gnu_cxx::hash_map<std::pair<unsigned int, int>, std::pair<unsigned int, int>, TINodeHasher, std::equal_to<std::pair<unsigned int, int> >, std::allocator<std::pair<unsigned int, int> > >*, std::stack<TReservationRecord*, std::deque<TReservationRecord*, std::allocator<TReservationRecord*> > >*, bool)
PUBLIC 37d3e 0 std::allocator<TFSIterator*>::allocator()
PUBLIC 37d44 0 std::vector<TFSIterator*, std::allocator<TFSIterator*> >::vector(std::allocator<TFSIterator*> const&)
PUBLIC 37d4e 0 std::_Vector_base<TFSIterator*, std::allocator<TFSIterator*> >::_Vector_base(std::allocator<TFSIterator*> const&)
PUBLIC 37d58 0 std::_Vector_base<TFSIterator*, std::allocator<TFSIterator*> >::_Vector_impl::_Vector_impl(std::allocator<TFSIterator*> const&)
PUBLIC 37d8c 0 std::allocator<TFSIterator*>::allocator(std::allocator<TFSIterator*> const&)
PUBLIC 37d92 0 std::allocator<TFSIterator*>::~allocator()
PUBLIC 37d9a 0 TDeepFSIterator::Reset()
PUBLIC 37f46 0 TFSIterator::TFSIterator(TFSInfo const&, unsigned long, unsigned long)
PUBLIC 37fa6 0 TFSInfo::IsPackage() const
PUBLIC 37fd2 0 TFSInfo::FetchData()
PUBLIC 38062 0 TDeepFSIterator::ResetReservationStack()
PUBLIC 380ca 0 CancelOperationRequested(unsigned long long)
PUBLIC 380e2 0 TCopyReader::QueueItem()
PUBLIC 38204 0 TCopyItem::TCopyItem(TCopyItem const&)
PUBLIC 38598 0 TCopyQueueItem::TCopyQueueItem(unsigned long, void*, unsigned long, TCopyQueue*)
PUBLIC 385c0 0 TCopyItem::ItemType() const
PUBLIC 38606 0 TDeepFSIterator::Next(TFSInfo&, long&, long&, bool&)
PUBLIC 38686 0 TDeepFSIterator::NextInternal(TFSInfo&, long&, long&, bool&)
PUBLIC 387da 0 TFSIterator::Next(TFSInfo&)
PUBLIC 3884c 0 TFSIterator::First(TFSInfo&)
PUBLIC 38886 0 TDeepFSIterator::PopIterator()
PUBLIC 389d0 0 TFSIterator::~TFSIterator()
PUBLIC 38a26 0 std::vector<TFSIterator*, std::allocator<TFSIterator*> >::empty() const
PUBLIC 38a52 0 bool __gnu_cxx::operator==<TFSIterator* const*, std::vector<TFSIterator*, std::allocator<TFSIterator*> > >(__gnu_cxx::__normal_iterator<TFSIterator* const*, std::vector<TFSIterator*, std::allocator<TFSIterator*> > > const&, __gnu_cxx::__normal_iterator<TFSIterator* const*, std::vector<TFSIterator*, std::allocator<TFSIterator*> > > const&)
PUBLIC 38a68 0 TCopyQueue::WaitOnRecordDone()
PUBLIC 38aa2 0 std::vector<TCopyItem*, std::allocator<TCopyItem*> >::empty() const
PUBLIC 38ace 0 bool __gnu_cxx::operator==<TCopyItem* const*, std::vector<TCopyItem*, std::allocator<TCopyItem*> > >(__gnu_cxx::__normal_iterator<TCopyItem* const*, std::vector<TCopyItem*, std::allocator<TCopyItem*> > > const&, __gnu_cxx::__normal_iterator<TCopyItem* const*, std::vector<TCopyItem*, std::allocator<TCopyItem*> > > const&)
PUBLIC 38ae4 0 TFSInfo::IsApplication() const
PUBLIC 38b06 0 TCopyItem::SetClassicOverride()
PUBLIC 38b48 0 std::vector<TCopyItem*, std::allocator<TCopyItem*> >::push_back(TCopyItem* const&)
PUBLIC 38b8c 0 std::vector<TCopyItem*, std::allocator<TCopyItem*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<TCopyItem**, std::vector<TCopyItem*, std::allocator<TCopyItem*> > >, TCopyItem* const&)
PUBLIC 38d22 0 std::vector<TCopyItem*, std::allocator<TCopyItem*> >::size() const
PUBLIC 38dc4 0 void std::_Destroy<__gnu_cxx::__normal_iterator<TCopyItem**, std::vector<TCopyItem*, std::allocator<TCopyItem*> > >, std::allocator<TCopyItem*> >(__gnu_cxx::__normal_iterator<TCopyItem**, std::vector<TCopyItem*, std::allocator<TCopyItem*> > >, __gnu_cxx::__normal_iterator<TCopyItem**, std::vector<TCopyItem*, std::allocator<TCopyItem*> > >, std::allocator<TCopyItem*>)
PUBLIC 38dee 0 bool __gnu_cxx::operator!=<TCopyItem**, std::vector<TCopyItem*, std::allocator<TCopyItem*> > >(__gnu_cxx::__normal_iterator<TCopyItem**, std::vector<TCopyItem*, std::allocator<TCopyItem*> > > const&, __gnu_cxx::__normal_iterator<TCopyItem**, std::vector<TCopyItem*, std::allocator<TCopyItem*> > > const&)
PUBLIC 38e04 0 TCopyQueueItem::~TCopyQueueItem()
PUBLIC 38e0e 0 TCopyWriter::ReportStatus(bool)
PUBLIC 38ee4 0 TCopyWriter::UpdateTimeRemaining(unsigned long)
PUBLIC 3910c 0 TFSInfo::GetDisplayName() const
PUBLIC 39200 0 TCopyQueue::ReportStatus(OperationStatus const&, HFSUniStr255 const&, FSRef const&, bool)
PUBLIC 39316 0 UpdateOperationStatus(unsigned long long, unsigned long, unsigned short const*, long long, long long, long long, long long, unsigned long, bool)
PUBLIC 394fc 0 TOperation::UpdateStatusCurrentItem(unsigned long, unsigned short const*)
PUBLIC 3954c 0 TCopyWriter::CreateItem()
PUBLIC 39d0a 0 TCopyWriter::UpdateStatusCurrentItem()
PUBLIC 39d3e 0 TCopyItem::IsSymlink() const
PUBLIC 39d54 0 TFSInfo::IsSymlink() const
PUBLIC 39d7c 0 TCopyItem::PrepareFinderInfoForCopy()
PUBLIC 39ed8 0 TFSInfo::PrepareFinderInfoForCopy(bool, bool)
PUBLIC 39f66 0 TFSCatalogInfo::SetLockBit(bool)
PUBLIC 39f7e 0 TFSCatalogInfo::ClearBackupDate()
PUBLIC 39f9a 0 TFSCatalogInfo::SetBusyCreateDate()
PUBLIC 39fc8 0 TCopyWriter::CheckForExistingLockItem()
PUBLIC 3a174 0 TCopyItem::CopyCatalogInfo(FSCatalogInfo const&)
PUBLIC 3a180 0 TFSInfo::CopyCatalogInfo(FSCatalogInfo const&)
PUBLIC 3a194 0 TFSCatalogInfo::CopyInfoForCopy(FSCatalogInfo const&)
PUBLIC 3a1de 0 TCopyItem::SetFSRef(FSRef const&, FSRef const&)
PUBLIC 3a1ea 0 TFSInfo::SetFSRef(FSRef const&, FSRef const&)
PUBLIC 3a22e 0 TCopyItem::SetName(HFSUniStr255 const&)
PUBLIC 3a238 0 TFSInfo::SetName(HFSUniStr255 const&)
PUBLIC 3a26c 0 TCopyWriter::SetWriteItemPermissions()
PUBLIC 3a308 0 FSPermissions::ClearStickyBits()
PUBLIC 3a316 0 TCopyQueue::DestinationSupportsACLS() const
PUBLIC 3a32a 0 TCopyQueue::SourceSupportsACLS() const
PUBLIC 3a33e 0 TCopyItem::SetSavedPermissions(FSPermissions*, bool, bool)
PUBLIC 3a3b8 0 TCopyWriter::DelayIfNeeded()
PUBLIC 3a430 0 std::vector<TCopyItem*, std::allocator<TCopyItem*> >::back()
PUBLIC 3a43e 0 TCopyWriter::SetCatalogInfo()
PUBLIC 3aa44 0 TCopyItem::CopySavedPermissions(FSPermissions*) const
PUBLIC 3aa5e 0 FSPermissions::AddMode(unsigned short)
PUBLIC 3aa6e 0 TCopyItem::CopySavedSecurityRef() const
PUBLIC 3aa96 0 TCopyQueue::DoPostProc(FSRef const&, FSRef const&, unsigned long, FSCatalogInfo const*)
PUBLIC 3aad0 0 FSPermissions::GetFileSec() const
PUBLIC 3aade 0 TCopyItem::GetIconRef() const
PUBLIC 3aaec 0 FlushLock(FSRef const&, OpaqueIconRef* const&)
PUBLIC 3ab84 0 TNode::InvalidateCachedData() const
PUBLIC 3ac00 0 TNode::InvalidatePermissionsData() const
PUBLIC 3ac18 0 TNode::ResetPermissions() const
PUBLIC 3ac4e 0 THFSPlusRef::ResetPermissions() const
PUBLIC 3ac6c 0 TNode::InvalidateSizeData() const
PUBLIC 3ac8a 0 THFSPlusRef::ResetCache()
PUBLIC 3acc2 0 THFSPlusRef::RecalculateExtension()
PUBLIC 3acf2 0 TCopyWriter::DestroyCurrentItem()
PUBLIC 3ae74 0 TFSInfo::GetName() const
PUBLIC 3ae94 0 TCopyQueue::NotifyRecordDone()
PUBLIC 3aec8 0 TDeepFSIterator::~TDeepFSIterator()
PUBLIC 3aed4 0 TDeepFSIterator::DestroyIterators()
PUBLIC 3af80 0 bool __gnu_cxx::operator!=<TFSIterator**, std::vector<TFSIterator*, std::allocator<TFSIterator*> > >(__gnu_cxx::__normal_iterator<TFSIterator**, std::vector<TFSIterator*, std::allocator<TFSIterator*> > > const&, __gnu_cxx::__normal_iterator<TFSIterator**, std::vector<TFSIterator*, std::allocator<TFSIterator*> > > const&)
PUBLIC 3af96 0 std::vector<TFSIterator*, std::allocator<TFSIterator*> >::erase(__gnu_cxx::__normal_iterator<TFSIterator**, std::vector<TFSIterator*, std::allocator<TFSIterator*> > >, __gnu_cxx::__normal_iterator<TFSIterator**, std::vector<TFSIterator*, std::allocator<TFSIterator*> > >)
PUBLIC 3b04c 0 void std::_Destroy<__gnu_cxx::__normal_iterator<TFSIterator**, std::vector<TFSIterator*, std::allocator<TFSIterator*> > >, std::allocator<TFSIterator*> >(__gnu_cxx::__normal_iterator<TFSIterator**, std::vector<TFSIterator*, std::allocator<TFSIterator*> > >, __gnu_cxx::__normal_iterator<TFSIterator**, std::vector<TFSIterator*, std::allocator<TFSIterator*> > >, std::allocator<TFSIterator*>)
PUBLIC 3b088 0 std::vector<TFSIterator*, std::allocator<TFSIterator*> >::~vector()
PUBLIC 3b0c8 0 std::_Vector_base<TFSIterator*, std::allocator<TFSIterator*> >::~_Vector_base()
PUBLIC 3b0ee 0 std::_Vector_base<TFSIterator*, std::allocator<TFSIterator*> >::_Vector_impl::~_Vector_impl()
PUBLIC 3b0f8 0 TCopyReader::ReadCleanup()
PUBLIC 3b12c 0 TOperation::AddExternalNotification(FSRef const&, unsigned long)
PUBLIC 3b198 0 THashTable<TFSRef, int>::find(TFSRef const&)
PUBLIC 3b27e 0 THashTable<TFSRef, int>::operator[](TFSRef const&)
PUBLIC 3b380 0 THashTable<TFSRef, int>::reserve(unsigned long)
PUBLIC 3b710 0 THashTable<TFSRef, int>::HashEntry::HashEntry()
PUBLIC 3b71a 0 std::pair<TFSRef, int>::pair()
PUBLIC 3b730 0 THashTable<TFSRef, int>::hash_increment(TFSRef const&) const
PUBLIC 3b760 0 std::_List_base<OperationRecord*, std::allocator<OperationRecord*> >::~_List_base()
PUBLIC 3b76a 0 std::_List_base<OperationRecord*, std::allocator<OperationRecord*> >::_M_clear()
PUBLIC 3b7aa 0 TOperation::FlushAfterOperation()
PUBLIC 3b804 0 THFSPlusPropertyStore::IsInPackage()
PUBLIC 3b8e0 0 TFSInfo::IsInPackage() const
PUBLIC 3ba20 0 THFSPlusPropertyStore::THFSPlusPropertyStore(THFSPlusPropertyStore const&)
PUBLIC 3ba2a 0 std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> >::push_back(THFSPlusPropertyStore* const&)
PUBLIC 3ba6c 0 std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<THFSPlusPropertyStore**, std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> > >, THFSPlusPropertyStore* const&)
PUBLIC 3bbe2 0 std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> >::size() const
PUBLIC 3bc60 0 void std::_Destroy<__gnu_cxx::__normal_iterator<THFSPlusPropertyStore**, std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> > >, std::allocator<THFSPlusPropertyStore*> >(__gnu_cxx::__normal_iterator<THFSPlusPropertyStore**, std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> > >, __gnu_cxx::__normal_iterator<THFSPlusPropertyStore**, std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> > >, std::allocator<THFSPlusPropertyStore*>)
PUBLIC 3bc8a 0 bool __gnu_cxx::operator!=<THFSPlusPropertyStore**, std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> > >(__gnu_cxx::__normal_iterator<THFSPlusPropertyStore**, std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> > > const&, __gnu_cxx::__normal_iterator<THFSPlusPropertyStore**, std::vector<THFSPlusPropertyStore*, std::allocator<THFSPlusPropertyStore*> > > const&)
PUBLIC 3bca0 0 THFSPlusPropertyStore::FlushChanges()
PUBLIC 3be14 0 TPropertyInfo::FlushChanges(FSRef const*, TCountedPtr<TPropertyInfoList> const&, bool)
PUBLIC 3c2e8 0 SafeOpen(FSRef const&, short&, signed char)
PUBLIC 3c3ae 0 BTree::Put(IAOrderedStorable*)
PUBLIC 3c448 0 TPropertyInfo::StoreSize() const
PUBLIC 3c4fc 0 BTree::PutInternal(Page*, Page*, PageEntry*, IAOrderedStorable*, unsigned long)
PUBLIC 3c648 0 Page::FingerEntry(IAOrderedStorable const*, void**)
PUBLIC 3c670 0 Page::SetFinger(void*, void**)
PUBLIC 3c708 0 BTree::InsertObject(Page*, void**, IAOrderedStorable*)
PUBLIC 3c74c 0 Page::InsertEntryAtFinger(PageEntry*, void**)
PUBLIC 3c79e 0 Leaf::EntryStoreSize(PageEntry*)
PUBLIC 3c7aa 0 BTree::Rebalance(Page*, Page*, PageEntry*, unsigned long)
PUBLIC 3c810 0 BTree::RebalanceRoot()
PUBLIC 3c85e 0 TPropertyInfo::LessThan(IAOrderedStorable const*) const
PUBLIC 3c8cc 0 UInt32Set::Equal(void*, void*)
PUBLIC 3c8e2 0 SkipList::Remove(void*, void*)
PUBLIC 3c964 0 SkipList::RemoveNode(void*, void**)
PUBLIC 3ca0e 0 BuddyStorage::AddAddress(unsigned long, unsigned char, UInt32Set**)
PUBLIC 3ca8c 0 Leaf::EntryStore(PageEntry*, IAOutputBlock*)
PUBLIC 3caa6 0 TPropertyInfo::Store(IAOutputBlock*) const
PUBLIC 3cdb2 0 IAStoreStream::WriteBufferOfUInt16(void const*, unsigned long)
PUBLIC 3cde4 0 IAStoreStream::WriteUInt16(unsigned short)
PUBLIC 3ce4c 0 IAStoreStream::WriteBytes(void const*, unsigned long)
PUBLIC 3ce8e 0 TPropertyStream::SetLength(long)
PUBLIC 3cfac 0 THFSPlusPropertyStore::~THFSPlusPropertyStore()
PUBLIC 3cfb6 0 TPropertyInfoList::~TPropertyInfoList()
PUBLIC 3cfc0 0 TOperation::ReleaseLocks()
PUBLIC 3d21c 0 TCopyMoveOperation::DeleteLockFilesIfNeeded(OperationRecord*)
PUBLIC 3d348 0 TNode::GetChildrenCount() const
PUBLIC 3d3be 0 THFSPlusRef::GetCount() const
PUBLIC 3d3d4 0 TNode::DeleteIfLockFile(bool)
PUBLIC 3d4fa 0 THFSPlusRef::IsBusyDate(UTCDateTime const&)
PUBLIC 3d538 0 std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > >::operator[](unsigned long)
PUBLIC 3d54a 0 TNode::RemoveWriter(TOperation*)
PUBLIC 3d59e 0 TNode::ReleaseOperationLock()
PUBLIC 3d5d8 0 TNode::DecrementReaders()
PUBLIC 3d614 0 TOperationTimer::~TOperationTimer()
PUBLIC 3d620 0 TNodeOperationTask::Finalize()
PUBLIC 3d63a 0 TCopyMoveOperation::Finalize()
PUBLIC 3d69a 0 TCopyReader::Finalize()
PUBLIC 3d718 0 TCopyQueue::SetReadCompleted()
PUBLIC 3d724 0 TOperation::CleanupAll()
PUBLIC 3d7ca 0 TCopyMoveOperation::Cleanup(OperationRecord*)
PUBLIC 3d828 0 TOperation::SendPropertyChangeNotification(TNodePtr const&, unsigned long)
PUBLIC 3d858 0 TNodeOperationTask::Completed()
PUBLIC 3d9c4 0 TCopyMoveOperation::~TCopyMoveOperation()
PUBLIC 3d9d0 0 TCopyReader::~TCopyReader()
PUBLIC 3d9da 0 TCopyQueue::WaitOnCopyDone()
PUBLIC 3da20 0 TCopyWriter::HandleError(long)
PUBLIC 3dafa 0 TCopyWriter::WriteCleanup()
PUBLIC 3dcfa 0 FinalizeOperation()
PUBLIC 3dd02 0 TCopyWriter::~TCopyWriter()
PUBLIC 3dd8a 0 TCopyQueue::SetWriteComplete()
PUBLIC 3ddca 0 TCopyWriter::ResetReservationStack()
PUBLIC 3de1e 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::vector(unsigned long, __gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >* const&, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> const&)
PUBLIC 3de7e 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> > >::~allocator()
PUBLIC 3de84 0 std::vector<TCopyItem*, std::allocator<TCopyItem*> >::~vector()
PUBLIC 3dec4 0 std::_Vector_base<TCopyItem*, std::allocator<TCopyItem*> >::~_Vector_base()
PUBLIC 3deea 0 std::_Vector_base<TCopyItem*, std::allocator<TCopyItem*> >::_Vector_impl::~_Vector_impl()
PUBLIC 3def4 0 TCopyQueue::~TCopyQueue()
PUBLIC 3defe 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::_Vector_base(unsigned long, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> const&)
PUBLIC 3df58 0 _ChildOperationComplete
PUBLIC 3dfb6 0 TOperation::PortInvalidationCallback(__CFMachPort*, void*)
PUBLIC 3dfc6 0 TOperation::PostExternalNotificationsAtEndOfOperation()
PUBLIC 3e04e 0 THashTable<TFSRef, int>::begin()
PUBLIC 3e07e 0 THashTable<TFSRef, int>::clear()
PUBLIC 3e0d4 0 std::vector<unsigned long, std::allocator<unsigned long> >::~vector()
PUBLIC 3e10a 0 std::_Vector_base<unsigned long, std::allocator<unsigned long> >::~_Vector_base()
PUBLIC 3e122 0 std::vector<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > >::~vector()
PUBLIC 3e168 0 std::_Vector_base<std::pair<TNodePtr, TNodePtr>, std::allocator<std::pair<TNodePtr, TNodePtr> > >::~_Vector_base()
PUBLIC 3e180 0 TNodeOperationTask::RemoveOperationRef(OpaqueOperationRef*&)
PUBLIC 3e1e8 0 std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> >::erase(__gnu_cxx::__normal_iterator<OpaqueOperationRef**, std::vector<OpaqueOperationRef*, std::allocator<OpaqueOperationRef*> > >)
PUBLIC 3e244 0 GetNodePropertyAsPoint
PUBLIC 3e2ac 0 TNode::GetOldLocation(TPropertyReference&) const
PUBLIC 3e300 0 THFSPlusRef::GetOldLocation() const
PUBLIC 3e34e 0 TPropertyReference::SetValue(Point const&)
PUBLIC 3e370 0 SetNodePropertyAsDataNew
PUBLIC 3e3b6 0 THFSPlusPropertyStore::SetProperty(HFSUniStr255 const&, unsigned long, TPropertyReference const&)
PUBLIC 3e4d0 0 TPropertyInfo::TPropertyInfo(HFSUniStr255 const&, unsigned long, TPropertyReference const&)
PUBLIC 3e4fc 0 TPropertyInfo** std::__copy_backward<true, std::random_access_iterator_tag>::copy_b<TPropertyInfo*>(TPropertyInfo* const*, TPropertyInfo* const*, TPropertyInfo**)
PUBLIC 3e52c 0 THFSPlusRef::SetMDAttributeIfAppropriate(unsigned long, TPropertyReference const&)
PUBLIC 3e600 0 TMountPointList::FlushVolumes(bool)
PUBLIC 3e75c 0 THFSPlusCatalog::SetTimerToHandleFlushRequest(short, double)
PUBLIC 3e866 0 THFSPlusRef::HasExtension() const
PUBLIC 3e8ac 0 _NodeStringCompareWithError
PUBLIC 3e9c0 0 TNode::Compare(TNode const*, unsigned long, short (*)(unsigned long, unsigned short const*, unsigned long, unsigned short const*)) const
PUBLIC 3e9f6 0 GetNodeAsURL
PUBLIC 3ea18 0 NodeCopyAsURL
PUBLIC 3eab8 0 TNode::GetURL(__CFURL const*&)
PUBLIC 3eb62 0 NodeIsComputer
PUBLIC 3eb94 0 TNode::IsComputer() const
PUBLIC 3eba6 0 THFSPlusCatalog::HandleFlushRequest(__CFRunLoopTimer*, void*)
PUBLIC 3ec44 0 TNodeSyncTask::HandleInternalFlushVolume(TCountedPtr<TNodeEvent> const&, TNodePtr const&)
PUBLIC 3ec5c 0 TMountPointList::FlushVolume(short)
PUBLIC 3ecdc 0 THFSPlusCatalog::ClosePropertyStore(unsigned long)
PUBLIC 3ed50 0 THFSPlusPropertyStore::Empty()
PUBLIC 3ed86 0 TNode::IsRequiredBySystem() const
PUBLIC 3ee04 0 TCopyMoveOperation::PerformMove(OperationRecord*)
PUBLIC 3f15e 0 TOperation::Move(TNode*, TNode*, OperationRecord&, TOperation&)
PUBLIC 3f1b6 0 TNode::Move(TNodePtr const&, OperationRecord&, TOperation&, HFSUniStr255 const*)
PUBLIC 3f55a 0 TNode::GetName(HFSUniStr255&) const
PUBLIC 3f5a6 0 TNode::Move(TNodePtr const&, TNodePtr const&, HFSUniStr255*, TOperation&)
PUBLIC 3f630 0 THFSPlusCatalog::Move(TNodePtr const&, TNodePtr const&, TNodePtr&, HFSUniStr255*, TOperation&)
PUBLIC 3fe20 0 THFSPlusRef::Move(THFSPlusRef const&)
PUBLIC 3feee 0 LockMoveObject(FSRef const&, FSRef const&, FSRef*)
PUBLIC 3ff48 0 THFSPlusRef::Set(FSRef const&, unsigned long)
PUBLIC 3ff84 0 THFSPlusRef::SetParentDirID(unsigned long)
PUBLIC 3ff92 0 TNode::SetParent(TNodePtr const&, THFSPlusExtendedPropertyIterator&)
PUBLIC 4010c 0 TNode::DecrementReadersBelowBy(unsigned long)
PUBLIC 4014c 0 _NodeCreateNewVirtualQueryNodePlus
PUBLIC 40264 0 TClientQuery::TClientQuery(__CFString const*, __CFArray const*, unsigned long, __CFArray const*, long (*)(void const* const*, void const* const*, void*), NodeClientContext, long, unsigned long)
PUBLIC 4026e 0 TClientQuery::AddPtrReference()
PUBLIC 40282 0 NodeCreateNewQueryNode
PUBLIC 40408 0 TNode::CreateNodeQuery(HFSUniStr255 const&, TCountedPtr<TClientQuery> const&)
PUBLIC 40440 0 TNode::SetNodeQuery(HFSUniStr255 const&)
PUBLIC 40492 0 THFSPlusRef::SetNodeQuery(HFSUniStr255 const&)
PUBLIC 4053e 0 TChildrenList::SetNodeQuery(TCountedPtr<TClientQuery> const&)
PUBLIC 405f4 0 TNodeQueryDataRecord::TNodeQueryDataRecord()
PUBLIC 4061e 0 TNodeQueryDataRecord::RemovePtrReference()
PUBLIC 40654 0 TNodeQuery::TNodeQuery(TCountedPtr<TClientQuery> const&)
PUBLIC 4065e 0 TNodeQuery::AddPtrReference()
PUBLIC 4067a 0 TCountedPtr<TNodeQuery>::operator=(TCountedPtr<TNodeQuery> const&)
PUBLIC 406b8 0 TNodeQuery::RemovePtrReference()
PUBLIC 406f2 0 TClientQuery::RemovePtrReference()
PUBLIC 40728 0 NodeDisposeNodeQueryRef
PUBLIC 40770 0 NodeNewEventQueue
PUBLIC 40788 0 TNode::SetNodeQueryHitsContainer(__CFString const*)
PUBLIC 407da 0 THFSPlusRef::SetNodeQueryHitsContainer(__CFString const*)
PUBLIC 4087c 0 TChildrenList::SetNodeQueryHitsContainer(TNodePtr const&) const
PUBLIC 4097a 0 TNodeQuery::SetHitsNode(TNode*)
PUBLIC 40a34 0 TQueryTask::TQueryTask(TCountedPtr<TNodeQuery>)
PUBLIC 40a3e 0 TQueryTask::QueryTaskProc(void*)
PUBLIC 40ae2 0 TChildrenList::SetNodeQueryNode(TNodePtr const&) const
PUBLIC 40b7a 0 TNodeQuery::StartQuery()
PUBLIC 40e0c 0 TNodeQuery::HitCreateItem(__MDQuery*, __MDItem*, void*)
PUBLIC 40e7e 0 TNode::TNode(TNode*, __MDItem*)
PUBLIC 40e88 0 THFSPlusRef::SetNodeQueryHit(__MDItem*)
PUBLIC 40f4c 0 TChildrenList::SetMDItemRef(__MDItem*)
PUBLIC 40fe2 0 TNodeQuery::HitRetain(__CFAllocator const*, void const*)
PUBLIC 41038 0 TNodeQuery::ProgressCallBack(__CFNotificationCenter*, void*, __CFString const*, void const*, __CFDictionary const*)
PUBLIC 41108 0 TNodeQuery::AddAllChildren()
PUBLIC 413b0 0 LockMDQueryGetResultCount(__MDQuery*)
PUBLIC 413fa 0 TNode::SetSearchCount(long)
PUBLIC 4142e 0 std::vector<TNode*, std::allocator<TNode*> >::reserve(unsigned long)
PUBLIC 414de 0 std::vector<TNode*, std::allocator<TNode*> >::capacity() const
PUBLIC 41506 0 TNode** std::vector<TNode*, std::allocator<TNode*> >::_M_allocate_and_copy<TNode**>(unsigned long, TNode**, TNode**)
PUBLIC 41564 0 std::allocator<__CFString const*>::allocator()
PUBLIC 4156a 0 std::vector<__CFString const*, std::allocator<__CFString const*> >::vector(std::allocator<__CFString const*> const&)
PUBLIC 41574 0 std::_Vector_base<__CFString const*, std::allocator<__CFString const*> >::_Vector_base(std::allocator<__CFString const*> const&)
PUBLIC 4157e 0 std::_Vector_base<__CFString const*, std::allocator<__CFString const*> >::_Vector_impl::_Vector_impl(std::allocator<__CFString const*> const&)
PUBLIC 415b2 0 std::allocator<__CFString const*>::allocator(std::allocator<__CFString const*> const&)
PUBLIC 415b8 0 std::vector<__CFString const*, std::allocator<__CFString const*> >::reserve(unsigned long)
PUBLIC 41668 0 std::vector<__CFString const*, std::allocator<__CFString const*> >::capacity() const
PUBLIC 416a2 0 std::vector<__CFString const*, std::allocator<__CFString const*> >::size() const
PUBLIC 416ca 0 __CFString const** std::vector<__CFString const*, std::allocator<__CFString const*> >::_M_allocate_and_copy<__CFString const**>(unsigned long, __CFString const**, __CFString const**)
PUBLIC 41744 0 __CFString const** std::uninitialized_copy<__CFString const**, __CFString const**>(__CFString const**, __CFString const**, __CFString const**)
PUBLIC 41776 0 std::vector<__CFString const*, std::allocator<__CFString const*> >::push_back(__CFString const* const&)
PUBLIC 417b8 0 std::vector<TNode*, std::allocator<TNode*> >::operator[](unsigned long)
PUBLIC 417ca 0 std::vector<__CFString const*, std::allocator<__CFString const*> >::operator[](unsigned long)
PUBLIC 417dc 0 THFSPlusRef::SetNodeQueryDisplayName(HFSUniStr255 const&)
PUBLIC 41874 0 TNodeQuery::HandleAddResultAtEnd(TNode*, bool)
PUBLIC 418e2 0 std::vector<__CFString const*, std::allocator<__CFString const*> >::~vector()
PUBLIC 41918 0 std::_Vector_base<__CFString const*, std::allocator<__CFString const*> >::~_Vector_base()
PUBLIC 41930 0 TNode::ClearBeingSynced()
PUBLIC 4194e 0 TNodeQuery::HitRelease(__CFAllocator const*, void const*)
PUBLIC 41996 0 _NodeGetQueryClientRef
PUBLIC 419f8 0 TNode::GetQueryClientRef() const
PUBLIC 41a22 0 NodeGetMDItemRef
PUBLIC 41a80 0 TNode::GetMDItemRef() const
PUBLIC 41aa0 0 THFSPlusRef::GetNodeQueryItemRef() const
PUBLIC 41b9a 0 NodeCopyNodeRef
PUBLIC 41bcc 0 _NodeSetQueryClientRef
PUBLIC 41c3a 0 TNode::SetQueryClientRef(void*)
PUBLIC 41c6c 0 TChildrenList::SetQueryClientRef(void*)
PUBLIC 41cac 0 NodeDisposeNodeRef
PUBLIC 41d8a 0 NodeCopyMDAttributeForHit
PUBLIC 41e32 0 TNode::CopyAttribute(__CFString const*, void const*&, OpaqueNodeRequest* const&)
PUBLIC 42100 0 TChildrenList::GetNodeQueryNode() const
PUBLIC 42138 0 TNode::GetNodeQuery() const
PUBLIC 421ca 0 TChildrenList::GetNodeQuery() const
PUBLIC 42204 0 TNodeQuery::CopyMDAttributeForHitNode(TNodePtr const&, __CFString const*) const
PUBLIC 422a2 0 TNodeQuery::HitEqual(void const*, void const*)
PUBLIC 422c6 0 NodeCancelQuery
PUBLIC 42338 0 TNode::CancelQuery()
PUBLIC 4239e 0 TChildrenList::CancelQuery()
PUBLIC 42472 0 TQueryTask::CancelQuery(TCountedPtr<TNodeQuery>)
PUBLIC 42544 0 TNodeQuery::TestAndSetIsCancelled()
PUBLIC 425ae 0 TNode::TestAndSetInitialPopulationComplete()
PUBLIC 425d4 0 TNodeQueryDataRecord::~TNodeQueryDataRecord()
PUBLIC 42608 0 NodeDisposeEventQueue
PUBLIC 4266e 0 TNode::SetLogicalSize(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 426e8 0 TNodeQuery::CancelQuery(void*)
PUBLIC 426fa 0 TNodeQuery::StopQuery()
PUBLIC 42984 0 TNodeQuery::~TNodeQuery()
PUBLIC 42a12 0 TClientQuery::~TClientQuery()
PUBLIC 42a68 0 NodeContextClose
PUBLIC 42b52 0 TFSEventsNotificationTask::DisableFSEvents()
PUBLIC 42baa 0 TNodeTask::CancelAllRequests()
PUBLIC 42c66 0 TNode::ReleaseFavoritesFileList()
PUBLIC 42c96 0 LockSFLRelease(OpaqueSFLRef*)
PUBLIC 42ce0 0 TNode::ReleaseVolumesFileList()
PUBLIC 42d10 0 TNode::ReleaseSavedSearchesFileList()
PUBLIC 42d40 0 TNode::ReleaseNetworkNearbyBrowser()
PUBLIC 42d70 0 TNode::ReleaseNetworkSidebarBrowser()
PUBLIC 42da0 0 TNode::ReleaseSharedFoldersList()
PUBLIC 42dd0 0 TNodeEvent::NodeEventFinalize()
PUBLIC 42e48 0 TMountPointList::Finalize()
PUBLIC 42eaa 0 TNodeSyncTask::CancelSyncs()
PUBLIC 42f54 0 TNode::Finalize()
PUBLIC 4322e 0 VolumesCallback
PUBLIC 43270 0 TTrashOperation::TTrashOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 4327a 0 TTrashOperation::LogOperationName(OperationRecord*) const
PUBLIC 4328c 0 TTrashOperation::TransformOperations()
PUBLIC 43302 0 TOperation::AcquireDestinationLocks()
PUBLIC 4330a 0 TOperation::AcquireSourceLock(OperationRecord*)
PUBLIC 4334e 0 TTrashOperation::ResolveConflict(OperationRecord*)
PUBLIC 43540 0 THFSPlusCatalog::~THFSPlusCatalog()
PUBLIC 4354a 0 _ChildRunTrashOperation
PUBLIC 436d2 0 _XNotifyTrashStatus
PUBLIC 437ce 0 _ParentXNotifyTrashStatus
PUBLIC 4388c 0 TOperation::ReportStatus(unsigned long, unsigned short const*, long long, long long, long long)
PUBLIC 439dc 0 TStatusLock::TStatusLock()
PUBLIC 43a04 0 TStatusLock::~TStatusLock()
PUBLIC 43a24 0 TDSMutex::~TDSMutex()
PUBLIC 43a2e 0 TOperation::UpdateStatusItemsTotal(long long, long long)
PUBLIC 43ac8 0 TOperation::UpdateStatusBytesTotal(long long)
PUBLIC 43b26 0 _XNotifyCancelOperationRequested
PUBLIC 43be2 0 _ParentXNotifyCancelOperationRequested
PUBLIC 43c08 0 _XNotifyPreflightResults
PUBLIC 43cf2 0 _ParentXNotifyPreflightResults
PUBLIC 43da6 0 TOperation::TransformDestinationLocks()
PUBLIC 43dae 0 TOperation::NeedsSizeCheck() const
PUBLIC 43db6 0 TTrashOperation::PerformOperation(OperationRecord*)
PUBLIC 43fd0 0 _XNotifyTrashDone
PUBLIC 44068 0 _ParentXNotifyTrashDone
PUBLIC 44080 0 TOperation::Finalize()
PUBLIC 44086 0 TTrashOperation::Cleanup(OperationRecord*)
PUBLIC 4410a 0 TTrashOperation::~TTrashOperation()
PUBLIC 44114 0 CloseCatalog
PUBLIC 4411e 0 VolumeIsUnmountable
PUBLIC 44150 0 TNode::VolumeIsUnmountable() const
PUBLIC 441bc 0 TNode::IsUnmountableVolume() const
PUBLIC 44310 0 TNode::GetParentKeyName()
PUBLIC 4435a 0 TNode::GetOldViewStyle(TPropertyReference&) const
PUBLIC 443ca 0 THFSPlusRef::GetOldViewStyle() const
PUBLIC 443e2 0 THFSPlusRef::GetKindString(TUString&, bool) const
PUBLIC 44424 0 TMetaData::GetKindString(TUString&, bool) const
PUBLIC 44480 0 _NodeMarkAsUsed
PUBLIC 44526 0 TNodeSyncTask::HandleInternalMarkAsUsed(TCountedPtr<TNodeEvent> const&, TNodePtr const&)
PUBLIC 44546 0 TNode::MarkAsUsed()
PUBLIC 44632 0 TPropertyInfo::EqualValue(TPropertyInfo const&) const
PUBLIC 446ae 0 TPropertyValue::operator==(TPropertyValue const&) const
PUBLIC 44852 0 SetNodePropertyAsInt16
PUBLIC 44890 0 SetNodePropertyAsInt32
PUBLIC 448c8 0 TChildrenList::GetLastResizeDuration() const
PUBLIC 448de 0 THFSPlusSizer::Size()
PUBLIC 44926 0 THFSPlusSizer::Sizing(TFSInfo const&)
PUBLIC 44abe 0 TDeepFSIterator::Next(TFSInfo&, bool&)
PUBLIC 44b44 0 TFSInfo::ShouldSkip(bool, bool, bool) const
PUBLIC 44bc2 0 TFSInfo::IsTrash() const
PUBLIC 44d5c 0 TDeepFSIterator::PushIterator(TFSInfo const&)
PUBLIC 44f76 0 std::vector<TFSIterator*, std::allocator<TFSIterator*> >::push_back(TFSIterator* const&)
PUBLIC 44fba 0 std::vector<TFSIterator*, std::allocator<TFSIterator*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<TFSIterator**, std::vector<TFSIterator*, std::allocator<TFSIterator*> > >, TFSIterator* const&)
PUBLIC 45158 0 std::vector<TFSIterator*, std::allocator<TFSIterator*> >::size() const
PUBLIC 451ea 0 THFSPlusSizer::AccumulateSize(TFSInfo const&, bool, bool)
PUBLIC 4528c 0 std::vector<TFSIterator*, std::allocator<TFSIterator*> >::back()
PUBLIC 4529a 0 TNode::GetKind(TPropertyReference&) const
PUBLIC 453c8 0 TPropertyValue::TPropertyValue(long long)
PUBLIC 453e2 0 THFSPlusRef::SetPhysicalSize(long long, bool)
PUBLIC 453f6 0 THFSPlusRef::SetLogicalSize(long long, bool)
PUBLIC 4540a 0 TNode::SetDeepItemCount(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 454c0 0 TChildrenList::GetDeepChildrenCount(bool) const
PUBLIC 4551a 0 TChildrenList::SetDeepChildrenCount(long long, bool)
PUBLIC 4558c 0 TNode::SetDeepVisibleItemCount(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 45640 0 TChildrenList::SetLastResizeTime(double)
PUBLIC 45690 0 TChildrenList::SetHasSized()
PUBLIC 456d2 0 THFSPlusSizer::~THFSPlusSizer()
PUBLIC 456dc 0 TNode::SetUnresolvedTarget()
PUBLIC 457b2 0 TPropertyTask::HandleResolveAlias(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 45888 0 TNode::AdjustForBackup(TNodePtr const&)
PUBLIC 45a46 0 TNode::GetSystemVersion(TPropertyReference&) const
PUBLIC 45ae6 0 TNode::VersionDataFetched() const
PUBLIC 45b10 0 TPropertyValue::TPropertyValue(TUString const&)
PUBLIC 45b1a 0 TNode::GetShortVersion(TPropertyReference&) const
PUBLIC 45bba 0 THFSPlusRef::FetchVersionMetaData() const
PUBLIC 45be4 0 TMetaData::FetchVersionMetaData() const
PUBLIC 45c84 0 THFSPlusRef::IsFontFile() const
PUBLIC 45d54 0 TMetaData::FetchPlistVersion() const
PUBLIC 45ff2 0 VersionData::VersionData()
PUBLIC 4602a 0 TMetaData::SetVersionData(VersionData*)
PUBLIC 460a2 0 TExtraData::SetVersionData(VersionData*)
PUBLIC 46124 0 VersionData::~VersionData()
PUBLIC 4615c 0 TMetaData::FetchFlatFileVersion() const
PUBLIC 4635e 0 TMetaData::FetchOldStyleVersion() const
PUBLIC 46624 0 TMetaData::GetFontSuffix()
PUBLIC 4669e 0 StOpenResourceForkReadOnly::StOpenResourceForkReadOnly(FSRef, bool)
PUBLIC 466b8 0 TFSInfo::ResourceForkName()
PUBLIC 46712 0 StOpenResourceForkReadOnly::Opened() const
PUBLIC 46724 0 StOpenResourceForkReadOnly::~StOpenResourceForkReadOnly()
PUBLIC 4673c 0 THFSPlusRef::GetSystemVersion(TUString&) const
PUBLIC 4676c 0 TMetaData::GetSystemVersion(TUString&) const
PUBLIC 467ca 0 THFSPlusRef::GetShortVersion(TUString&) const
PUBLIC 467fa 0 TMetaData::GetShortVersion(TUString&) const
PUBLIC 46856 0 TNode::DownloadChangedCallback(__CFNotificationCenter*, void*, __CFString const*, void const*, __CFDictionary const*)
PUBLIC 46aea 0 _NodeSizer
PUBLIC 46ccc 0 TOperationSizer::ComputeSize()
PUBLIC 46e80 0 TFSInfo::RealUserCanRead(bool*) const
PUBLIC 46ed0 0 TFSInfo::UserCanSearch() const
PUBLIC 46eec 0 TOperationSizer::Sizing(TFSInfo const&)
PUBLIC 47064 0 TOperationSizer::AccumulateSize(TFSInfo const&, bool)
PUBLIC 473cc 0 TOperationSizer::ShouldSkip(TFSInfo const&) const
PUBLIC 4747c 0 ceiling_64(unsigned long long, unsigned long long)
PUBLIC 474f8 0 TOperationSizer::~TOperationSizer()
PUBLIC 47502 0 NodeCopyFromPathName
PUBLIC 47694 0 TNode::GetNodeFromPathName(TUString const&, TNodePtr&)
PUBLIC 47ab8 0 TNodeQuery::DidFinishCallBack(__CFNotificationCenter*, void*, __CFString const*, void const*, __CFDictionary const*)
PUBLIC 47b98 0 TNode::GetLongVersion(TPropertyReference&) const
PUBLIC 47c38 0 THFSPlusRef::GetLongVersion(TUString&) const
PUBLIC 47c68 0 TMetaData::GetLongVersion(TUString&) const
PUBLIC 47cc6 0 NodeIsFontFile
PUBLIC 47cf8 0 TNode::IsFontFile() const
PUBLIC 47d12 0 TNode::GetArchitecturesSupported(TPropertyReference&) const
PUBLIC 47d8c 0 THFSPlusRef::GetArchitecturesSupported(unsigned long&, bool) const
PUBLIC 48026 0 TNode::GetArchitecturePreference(TPropertyReference&) const
PUBLIC 480bc 0 THFSPlusRef::GetArchitecturePreference(HFSUniStr255&, bool) const
PUBLIC 48364 0 THFSPlusRef::UserIsRoot() const
PUBLIC 4839e 0 TNode::UserIsOwner() const
PUBLIC 483fc 0 TMountPointList::UserIsOwner(short, unsigned long, unsigned long)
PUBLIC 48464 0 THFSPlusCatalog::UserIsOwner(unsigned long, unsigned long) const
PUBLIC 4847a 0 THFSPlusRef::SetLabel(short, bool)
PUBLIC 484ee 0 std::allocator<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > > >(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > > > const&)
PUBLIC 4851a 0 THFSPlusRef::IsFramework() const
PUBLIC 485e0 0 TExtraData::~TExtraData()
PUBLIC 486b4 0 TNode::SetTimerToDispatchResizeRequest(TNodeTask*, double)
PUBLIC 4877e 0 RetainRequest(void const*)
PUBLIC 4879c 0 TNode::GetDeepVisibleItemCount(TPropertyReference&) const
PUBLIC 487be 0 TNode::GetDeepChildrenCount(TPropertyReference&, bool) const
PUBLIC 4887e 0 TNode::DispatchResizeRequestNow(__CFRunLoopTimer*, void*)
PUBLIC 48934 0 ReleaseRequest(void const*)
PUBLIC 48946 0 VolumeSupportsACLs
PUBLIC 48978 0 TNode::VolumeSupportsACLs() const
PUBLIC 48998 0 NodeGetAccessRights
PUBLIC 489f2 0 TNode::FetchAccessRights()
PUBLIC 48a8c 0 TPropertyTask::HandleFetchACLData(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 48b3c 0 THFSPlusRef::CreateUserAccessRightsDictionary(__CFDictionary const**) const
PUBLIC 48bd6 0 TNodeEvent::CreateNodeEvent(unsigned long, TNodePtr const&, __CFDictionary const*, __CFString const*)
PUBLIC 48c2c 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, __CFDictionary const*, __CFString const*)
PUBLIC 48c36 0 TNode::GetOwnerID(TPropertyReference&) const
PUBLIC 48c7e 0 TPropertyReference::SetValue(long)
PUBLIC 48c9e 0 TNode::SharingDataFetched() const
PUBLIC 48cc0 0 THFSPlusRef::FetchSharingData() const
PUBLIC 48d7a 0 LockGetObjectAccess(FSRef const&, long*, long*, long*)
PUBLIC 48ddc 0 TNode::GetUserGroupID(TPropertyReference&) const
PUBLIC 48e24 0 TNode::GetPermissions(TPropertyReference&) const
PUBLIC 48e6c 0 TNode::GetVolumeFormat(TPropertyReference&) const
PUBLIC 48ea6 0 THFSPlusCatalog::GetVolumeFormat() const
PUBLIC 48eb2 0 NodeEventGetAccessRights
PUBLIC 48f1c 0 NodeHasChildNew
PUBLIC 48fb4 0 NodeCreateNewContainerInNew
PUBLIC 4902a 0 NodeCreateNewFolder
PUBLIC 49124 0 TChildCreator::TChildCreator(__CFString const*, long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), long (TNode::*)(TChildCreator const&, NodeNameSyntaxHint const&, TNodePtr const&), TCountedPtr<TPropertyMap> const&, TNodePtr const&, unsigned long, __CFDictionary const*, __CFURL const*, TCountedPtr<TClientQuery> const&)
PUBLIC 4912e 0 NodeCreateNewChild(unsigned long, OpaqueNodeRef*, TChildCreator const&, OpaqueNodeRef**, OpaqueNodeRequest*)
PUBLIC 49350 0 TNode::CreateNewChild(TChildCreator const&, TNodePtr&)
PUBLIC 494ec 0 TNode::CreateChildContainer(TChildCreator const&, NodeNameSyntaxHint const&, TNodePtr const&)
PUBLIC 495ca 0 TNode::GetDesktopNode()
PUBLIC 49606 0 TNode::CreateNewVirtualChildProxy(TNodePtr const&, unsigned long, TNodePtr&)
PUBLIC 49b7c 0 TNode::GetHomeNode()
PUBLIC 49bb8 0 TNode::IsDesktop() const
PUBLIC 49c1e 0 LockSFLAddNewItemToList(OpaqueSFLRef*, unsigned long, OpaqueISImageRef*, unsigned short*, unsigned short, void*, unsigned long, unsigned long, unsigned long, unsigned long*)
PUBLIC 49ca8 0 TNode::GetApplicationsNode()
PUBLIC 49ce4 0 TNode::SetApplicationsNode()
PUBLIC 49d6e 0 TNode::GetDocumentsNode()
PUBLIC 49dac 0 dyld_stub_binding_helper
PUBLIC 49dc2 0 TCopyWriter::CopyUsingCopyFileAtRoot()
PUBLIC 4a094 0 TFSNotificationTask::FSNotificationTaskProc(void*)
PUBLIC 4a164 0 TNode::KQueue()
PUBLIC 4a192 0 TPathName::~TPathName()
PUBLIC 4a19c 0 TNode::SubscribeForFSNotification()
PUBLIC 4a1e8 0 TChildrenList::SetSubscriptionFileDescriptor(int)
PUBLIC 4a228 0 GetUTCDateTimeNow(UTCDateTime*)
PUBLIC 4a244 0 TNode::ScavengeProperties()
PUBLIC 4a3b2 0 THFSPlusPropertyStore::CreateUniqueNameList()
PUBLIC 4a4f2 0 IteratorFrame::~IteratorFrame()
PUBLIC 4a552 0 IAStruct::~IAStruct()
PUBLIC 4a568 0 BTreeIterator::~BTreeIterator()
PUBLIC 4a614 0 BTree::~BTree()
PUBLIC 4a6d0 0 Leaf::~Leaf()
PUBLIC 4a704 0 Page::~Page()
PUBLIC 4a768 0 SkipList::~SkipList()
PUBLIC 4a7d4 0 Scroll::~Scroll()
PUBLIC 4a850 0 BuddyStorage::~BuddyStorage()
PUBLIC 4a90a 0 UInt32Set::~UInt32Set()
PUBLIC 4a93e 0 StringUInt32Map::~StringUInt32Map()
PUBLIC 4a976 0 StringSet::~StringSet()
PUBLIC 4a9d4 0 IAStorage::~IAStorage()
PUBLIC 4aa2a 0 TPropertyStream::~TPropertyStream()
PUBLIC 4aa6e 0 IAStoreStream::~IAStoreStream()
PUBLIC 4aac8 0 TPropertyInfo::~TPropertyInfo()
PUBLIC 4aad2 0 std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> >::erase(__gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >, __gnu_cxx::__normal_iterator<TPropertyInfo**, std::vector<TPropertyInfo*, std::allocator<TPropertyInfo*> > >)
PUBLIC 4ab4e 0 TNameList::~TNameList()
PUBLIC 4ab58 0 TNodeOpenSyncTask::~TNodeOpenSyncTask()
PUBLIC 4ac1a 0 TNode::IsSymLink() const
PUBLIC 4ac34 0 NewVolumeIterator
PUBLIC 4ac78 0 TNode::NewVolumeIterator()
PUBLIC 4ace4 0 VolumeIteratorFirst
PUBLIC 4ad74 0 TFSInfo::UserCanWrite() const
PUBLIC 4ad92 0 VolumeIteratorNext
PUBLIC 4ae20 0 DisposeVolumeIterator
PUBLIC 4ae70 0 std::vector<TNode*, std::allocator<TNode*> >::erase(__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >, __gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >)
PUBLIC 4aeec 0 TMetaData::Reset()
PUBLIC 4af5e 0 NodeStringCompare
PUBLIC 4af90 0 NodeIsFullyFormed
PUBLIC 4afc6 0 TNode::UnsubscribeForFSNotification()
PUBLIC 4b012 0 TChildrenList::GetSubscriptionFileDescriptor() const
PUBLIC 4b026 0 TNodeSyncTask::~TNodeSyncTask()
PUBLIC 4b0bc 0 TNode::IsClipping() const
PUBLIC 4b0e6 0 TDeepFSIterator::Next(TFSInfo&)
PUBLIC 4b170 0 TFolderSizeTask::~TFolderSizeTask()
PUBLIC 4b1b0 0 TNode::IsLocation() const
PUBLIC 4b1d8 0 _CopyPropertyStore
PUBLIC 4b2ba 0 _CopyCommentForName
PUBLIC 4b422 0 THFSPlusRef::GetFinderFlags() const
PUBLIC 4b492 0 GetFSRefAsNode
PUBLIC 4b4b6 0 GetAEDescAsNode
PUBLIC 4b524 0 TNode::GetNodeFromAEDesc(AEDesc const&, TNodePtr&)
PUBLIC 4b594 0 AEDescToFSRef
PUBLIC 4b642 0 TNode::HasChild(HFSUniStr255 const&) const
PUBLIC 4b71e 0 _NodeCreateNewVirtualQueryNode
PUBLIC 4b836 0 _NodeSetVirtualQuery
PUBLIC 4b8e0 0 TQueryTask::~TQueryTask()
PUBLIC 4b924 0 NodeGetMDAttributes
PUBLIC 4b9ba 0 NodeEventGetMDAttributeValues
PUBLIC 4ba2a 0 TPropertyTask::~TPropertyTask()
PUBLIC 4ba6a 0 StOpenResourceForkReadOnly::GetResource(unsigned long, short, long&) const
PUBLIC 4bac6 0 GetNodeAsAEDesc
PUBLIC 4bb28 0 THFSPlusRef::SetType(unsigned long, bool)
PUBLIC 4bb70 0 THFSPlusRef::SetCreator(unsigned long, bool)
PUBLIC 4bbb8 0 GetNodePropertyAsDateTime
PUBLIC 4bc20 0 GetNodePropertyAsByte
PUBLIC 4bc88 0 THFSPlusRef::GetNodeFlags() const
PUBLIC 4bc98 0 THFSPlusRef::GetLogicalForkSize(FSForkType) const
PUBLIC 4bce8 0 SetNodePropertyAsIconRef
PUBLIC 4bdd8 0 TOperation::UpdateStatusItemsCompleted(long long, long long)
PUBLIC 4be44 0 TCopyMoveOperation::~TCopyMoveOperation()
PUBLIC 4bed0 0 TOperation::~TOperation()
PUBLIC 4c112 0 TNodeOperationTask::~TNodeOperationTask()
PUBLIC 4c146 0 TOperation::CreateLockItem(TNode*, TNode*, OperationRecord*)
PUBLIC 4c264 0 TOperation::UpdateStatusBytesCompleted(long long)
PUBLIC 4c2e6 0 TCopyQueue::Enqueue(TCopyQueueItem*)
PUBLIC 4c350 0 TOperation::UpdateStatusThroughput(long long)
PUBLIC 4c3ee 0 TCopyWriter::CreateNewDestinationItem()
PUBLIC 4c940 0 TCopyWriter::OpenResourceFork()
PUBLIC 4c974 0 TCopyWriter::OpenForkForWriting(short&, unsigned long long const&, bool)
PUBLIC 4cb06 0 TCopyWriter::OpenDataFork()
PUBLIC 4cb38 0 TCopyWriter::WriteResoureFork()
PUBLIC 4cb6e 0 TCopyWriter::WriteForkFromBuffer(short, unsigned long long const&, bool)
PUBLIC 4ced0 0 TCopyReader::OpenResourceFork()
PUBLIC 4cf34 0 TCopyReader::OpenForkForReading(short&, unsigned long long const&, bool)
PUBLIC 4d092 0 TCopyReader::ReadResourceFork()
PUBLIC 4d0e8 0 TCopyReader::ReadFork(short, unsigned long long const&, bool)
PUBLIC 4d2a0 0 TCopyQueue::GetBuffer()
PUBLIC 4d2fe 0 TCopyWriter::CloseResourceFork()
PUBLIC 4d328 0 TCopyWriter::CloseForkForWriting(short&, bool)
PUBLIC 4d3e8 0 TCopyWriter::WriteDataFork()
PUBLIC 4d41c 0 TCopyReader::CloseResourceFork()
PUBLIC 4d45a 0 TCopyReader::OpenDataFork()
PUBLIC 4d4be 0 TCopyReader::ReadDataFork()
PUBLIC 4d514 0 TCopyReader::CloseDataFork()
PUBLIC 4d552 0 TCopyWriter::CloseDataFork()
PUBLIC 4d57a 0 NodeCancelRequest
PUBLIC 4d5ca 0 TNodeTask::Cancel(unsigned long long const&)
PUBLIC 4d67e 0 TNode::UserCanChangePermissions() const
PUBLIC 4d6f2 0 TUString::TUString(unsigned long, char const*)
PUBLIC 4d732 0 TMountPointList::RemoveVolume(short)
PUBLIC 4d830 0 THFSPlusRef::IsBusyApplication() const
PUBLIC 4d8c2 0 TChildrenList::ClearAliasTarget()
PUBLIC 4d912 0 VolumeEject
PUBLIC 4d95e 0 THFSPlusRef::GetOldIconOrigin() const
PUBLIC 4d990 0 LockDetermineAutoRoutingDestination(short, unsigned long, unsigned long, FSRef&)
PUBLIC 4daac 0 TTrashOperation::~TTrashOperation()
PUBLIC 4dae0 0 THFSPlusRef::InternalGetName() const
PUBLIC 4dbca 0 NodeCreateNewVirtualQueryNode
PUBLIC 4dca2 0 NodeSetVirtualQuery
PUBLIC 4dd52 0 THFSPlusCatalog::AnyMountedODSDisks()
PUBLIC 4dd6a 0 THFSPlusCatalog::VolumeType() const
PUBLIC 4dda0 0 THFSPlusCatalog::GetCapacity() const
PUBLIC 4ddd4 0 THFSPlusCatalog::ReportDeleteOperationProgress(TOperation*, long long, long long)
PUBLIC 4de4c 0 THFSPlusCatalog::ReportDeleteError(TOperation*, THFSPlusRef const&, long)
PUBLIC 4deba 0 THFSPlusCatalog::NotifyODSDiskStateChange()
PUBLIC 4df40 0 THFSPlusCatalog::IsHomeVolume() const
PUBLIC 4df8a 0 THFSPlusCatalog::GetOpenFolder() const
PUBLIC 4e00c 0 THFSPlusCatalog::GetVolumeFormatString() const
PUBLIC 4e15e 0 THFSPlusCatalog::Deleting(THFSPlusRef&, TOperation*, OperationRecord*, unsigned long&, bool)
PUBLIC 4e6b4 0 THFSPlusCatalog::Delete(TNodePtr&, bool, TOperation*, OperationRecord*, bool)
PUBLIC 4e74e 0 THFSPlusCatalog::MapUserOrGroupUUIDToName(bool, __CFUUID const*, __CFString const**) const
PUBLIC 4e7c6 0 THFSPlusCatalog::MapNameToUserOrGroupUUID(bool, __CFString const*, __CFUUID const**) const
PUBLIC 4e83e 0 THFSPlusCatalog::MapUserOrGroupIDToName(bool, unsigned long, TUString&) const
PUBLIC 4e908 0 THFSPlusCatalog::MapNameToUserOrGroupID(bool, TUString const&, unsigned long&) const
PUBLIC 4e97a 0 THFSPlusCatalog::RemoveProperties(unsigned long, HFSUniStr255 const&)
PUBLIC 4e9fe 0 THFSPlusCatalog::RemoveProperties(THFSPlusRef const&)
PUBLIC 4ea58 0 THFSPlusCatalog::Unmount(int*)
PUBLIC 4eb12 0 THFSPlusCatalog::Eject(int*)
PUBLIC 4ed1e 0 THFSPlusCatalog::~THFSPlusCatalog()
PUBLIC 4efda 0 THFSPlusCatalog::THFSPlusCatalog(TNode*, short, FSVolumeInfo const&)
PUBLIC 4f642 0 Deleter::StDeleter<THFSPlusIterator>::~StDeleter()
PUBLIC 4f66e 0 Deleter::StDeleter<THFSPlusRef>::~StDeleter()
PUBLIC 4f69a 0 HFSUniStr255** std::__copy_backward<true, std::random_access_iterator_tag>::copy_b<HFSUniStr255*>(HFSUniStr255* const*, HFSUniStr255* const*, HFSUniStr255**)
PUBLIC 4f6ca 0 THFSPlusPropertyStore** std::__copy_backward<true, std::random_access_iterator_tag>::copy_b<THFSPlusPropertyStore*>(THFSPlusPropertyStore* const*, THFSPlusPropertyStore* const*, THFSPlusPropertyStore**)
PUBLIC 4f770 0 std::_Vector_base<HFSUniStr255*, std::allocator<HFSUniStr255*> >::~_Vector_base()
PUBLIC 4f788 0 std::vector<HFSUniStr255*, std::allocator<HFSUniStr255*> >::~vector()
PUBLIC 4f7be 0 THFSPlusExtendedPropertyIterator::THFSPlusExtendedPropertyIterator(TNodePtr const&)
PUBLIC 4f898 0 THFSPlusExtendedPropertyIterator::THFSPlusExtendedPropertyIterator(HFSUniStr255 const&, THFSPlusPropertyStore*)
PUBLIC 4f93a 0 THFSPlusExtendedPropertyIterator::~THFSPlusExtendedPropertyIterator()
PUBLIC 4f964 0 THFSPlusPropertyStore::RemoveProperties(HFSUniStr255 const&)
PUBLIC 4f9aa 0 TNameList::~TNameList()
PUBLIC 4f9fc 0 THFSPlusPropertyStore::THFSPlusPropertyStore(TFSInfo&)
PUBLIC 4fa56 0 THFSPlusPropertyStore::THFSPlusPropertyStore(THFSPlusPropertyStore const&)
PUBLIC 4fba0 0 THFSPlusPropertyStore::RemoveProperty(HFSUniStr255 const&, unsigned long)
PUBLIC 4fc44 0 THFSPlusPropertyStore::~THFSPlusPropertyStore()
PUBLIC 4fc78 0 TNameList::TNameList()
PUBLIC 4fca0 0 TNode::GetUnknownError(TPropertyReference&) const
PUBLIC 4fcaa 0 TNode::ReadOnlyPropertyError(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 4fcb4 0 TNode::SetUnknownError(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 4fcbe 0 TNode::GetDataForkSize(TPropertyReference&) const
PUBLIC 4fd0a 0 TNode::GetResourceForkSize(TPropertyReference&) const
PUBLIC 4fd56 0 TNode::GetUnbadgedIcon(OpaqueIconRef*&) const
PUBLIC 4fd68 0 TNode::GetIsPublishedFolder(TPropertyReference&) const
PUBLIC 4fd86 0 TNode::GetIsFileShare(TPropertyReference&) const
PUBLIC 4fda4 0 TNode::GetIsScreenShare(TPropertyReference&) const
PUBLIC 4fdc2 0 TNode::NoReconcile(TNodePtr const&)
PUBLIC 4fdca 0 NodeResolveCallBack(__NWNode*, __CFString const*, NWNodeError, void*)
PUBLIC 4fe76 0 TNode::TestAndSetSyncRequested()
PUBLIC 4fe9c 0 TNode::DetermineAutoRoutingDestination(unsigned long, FSRef&) const
PUBLIC 4fee4 0 TUniqueNamer::TUniqueNamer(long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), HFSUniStr255 const&, HFSUniStr255*, NodeNameSyntaxHint const&)
PUBLIC 4ff52 0 TUniqueNamer::TUniqueNamer(long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), HFSUniStr255 const&, HFSUniStr255*, NodeNameSyntaxHint const&)
PUBLIC 4ff5c 0 TUniqueNamer::TUniqueNamer(long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), HFSUniStr255 const&, NodeNameSyntaxHint const&)
PUBLIC 4ffba 0 TNode::RequestPermissionsOperation(OpaqueOperationRef*, unsigned long, __FSFileSecurity*)
PUBLIC 5002e 0 TChildCreator::operator=(TChildCreator const&)
PUBLIC 50126 0 TNode::TNode(TNode*)
PUBLIC 501be 0 TNode::TNode(TNode*, THFSPlusRef const&, unsigned long)
PUBLIC 5026a 0 TNode::IsiDiskMounted()
PUBLIC 502d8 0 TNode::GetODSRequiresAsk(TPropertyReference&) const
PUBLIC 502f4 0 TNode::VirtualChildLocked() const
PUBLIC 50310 0 TNode::GetHasScriptingTerminology(TPropertyReference&) const
PUBLIC 5035a 0 TNode::GetFSAttributes(TPropertyReference&) const
PUBLIC 503a2 0 TNode::GetFinderFlags(TPropertyReference&) const
PUBLIC 503ea 0 TNode::GetCanSetExtensionHidden(TPropertyReference&) const
PUBLIC 50434 0 TNode::GetUserAccess(TPropertyReference&) const
PUBLIC 5047c 0 TNode::GetCopyrightString(TPropertyReference&) const
PUBLIC 5051c 0 TNode::HeapSizeDataFetched() const
PUBLIC 50546 0 TNode::GetSuggestedHeapSizes(TPropertyReference&) const
PUBLIC 505ba 0 TNode::GetHeapSizes(TPropertyReference&) const
PUBLIC 5062e 0 TNode::Compare(TNode const*, unsigned long, short (*)(long long, long long), bool&) const
PUBLIC 508cc 0 TNode::Compare(TNode const*, unsigned long, short (*)(long long, long long)) const
PUBLIC 50902 0 TNode::GetCapacity(TPropertyReference&) const
PUBLIC 5096c 0 TNode::IsiPod() const
PUBLIC 5098c 0 TNode::GetVolumeFormatString(TPropertyReference&) const
PUBLIC 50a14 0 TNode::SystemBuildVersion(TPropertyReference&) const
PUBLIC 50a5e 0 TNode::VolumeHasNoVolumeSizes() const
PUBLIC 50a82 0 TNode::VolumeIsODSDisk() const
PUBLIC 50aa2 0 TNode::VolumeEject(int*)
PUBLIC 50ac8 0 TNode::MapUserOrGroupUUIDToName(bool, __CFUUID const*, __CFString const**) const
PUBLIC 50afc 0 TNode::MapNameToUserOrGroupUUID(__CFString const*, bool, __CFUUID const**) const
PUBLIC 50b36 0 TNode::MapUserOrGroupIDToName(bool, unsigned long, TUString&) const
PUBLIC 50b6a 0 TNode::MapNameToUserOrGroupID(TUString const&, bool, unsigned long&) const
PUBLIC 50ba4 0 TNode::FollowAliasNoNetworkIO(THFSPlusRef&, bool, bool) const
PUBLIC 50c22 0 TNode::GetOldIconOrigin(TPropertyReference&) const
PUBLIC 50c8c 0 TNode::GetNetworkConnectionState(TPropertyReference&) const
PUBLIC 50cae 0 TNode::iToolsPassword(TUString const&)
PUBLIC 50df0 0 TNode::SetTimerToHandleNotifyRequest(TNode*, double)
PUBLIC 50ee8 0 TNode::SetHeapSizes(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 50f3e 0 TChildCreator::TChildCreator()
PUBLIC 5103e 0 TChildCreator::TChildCreator(__CFString const*, long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), long (TNode::*)(TChildCreator const&, NodeNameSyntaxHint const&, TNodePtr const&), TCountedPtr<TPropertyMap> const&, TNodePtr const&, unsigned long, __CFDictionary const*, __CFURL const*, TCountedPtr<TClientQuery> const&)
PUBLIC 5113e 0 TChildCreator::~TChildCreator()
PUBLIC 511aa 0 TNode::StSynchronize::~StSynchronize()
PUBLIC 511e6 0 TNode::GetCustomVolumeIconFile(FSRef&, unsigned char)
PUBLIC 5146c 0 TNode::DumpFlags() const
PUBLIC 515a6 0 TNode::EqualDisplayName(HFSUniStr255 const&) const
PUBLIC 51612 0 TNode::Compare(TNode const*, unsigned long, short (*)(unsigned long, unsigned short const*, unsigned long, unsigned short const*), bool&) const
PUBLIC 5177e 0 TNode::RequestSetPropertyTask(OpaqueNodeRequest* const&, unsigned long, unsigned long, void*)
PUBLIC 5185a 0 TNode::SetArchitecturePreference(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 51900 0 TNode::SetUserGroupID(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 519b4 0 TNode::SetOwnerID(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 51a68 0 TNode::CopyAttributes(__CFArray const*, OpaqueNodeRequest* const&)
PUBLIC 51b5a 0 TNode::CopyAttributes(__CFString const*, OpaqueNodeRequest* const&)
PUBLIC 51c44 0 TNode::CopyAttributes(__CFDictionary*, OpaqueNodeRequest* const&)
PUBLIC 51e26 0 TNode::CopyAccessRights(__CFArray const**, OpaqueNodeRequest* const&)
PUBLIC 51f3a 0 TNode::SetAccessRights(__CFArray const*, OpaqueNodeRequest* const&)
PUBLIC 52038 0 TNode::SetPermissionInfo(FSPermissionInfo*, OpaqueNodeRequest* const&)
PUBLIC 52166 0 TNode::ApplyAccessRightsWithDictionary(__CFDictionary const*)
PUBLIC 5220a 0 TNode::ReplaceAccessControlListWithDictionary(__CFDictionary const*)
PUBLIC 522ae 0 TNode::RemoveUserFromAccessControlList(__CFUUID const*)
PUBLIC 52352 0 TNode::ModifyAccessRightsWithDictionaries(__CFDictionary const*, __CFDictionary const*)
PUBLIC 523fe 0 TNode::ModifyAccessRightsForUser(__CFUUID const*, unsigned long long, unsigned long long)
PUBLIC 524be 0 TNode::CopyPermissionInfo(FSPermissionInfo*)
PUBLIC 526c4 0 TNode::CopyPermissionInfo(FSPermissionInfo*, OpaqueNodeRequest* const&)
PUBLIC 527d2 0 TNode::CopyLocationData(__CFURL const*&, OpaqueNodeRequest* const&)
PUBLIC 528f4 0 TNode::CopyClippingData(unsigned long&, __CFDictionary const*&, OpaqueNodeRequest* const&)
PUBLIC 52a24 0 TNode::CreateChildLocation(TChildCreator const&, NodeNameSyntaxHint const&, TNodePtr const&)
PUBLIC 52b1e 0 TNode::CreateChildClipping(TChildCreator const&, NodeNameSyntaxHint const&, TNodePtr const&)
PUBLIC 52c32 0 TNode::CreateChildFile(TChildCreator const&, NodeNameSyntaxHint const&, TNodePtr const&)
PUBLIC 52d10 0 TNode::GetFSRefOfOriginal(FSRef&, unsigned char) const
PUBLIC 52d8a 0 TNode::GetAEDesc(AEDesc&) const
PUBLIC 52e72 0 TNode::SetNewAliasTarget(FSRef const&)
PUBLIC 52f42 0 TNode::Dump() const
PUBLIC 53020 0 TNode::CreateChildAlias(TChildCreator const&, NodeNameSyntaxHint const&, TNodePtr const&)
PUBLIC 532be 0 TNode::GetMediaTypes(long&) const
PUBLIC 53314 0 TNode::GetServerProtocols() const
PUBLIC 53344 0 TNode::OpenScreenShareSync(TCountedPtr<TNodeTask>) const
PUBLIC 5345e 0 TNode::NWNodeUnmountCallback(__NWNode*, __CFString const*, unsigned long, NWNodeError, void*)
PUBLIC 5355e 0 TNode::SetQuery(__CFString const*, TCountedPtr<TClientQuery> const&)
PUBLIC 535e2 0 TNode::CopyMDItemIdentity() const
PUBLIC 536d4 0 TNode::SetIfNetworkODSBrowser(__NWBrowser*, __NWNode*) const
PUBLIC 5379a 0 TNode::SetIfNetworkNearbyBrowser(__NWBrowser*, __NWNode*) const
PUBLIC 53860 0 TNode::TNode(TNode*, __MDItem*)
PUBLIC 53924 0 TNode::SetIsInvisibleInSidebar(bool, bool)
PUBLIC 539ee 0 TNode::SetInvisibleInSidebar(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 53a9a 0 TNode::GetSortingGroup(TPropertyReference&) const
PUBLIC 53ade 0 TNode::GetServerUserName(TPropertyReference&) const
PUBLIC 53bb4 0 TNode::GetDeepItemCount(TPropertyReference&) const
PUBLIC 53bd6 0 TNode::GetMDQueryRef() const
PUBLIC 53d00 0 TNode::GetHitDateValue(TPropertyReference&, __CFDate const* (TNodeQuery::*)(TNodePtr const&) const) const
PUBLIC 53e6c 0 TNode::GetLastUsedDate(TPropertyReference&) const
PUBLIC 53eb0 0 TNode::OpenServerSync(TCountedPtr<TNodeTask>) const
PUBLIC 5414c 0 TNode::StPopulating::StPopulating(TNode const*, TNode::StPopulating*)
PUBLIC 541cc 0 TNode::StPopulating::~StPopulating()
PUBLIC 54246 0 TNode::ResetVolumeName()
PUBLIC 5430a 0 TNode::NotifyNameChanges() const
PUBLIC 543d4 0 TNode::Resynchronize()
PUBLIC 5448e 0 TNode::RequestFullSynchronization()
PUBLIC 545d6 0 TNode::SetNewAliasTarget(TNodePtr const&)
PUBLIC 546c6 0 TNode::GetUnresolvedNode(HFSUniStr255 const&, OpaqueIconRef*)
PUBLIC 54768 0 TNode::ComputerNameChangedCallback(__SCDynamicStore const*, __CFArray const*, void*)
PUBLIC 547e0 0 TNode::GetNetworkODSBrowser()
PUBLIC 54ab0 0 TNode::GetTrashNode()
PUBLIC 54bfc 0 SharedFoldersCallback(OpaqueSFLRef*, void*)
PUBLIC 54c3e 0 SavedSearchesCallback(OpaqueSFLRef*, void*)
PUBLIC 54c80 0 TNode::SetiDisk(TNodePtr const&, long)
PUBLIC 54dda 0 TNode::HandleiDiskChanged()
PUBLIC 54e94 0 TNode::iDiskPreferenceChangedCallback(__CFNotificationCenter*, void*, __CFString const*, void const*, __CFDictionary const*)
PUBLIC 54ecc 0 TNode::~TNode()
PUBLIC 54f94 0 TNode::RemoveVirtualNode()
PUBLIC 550f0 0 TNode::IsMountedSharepoint() const
PUBLIC 551ce 0 TNode::NetworkNodeUnmount() const
PUBLIC 55304 0 TNode::DisconnectShareSync(TCountedPtr<TNodeTask>) const
PUBLIC 554ce 0 TNode::VolumeUnmount(int*)
PUBLIC 55500 0 TNode::GetIsMountedSharepoint(TPropertyReference&) const
PUBLIC 55528 0 TNode::StSynchronize::StSynchronize(TNode*, bool, bool)
PUBLIC 556ec 0 TNode::Synchronize(OpaqueNodeRequest* const&, unsigned long)
PUBLIC 5573a 0 TNode::MountiDisk(TNodePtr&)
PUBLIC 5589e 0 TNode::iDiskChangedCallback(__CFMachPort*, void*, long, void*)
PUBLIC 5592a 0 TNode::RemoveProperty(unsigned long)
PUBLIC 55a38 0 TNode::RemovePropertyValue(unsigned long)
PUBLIC 55aac 0 TNode::UpdateSizeInfo()
PUBLIC 55d6a 0 TNode::DisconnectShare(OpaqueNodeRequest*, unsigned long) const
PUBLIC 55ec2 0 TNode::OpenServer(OpaqueNodeRequest*, unsigned long) const
PUBLIC 5601a 0 TNode::OpenScreenShare(OpaqueNodeRequest*, unsigned long) const
PUBLIC 5617e 0 TNode::RequestNetworkTask(TCountedPtr<TNodeTask> const&)
PUBLIC 56220 0 TNode::IsSnapshot() const
PUBLIC 5630e 0 TNode::SnapshotForItem(TNodePtr&) const
PUBLIC 563bc 0 TNode::CopyQueryDictionaries(__CFDictionary const**, __CFDictionary const**)
PUBLIC 566dc 0 TNode::CreateNewLockFile(TOperation&, OperationRecord*, HFSUniStr255 const&, bool, TNode*)
PUBLIC 56a7c 0 TNode::CopyOriginalPath(__CFString const**) const
PUBLIC 56be2 0 TNode::GetSavedSearchNode(TUString const&)
PUBLIC 56c7c 0 TNode::IsInHome() const
PUBLIC 56d44 0 TNode::VolumeIs(unsigned long&) const
PUBLIC 56e2c 0 TNode::SetPermissions(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 56f6c 0 TNode::Delete(TOperation*, OperationRecord*, bool, bool)
PUBLIC 57082 0 TNode::HandleNotifyRequest(__CFRunLoopTimer*, void*)
PUBLIC 57120 0 TNode::SetIndex(unsigned long)
PUBLIC 5741e 0 NetworkODSCallback(__NWBrowser*, __NWNode*, __CFString const*, unsigned long, NWBrowserError, void*)
PUBLIC 574d0 0 NetworkNearbyCallback(__NWBrowser*, __NWNode*, __CFString const*, unsigned long, NWBrowserError, void*)
PUBLIC 57582 0 TNode::GetCustomIconFile(FSRef&, unsigned char)
PUBLIC 578ae 0 TNode::RemoveCustomIcon()
PUBLIC 579ec 0 TNode::SetCustomIcon(char**)
PUBLIC 57d7a 0 TNode::SetIconRef(TPropertyReference const&, bool, OpaqueNodeRequest* const&)
PUBLIC 57f10 0 TNodePtr::operator!=(TNodePtr const&) const
PUBLIC 57f26 0 TNodePtr::operator==(TNode*) const
PUBLIC 57f3a 0 TNode::IsUnresolved() const
PUBLIC 57f4c 0 __CFString const** std::__copy_backward<true, std::random_access_iterator_tag>::copy_b<__CFString const*>(__CFString const* const*, __CFString const* const*, __CFString const**)
PUBLIC 58002 0 bool __gnu_cxx::operator!=<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >(__gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > > const&, __gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > > const&)
PUBLIC 58018 0 void std::_Destroy<__gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >, std::allocator<__CFString const*> >(__gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >, __gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >, std::allocator<__CFString const*>)
PUBLIC 580b8 0 std::vector<TNode*, std::allocator<TNode*> >::erase(__gnu_cxx::__normal_iterator<TNode**, std::vector<TNode*, std::allocator<TNode*> > >)
PUBLIC 58136 0 std::vector<__CFString const*, std::allocator<__CFString const*> >::erase(__gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >, __gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >)
PUBLIC 581b2 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::_Vector_impl::_Vector_impl(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> const&)
PUBLIC 581e6 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::swap(std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >&)
PUBLIC 58236 0 void std::__fill<true>::fill<__gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >, __CFString const*>(__gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >, __gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >, __CFString const* const&)
PUBLIC 5828e 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::_Vector_base(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> const&)
PUBLIC 58298 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::~_Vector_base()
PUBLIC 582b0 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::vector(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> const&)
PUBLIC 582ba 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::capacity() const
PUBLIC 58318 0 TNode::IsODS() const
PUBLIC 58358 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::size() const
PUBLIC 583b8 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::operator[](unsigned long)
PUBLIC 584a6 0 __CFString const** std::__copy_normal<true, false>::copy_n<__gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >, __CFString const**>(__gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >, __gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >, __CFString const**)
PUBLIC 5851e 0 TiDiskMonitor::~TiDiskMonitor()
PUBLIC 58560 0 TiDiskMonitor::TiDiskMonitor()
PUBLIC 585a2 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::_Vector_base(unsigned long, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> const&)
PUBLIC 5866a 0 TChildrenList::GetSearchCount() const
PUBLIC 58682 0 std::vector<__CFString const*, std::allocator<__CFString const*> >::_M_fill_insert(__gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >, unsigned long, __CFString const* const&)
PUBLIC 58916 0 std::vector<__CFString const*, std::allocator<__CFString const*> >::resize(unsigned long, __CFString const* const&)
PUBLIC 58988 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::vector(unsigned long, __gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >* const&, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> const&)
PUBLIC 589da 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::~vector()
PUBLIC 58bf6 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::_M_fill_insert(__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> > >, unsigned long, __gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >* const&)
PUBLIC 58e80 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<__NWNode* const, TNodePtr> >*> >::reserve(unsigned long)
PUBLIC 58fbe 0 TPropertyComparator::TPropertyComparator(unsigned long, short (*)(unsigned long, unsigned short const*, unsigned long, unsigned short const*))
PUBLIC 58fdc 0 TPropertyComparator::TPropertyComparator(unsigned long, short (*)(long long, long long))
PUBLIC 58ffa 0 TPropertyComparator::operator()(std::pair<TNodePtr, TPropertyStore> const&, std::pair<TNodePtr, TPropertyStore> const&) const
PUBLIC 5906c 0 TNodeIterator::AtIndex(unsigned long)
PUBLIC 590bc 0 TNodeIterator::~TNodeIterator()
PUBLIC 590de 0 TNodeIterator::TNodeIterator(TNodePtr const&, short (*)(unsigned long, unsigned short const*, unsigned long, unsigned short const*), short (*)(long long, long long), unsigned long, bool)
PUBLIC 593ac 0 THFSPlusCatalog::GetTrashNode() const
PUBLIC 593f6 0 std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::end()
PUBLIC 59402 0 std::pair<TNodePtr, TPropertyStore> const& std::__median<std::pair<TNodePtr, TPropertyStore>, TPropertyComparator>(std::pair<TNodePtr, TPropertyStore> const&, std::pair<TNodePtr, TPropertyStore> const&, std::pair<TNodePtr, TPropertyStore> const&, TPropertyComparator)
PUBLIC 594a2 0 bool __gnu_cxx::operator==<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > > const&, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > > const&)
PUBLIC 594b8 0 bool __gnu_cxx::operator< <std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > > const&, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > > const&)
PUBLIC 594e0 0 std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::operator[](unsigned long)
PUBLIC 594f0 0 std::allocator<std::pair<TNodePtr, TPropertyStore> >::allocator()
PUBLIC 594f6 0 std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::vector(std::allocator<std::pair<TNodePtr, TPropertyStore> > const&)
PUBLIC 59542 0 std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > >::~vector()
PUBLIC 59588 0 void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, std::pair<TNodePtr, TPropertyStore>, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, std::pair<TNodePtr, TPropertyStore>, TPropertyComparator)
PUBLIC 59606 0 void std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 59682 0 void std::swap<std::pair<TNodePtr, TPropertyStore> >(std::pair<TNodePtr, TPropertyStore>&, std::pair<TNodePtr, TPropertyStore>&)
PUBLIC 596f4 0 void std::__iter_swap<true>::iter_swap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > > >(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >)
PUBLIC 59786 0 void std::__push_heap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, int, std::pair<TNodePtr, TPropertyStore>, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, int, int, std::pair<TNodePtr, TPropertyStore>, TPropertyComparator)
PUBLIC 59832 0 void std::__adjust_heap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, int, std::pair<TNodePtr, TPropertyStore>, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, int, int, std::pair<TNodePtr, TPropertyStore>, TPropertyComparator)
PUBLIC 5994e 0 void std::make_heap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 59a14 0 void std::__pop_heap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, std::pair<TNodePtr, TPropertyStore>, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, std::pair<TNodePtr, TPropertyStore>, TPropertyComparator)
PUBLIC 59aaa 0 void std::pop_heap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 59b0a 0 void std::sort_heap<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 59b62 0 void std::partial_sort<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 59c66 0 void std::__introsort_loop<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, int, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, int, TPropertyComparator)
PUBLIC 59dc8 0 std::pair<TNodePtr, TPropertyStore>* std::__copy_backward<false, std::random_access_iterator_tag>::copy_b<std::pair<TNodePtr, TPropertyStore>*, std::pair<TNodePtr, TPropertyStore>*>(std::pair<TNodePtr, TPropertyStore>*, std::pair<TNodePtr, TPropertyStore>*, std::pair<TNodePtr, TPropertyStore>*)
PUBLIC 59e30 0 void std::__insertion_sort<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 59f4c 0 void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 5a000 0 void std::sort<__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator>(__gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, __gnu_cxx::__normal_iterator<std::pair<TNodePtr, TPropertyStore>*, std::vector<std::pair<TNodePtr, TPropertyStore>, std::allocator<std::pair<TNodePtr, TPropertyStore> > > >, TPropertyComparator)
PUBLIC 5a0a2 0 TOperation::GetChildPort(unsigned int*, bool)
PUBLIC 5a0e0 0 TOperation::PerformOperation(OperationRecord*)
PUBLIC 5a0e8 0 TOperation::UpdateStatusItemsCompletedIncrementally(long long, long long)
PUBLIC 5a166 0 TOperation::Cleanup(OperationRecord*)
PUBLIC 5a16c 0 TOperation::NeedsAuthentication(OperationRecord*)
PUBLIC 5a174 0 TOperation::DeleteLockFilesIfNeeded(OperationRecord*)
PUBLIC 5a17a 0 TOperation::ResolveConflict(OperationRecord*)
PUBLIC 5a182 0 TOperation::SetCurrentConflict(unsigned long)
PUBLIC 5a1a2 0 TOperation::CheckDestination(OperationRecord*)
PUBLIC 5a1aa 0 TOperation::LogOperationName(OperationRecord*) const
PUBLIC 5a1bc 0 TOperation::UpdateDestinationSpaceNeeds(long long, long long, long long, long long, long long, unsigned long long, unsigned long, bool, bool, long)
PUBLIC 5a284 0 TTrashOperation::NeedsAuthentication(OperationRecord*)
PUBLIC 5a28e 0 GetRequestedOperation(unsigned long long)
PUBLIC 5a2a0 0 SetOwner()
PUBLIC 5a2a6 0 TDeleteImmediatelyOperation::ResolveConflict(OperationRecord*)
PUBLIC 5a2b8 0 TDeleteImmediatelyOperation::NeedsSizeCheck() const
PUBLIC 5a2c2 0 TDeleteImmediatelyOperation::LogOperationName(OperationRecord*) const
PUBLIC 5a2d4 0 TCopyPermissionsOperation::PerformOperation(OperationRecord*)
PUBLIC 5a2dc 0 TCopyPermissionsOperation::NeedsAuthentication(OperationRecord*)
PUBLIC 5a2e6 0 TCopyPermissionsOperation::LogOperationName(OperationRecord*) const
PUBLIC 5a2f8 0 TDeleteBackupSnapShotOperation::ResolveConflict(OperationRecord*)
PUBLIC 5a30a 0 TDeleteBackupSnapShotOperation::NeedsAuthentication(OperationRecord*)
PUBLIC 5a314 0 TDeleteBackupSnapShotOperation::NeedsSizeCheck() const
PUBLIC 5a31e 0 TDeleteBackupSnapShotOperation::Cleanup(OperationRecord*)
PUBLIC 5a3a6 0 TDeleteBackupSnapShotOperation::LogOperationName(OperationRecord*) const
PUBLIC 5a3b8 0 TOperation::ReportErrorFromUnprotectedContext(OperationErrorRecord&)
PUBLIC 5a448 0 ReportOperationError(unsigned long long, OperationErrorRecord&)
PUBLIC 5a45e 0 SetOperationCurrentTarget(unsigned long long, unsigned long long)
PUBLIC 5a4b0 0 TOperation::Cancel()
PUBLIC 5a4c0 0 FlushRootLock(unsigned long long, FSRef const&, unsigned long long)
PUBLIC 5a576 0 TCopyMoveOperation::PerformMoveInSameParent(OperationRecord*)
PUBLIC 5a60c 0 TDeleteImmediatelyOperation::NeedsAuthentication(OperationRecord*)
PUBLIC 5a640 0 GetRootLock(FSRef const&, unsigned long long&)
PUBLIC 5a6d6 0 TConflictIterator::First() const
PUBLIC 5a716 0 ConflictIteratorFirst(OpaqueOperationData*)
PUBLIC 5a76c 0 TOperation::KillLocumIfNotInFlight()
PUBLIC 5a7e2 0 TCopyMoveOperation::AdjustIfInSidebar(TNodePtr const&, TNodePtr const&)
PUBLIC 5a894 0 TOperation::~TOperation()
PUBLIC 5aa22 0 TOperation::ReportError(OperationErrorRecord&)
PUBLIC 5aabe 0 TOperation::ReportErrorForNode(long, TNodePtr, long)
PUBLIC 5ab5e 0 TOperation::ReportErrorNoThrow(OperationErrorRecord&)
PUBLIC 5abe8 0 TOperation::TOperation()
PUBLIC 5adbe 0 TOperation::TOperation()
PUBLIC 5adc8 0 TDeleteBackupSnapShotOperation::~TDeleteBackupSnapShotOperation()
PUBLIC 5adfc 0 TDeleteBackupSnapShotOperation::~TDeleteBackupSnapShotOperation()
PUBLIC 5ae1a 0 TDeleteBackupSnapShotOperation::~TDeleteBackupSnapShotOperation()
PUBLIC 5ae24 0 TDeleteBackupSnapShotOperation::TDeleteBackupSnapShotOperation(OperationSelector const&, long, __CFString const*, __CFURL const*)
PUBLIC 5ae70 0 TDeleteBackupSnapShotOperation::TDeleteBackupSnapShotOperation(OperationSelector const&, long, __CFString const*, __CFURL const*)
PUBLIC 5ae7a 0 TCopyPermissionsOperation::~TCopyPermissionsOperation()
PUBLIC 5aeae 0 TCopyPermissionsOperation::~TCopyPermissionsOperation()
PUBLIC 5aecc 0 TCopyPermissionsOperation::~TCopyPermissionsOperation()
PUBLIC 5aed6 0 TCopyPermissionsOperation::TCopyPermissionsOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 5af18 0 TCopyPermissionsOperation::TCopyPermissionsOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 5af22 0 TDeleteImmediatelyOperation::~TDeleteImmediatelyOperation()
PUBLIC 5af56 0 TDeleteImmediatelyOperation::~TDeleteImmediatelyOperation()
PUBLIC 5af74 0 TDeleteImmediatelyOperation::~TDeleteImmediatelyOperation()
PUBLIC 5af7e 0 TDeleteImmediatelyOperation::TDeleteImmediatelyOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 5afc0 0 TDeleteImmediatelyOperation::TDeleteImmediatelyOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 5afca 0 TCopyMoveOperation::~TCopyMoveOperation()
PUBLIC 5b04e 0 TCopyMoveOperation::TCopyMoveOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 5b0a4 0 TTrashOperation::~TTrashOperation()
PUBLIC 5b0c2 0 TTrashOperation::TTrashOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 5b126 0 TOperation::~TOperation()
PUBLIC 5b130 0 TOperation::TransformOperations()
PUBLIC 5b13a 0 TTrashOperation::Cancel()
PUBLIC 5b1ce 0 TOperation::RenameAndMove(OperationRecord*)
PUBLIC 5b4d4 0 TCopyMoveOperation::HandleOverwrite(OperationRecord*)
PUBLIC 5b878 0 TCopyMoveOperation::HandleRenameConflictedItem(OperationRecord*)
PUBLIC 5bb18 0 TCopyMoveOperation::PerformRemoteCopyOrForceMove(OperationRecord*)
PUBLIC 5bf5c 0 TDeleteImmediatelyOperation::PerformOperation(OperationRecord*)
PUBLIC 5c070 0 TDeleteImmediatelyOperation::Cleanup(OperationRecord*)
PUBLIC 5c0f8 0 TCopyPermissionsOperation::ResolveConflict(OperationRecord*)
PUBLIC 5c3a8 0 TDeleteBackupSnapShotOperation::PerformOperation(OperationRecord*)
PUBLIC 5c5e4 0 TOperation::SetItemCount(unsigned long)
PUBLIC 5c5f6 0 std::pair<TNodePtr, TNodePtr>::operator=(std::pair<TNodePtr, TNodePtr> const&)
PUBLIC 5c630 0 std::pair<TNodePtr, TNodePtr>* std::__copy_backward<false, std::random_access_iterator_tag>::copy_b<std::pair<TNodePtr, TNodePtr>*, std::pair<TNodePtr, TNodePtr>*>(std::pair<TNodePtr, TNodePtr>*, std::pair<TNodePtr, TNodePtr>*, std::pair<TNodePtr, TNodePtr>*)
PUBLIC 5c66a 0 TOperation::CopyProperties(TNodePtr const&, TCountedPtr<TPropertyMap> const&)
PUBLIC 5c6a4 0 std::allocator<OperationRecord*>::allocator<std::_List_node<OperationRecord*> >(std::allocator<std::_List_node<OperationRecord*> > const&)
PUBLIC 5c6ec 0 TNode::IsInUse() const
PUBLIC 5c736 0 TPathName::FullPath(TUString&, unsigned short) const
PUBLIC 5c82c 0 TPathName::AsOldStyleFullPath(TUString&) const
PUBLIC 5c84e 0 TPathName::~TPathName()
PUBLIC 5c886 0 TPathName::~TPathName()
PUBLIC 5c8a6 0 TPathName::TPathName(TUString const&, unsigned short)
PUBLIC 5cadc 0 TPathName::TPathName()
PUBLIC 5cb26 0 TPathName::TPathName(TNodePtr const&)
PUBLIC 5ccfa 0 TPathName::TPathName(TNodePtr const&)
PUBLIC 5cd04 0 std::iterator_traits<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*> >::difference_type std::distance<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>)
PUBLIC 5cd4e 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>::operator+=(int)
PUBLIC 5cda4 0 void std::advance<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, int>(std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>&, int)
PUBLIC 5cdae 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>::operator+=(int)
PUBLIC 5ce04 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>::operator-(int) const
PUBLIC 5ce5c 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>::operator+(int) const
PUBLIC 5ceb2 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_new_elements_at_front(unsigned long)
PUBLIC 5cef6 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_reserve_elements_at_front(unsigned long)
PUBLIC 5cf4c 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_new_elements_at_back(unsigned long)
PUBLIC 5cf88 0 std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_reserve_elements_at_back(unsigned long)
PUBLIC 5cfde 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__copy_backward<false, std::random_access_iterator_tag>::copy_b<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 5d0ac 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__copy_backward_aux<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 5d130 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__copy_backward_normal<false, false>::copy_b_n<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 5d1b4 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::copy_backward<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 5d238 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__uninitialized_copy_aux<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, __false_type)
PUBLIC 5d2e0 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::uninitialized_copy<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 5d368 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__uninitialized_copy_a<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, HFSUniStr255>(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::allocator<HFSUniStr255>)
PUBLIC 5d3ec 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__uninitialized_copy_aux<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, __false_type)
PUBLIC 5d49a 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::uninitialized_copy<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 5d516 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__uninitialized_copy_a<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, HFSUniStr255>(std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::allocator<HFSUniStr255>)
PUBLIC 5d58e 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__copy<false, std::random_access_iterator_tag>::copy<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 5d648 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__copy_aux<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 5d6c0 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__copy_normal<false, false>::copy_n<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 5d738 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__uninitialized_copy_copy<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::allocator<HFSUniStr255> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::allocator<HFSUniStr255>)
PUBLIC 5d858 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::__uninitialized_copy_copy<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::allocator<HFSUniStr255> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::allocator<HFSUniStr255>)
PUBLIC 5d972 0 std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> std::copy<std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>)
PUBLIC 5d9f6 0 void std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_insert_aux<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, unsigned long)
PUBLIC 5e352 0 void std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_range_insert_aux<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::forward_iterator_tag)
PUBLIC 5e572 0 void std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::_M_insert_dispatch<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, __false_type)
PUBLIC 5e5e2 0 void std::deque<HFSUniStr255, std::allocator<HFSUniStr255> >::insert<std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*> >(std::_Deque_iterator<HFSUniStr255, HFSUniStr255&, HFSUniStr255*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>, std::_Deque_iterator<HFSUniStr255, HFSUniStr255 const&, HFSUniStr255 const*>)
PUBLIC 5e652 0 GetListPropertyAsPoint
PUBLIC 5e65c 0 GetListPropertyAsDateTime
PUBLIC 5e666 0 GetListPropertyAsRGBColor
PUBLIC 5e670 0 SetListPropertyAsPoint
PUBLIC 5e67a 0 SetListPropertyAsDateTime
PUBLIC 5e684 0 SetListPropertyAsRGBColor
PUBLIC 5e68e 0 NodePropertyListGet(OpaquePropertyListRef*, unsigned long, TPropertyReference&)
PUBLIC 5e6da 0 NodePropertyListGetAsBoolean
PUBLIC 5e712 0 GetListPropertyAsBoolean
PUBLIC 5e71c 0 NodePropertyListGetAsByte
PUBLIC 5e754 0 GetListPropertyAsByte
PUBLIC 5e75e 0 NodePropertyListGetAsOSType
PUBLIC 5e796 0 GetListPropertyAsOSType
PUBLIC 5e7a0 0 NodePropertyListGetAsInt16
PUBLIC 5e7d8 0 GetListPropertyAsInt16
PUBLIC 5e7e2 0 NodePropertyListGetAsInt32
PUBLIC 5e81a 0 GetListPropertyAsInt32
PUBLIC 5e824 0 NodePropertyListGetAsInt64
PUBLIC 5e85c 0 GetListPropertyAsInt64
PUBLIC 5e866 0 NodePropertyListGetAsIconRef
PUBLIC 5e89e 0 GetListPropertyAsIconRef
PUBLIC 5e8a8 0 NodePropertyListGetAsUTCDateTime
PUBLIC 5e8e0 0 GetListPropertyAsUTCDateTime
PUBLIC 5e8ea 0 NodePropertyListGetAsString
PUBLIC 5e956 0 GetListPropertyAsStringNew
PUBLIC 5e960 0 NodePropertyListGetAsData
PUBLIC 5e9ce 0 GetListPropertyAsDataNew
PUBLIC 5e9d8 0 NodePropertyListSetAsData
PUBLIC 5ea16 0 SetListPropertyAsDataNew
PUBLIC 5ea20 0 NodePropertyListSetAsUTCDateTime
PUBLIC 5ea4e 0 SetListPropertyAsUTCDateTime
PUBLIC 5ea58 0 NodePropertyListSetAsOSType
PUBLIC 5ea86 0 SetListPropertyAsOSType
PUBLIC 5ea90 0 NodePropertyListSetAsIconRef
PUBLIC 5eabe 0 SetListPropertyAsIconRef
PUBLIC 5eac8 0 NodePropertyListSetAsInt64
PUBLIC 5eb02 0 SetListPropertyAsInt64
PUBLIC 5eb0c 0 NodePropertyListSetAsInt32
PUBLIC 5eb3a 0 SetListPropertyAsInt32
PUBLIC 5eb44 0 NodePropertyListSetAsInt16
PUBLIC 5eb7a 0 SetListPropertyAsInt16
PUBLIC 5eb8a 0 NodePropertyListSetAsByte
PUBLIC 5ebbe 0 SetListPropertyAsByte
PUBLIC 5ebce 0 NodePropertyListSetAsBoolean
PUBLIC 5ec04 0 SetListPropertyAsBoolean
PUBLIC 5ec14 0 RemoveListPropertyValue
PUBLIC 5ec48 0 THashTable<unsigned long, TPropertyValue>::erase(THashTable<unsigned long, TPropertyValue>::iterator const&)
PUBLIC 5ec7c 0 THashTable<unsigned long, TPropertyValue>::find(unsigned long const&)
PUBLIC 5ed42 0 THashTable<unsigned long, TPropertyValue>::erase(unsigned long const&)
PUBLIC 5ed88 0 NodeDiagnosticLogging
PUBLIC 5ed8e 0 NodeSetDiagnosticTarget
PUBLIC 5ed94 0 RefName
PUBLIC 5edfa 0 NodeFlags
PUBLIC 5ee28 0 NodeDump
PUBLIC 5ee56 0 SleepCallback(void*, unsigned int, unsigned int, void*)
PUBLIC 5eec4 0 RegisterForVolumeIconChanges()
PUBLIC 5ef24 0 NodeDefaultSearchCount
PUBLIC 5ef2e 0 NodeGetReferenceCount
PUBLIC 5ef36 0 NodeGetParentReferenceCount
PUBLIC 5ef3e 0 NodeEventCopyEvent
PUBLIC 5ef5c 0 _NodeSizerWithSkipProc
PUBLIC 5f15e 0 _NodeSetMetaDataForBackup
PUBLIC 5f342 0 _NodeCopyPermissions
PUBLIC 5f3aa 0 _NodeContextSetOptions
PUBLIC 5f3da 0 NodeIteratorAtIndex
PUBLIC 5f43e 0 _NodeCopyOpenFolder
PUBLIC 5f4fa 0 DisplayNameChangedCallback(__CFNotificationCenter*, void*, __CFString const*, void const*, __CFDictionary const*)
PUBLIC 5f556 0 NodeContextFlush
PUBLIC 5f596 0 NodeIsDesktop
PUBLIC 5f5c8 0 NodeUserIsOwner
PUBLIC 5f5fa 0 NodeIsLocation
PUBLIC 5f62c 0 NodeIsClipping
PUBLIC 5f65e 0 NodeIsSymLink
PUBLIC 5f690 0 VolumeHasNoVolumeSizes
PUBLIC 5f6c2 0 VolumeIs
PUBLIC 5f736 0 NodeCopyPropertyAsCFData
PUBLIC 5f814 0 NodeCopyPropertyAsCFString
PUBLIC 5f8f4 0 NodeGetPropertyAsCFAbsoluteTime
PUBLIC 5f956 0 NodeGetPropertyAsData
PUBLIC 5f9ca 0 NodeGetPropertyAsString
PUBLIC 5fa3e 0 NodeGetPropertyAsOSType
PUBLIC 5fa7c 0 NodeGetPropertyAsIconRef
PUBLIC 5faba 0 NodeGetPropertyAsInt64
PUBLIC 5faf8 0 NodeGetPropertyAsInt32
PUBLIC 5fb36 0 NodeGetPropertyAsInt16
PUBLIC 5fb74 0 NodeGetPropertyAsByte
PUBLIC 5fbb2 0 NodeGetPropertyAsBoolean
PUBLIC 5fc00 0 NodeSetPropertyAsCFData
PUBLIC 5fc98 0 NodeSetPropertyAsCFString
PUBLIC 5fd3c 0 NodeSetPropertyAsCFAbsoluteTime
PUBLIC 5fd8e 0 NodeSetPropertyAsData
PUBLIC 5fdd2 0 NodeSetPropertyAsString
PUBLIC 5fe16 0 NodeSetPropertyAsUTCDateTime
PUBLIC 5fe4c 0 NodeSetPropertyAsOSType
PUBLIC 5fe82 0 NodeSetPropertyAsIconRef
PUBLIC 5feb8 0 NodeSetPropertyAsInt64
PUBLIC 5fefa 0 NodeSetPropertyAsInt32
PUBLIC 5ff30 0 NodeSetPropertyAsInt16
PUBLIC 5ff6c 0 NodeSetPropertyAsByte
PUBLIC 5ffa8 0 NodeSetPropertyAsBoolean
PUBLIC 5ffe6 0 NodeSetAccessRights
PUBLIC 60064 0 NodeSetPermissionInfo
PUBLIC 600ec 0 NodeGetChildrenCount
PUBLIC 6018c 0 NodeNewNumberSortedIterator
PUBLIC 601ca 0 NodeNewStringSortedIterator
PUBLIC 60208 0 NodeCreateNewVirtualFolder
PUBLIC 6030e 0 NodeCreateNewVirtualNode
PUBLIC 60412 0 NodeOperateWithAuthorizationData
PUBLIC 6048c 0 NodeRequestPermissionsOperation
PUBLIC 60524 0 _FSOperation
PUBLIC 6069e 0 _FSBackupOperation
PUBLIC 6080c 0 NodeCopyOriginalPath
PUBLIC 60892 0 NodeOpenScreenShare
PUBLIC 608fa 0 NodeOpenServer
PUBLIC 60962 0 NodeDisconnectShare
PUBLIC 609ca 0 NodeGetServerProtocols
PUBLIC 60a28 0 NodeGetMediaTypes
PUBLIC 60a98 0 NodeCopyDefaultSearch
PUBLIC 60b16 0 NodeCreateVirtualChildAtIndexIn
PUBLIC 60c0e 0 NodeSetVirtualNodeIndex
PUBLIC 60c70 0 NodeRemoveVirtualNode
PUBLIC 60cca 0 NodeVirtualChildLocked
PUBLIC 60d28 0 NodeCreateNewNodeQuery
PUBLIC 60dd6 0 NodeCopyNodeQueryRef
PUBLIC 60e22 0 NodeQueryGetQueryString
PUBLIC 60e70 0 NodeQueryGetSortingAttrs
PUBLIC 60ebe 0 NodeQueryGetComparator
PUBLIC 60f0c 0 NodeQueryGetSortContext
PUBLIC 60f80 0 NodeQueryGetScopeDirectories
PUBLIC 60fce 0 NodeQueryGetScopeOptions
PUBLIC 6101c 0 NodeSetNewQuery
PUBLIC 610d6 0 NodeCopyMDItemIdentity
PUBLIC 61134 0 NodeCopyQueryDictionaries
PUBLIC 611b4 0 NodeGetMDQueryRef
PUBLIC 61212 0 NodeCopyMDQueryRef
PUBLIC 6127c 0 NodeSynchronize
PUBLIC 612dc 0 RemoveNodePropertyValue
PUBLIC 6133e 0 NodeCopyAttributes
PUBLIC 613ba 0 NodeCopyAttributesWithSelector
PUBLIC 61436 0 NodeCopyAccessRights
PUBLIC 614b2 0 NodeCopyPermissionInfo
PUBLIC 6152e 0 NodeCopyAttribute
PUBLIC 615be 0 NodeCopyLocationData
PUBLIC 6163a 0 NodeCopyClippingData
PUBLIC 616ca 0 _NodeNumberCompareWithError
PUBLIC 61778 0 NodeNumberCompare
PUBLIC 617aa 0 NodeRequestSynchronization
PUBLIC 617f0 0 NodeCopyUserOrGroupUUIDToName
PUBLIC 6187c 0 NodeMapNameToUserOrGroupUUID
PUBLIC 61908 0 NodeCopyUserOrGroupIDToName
PUBLIC 619c4 0 NodeMapNameToUserOrGroupID
PUBLIC 61a78 0 GetNodeDataAsURL
PUBLIC 61af0 0 NodeCopyChangeNotifier
PUBLIC 61b3c 0 _ReleasePropertyStore
PUBLIC 61b96 0 _NodeSetPropertyListForRef
PUBLIC 61cbe 0 NodeCancelOperation
PUBLIC 61d20 0 NodeModifyAccessRightsForUser
PUBLIC 61db6 0 NodeModifyAccessRightsWithDictionaries
PUBLIC 61e1e 0 NodeRemoveUserFromAccessControlList
PUBLIC 61e80 0 NodeReplaceAccessControlListWithDictionary
PUBLIC 61ee2 0 NodeApplyAccessRightsWithDictionary
PUBLIC 61f44 0 _NodeSetInterCopyDelayInSeconds
PUBLIC 61f92 0 _NodeGetUnbadgedIconRef
PUBLIC 62006 0 NodeCopyTrash
PUBLIC 620d6 0 NodeIsTrashEmpty
PUBLIC 62216 0 _NodeSetSpatialDataBulk
PUBLIC 6239c 0 _NodeCreateAliasFile
PUBLIC 6246e 0 _NodeCopyPropertyListForRef
PUBLIC 62654 0 NodeName
PUBLIC 626f0 0 _NodeSetCommentForRef
PUBLIC 629b6 0 _NodeCopyProperties
PUBLIC 62abe 0 NodeEventCopyResolvedParent
PUBLIC 62b9c 0 NodeEventGetSuboperation
PUBLIC 62c1c 0 NodeEventGetString
PUBLIC 62c8c 0 NodeEventGetAccessRightsArray
PUBLIC 62cf6 0 NodeEventGetModifiers
PUBLIC 62d4c 0 NodeEventGetTask
PUBLIC 62ddc 0 NodeEventGetLocationData
PUBLIC 62e46 0 NodeEventGetClippingData
PUBLIC 62ec2 0 NodeVolumeEject
PUBLIC 6306e 0 NodeVolumeUnmount
PUBLIC 63232 0 NodeCreateNewFile
PUBLIC 6332c 0 NodeCreateNewClipping
PUBLIC 63424 0 NodeCreateNewLocation
PUBLIC 6351c 0 NodeCreateNewAlias
PUBLIC 63624 0 ValidateNodeTask(OpaqueNodeTask*)
PUBLIC 6364a 0 NodeTaskGetType
PUBLIC 636ae 0 NodeTaskGetNode
PUBLIC 63752 0 NodeTaskGetStatus
PUBLIC 637bc 0 NodeTaskGetProperty
PUBLIC 63816 0 NodeTaskGetPropertyList
PUBLIC 638ca 0 NodeTaskCancel
PUBLIC 63934 0 NodeCopyFromFSRef
PUBLIC 63aa0 0 NodeAliasSetTarget
PUBLIC 63c60 0 NodeCreateNewVirtualChildAtIndex
PUBLIC 63eb2 0 NodeSetVirtualChildIndex
PUBLIC 6404c 0 TMountPointList::GetVolumeParent(THFSPlusCatalog const*, TNodePtr&)
PUBLIC 64056 0 TMountPointList::AllowRootStoreCreation()
PUBLIC 64068 0 TMountPointList::RequestFullSynchronization(short)
PUBLIC 640b4 0 TMountPointList::IsMounted(TNodePtr const&)
PUBLIC 640e0 0 TMountPointList::VolumeIconChangedCallback(__CFNotificationCenter*, void*, __CFString const*, void const*, __CFDictionary const*)
PUBLIC 64216 0 TMountPointList::AddVolume(short, bool)
PUBLIC 64604 0 TMountPointList::HasPersistentStores(TFSInfo const&, TNode::StPopulating*, bool)
PUBLIC 646dc 0 TMountPointList::HasPersistentStores(THFSPlusRef const&, TNode::StPopulating*, bool)
PUBLIC 647bc 0 TMountPointList::VolumeType(short)
PUBLIC 6481a 0 TMountPointList::ResetVolumeName(short)
PUBLIC 648f4 0 short* std::__copy_backward<true, std::random_access_iterator_tag>::copy_b<short>(short const*, short const*, short*)
PUBLIC 64968 0 TNodeEvent::GetModifiers() const
PUBLIC 64984 0 TNodeEvent::GetInternalClientNotifier()
PUBLIC 64be0 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, unsigned long, TCountedPtr<TNotifier> const&, bool, long)
PUBLIC 64cea 0 TNodeEvent::TNodeEvent(unsigned long, OperationErrorRecord*, OperationIterator*, OperationMonitor*, TCountedPtr<TNotifier> const&, unsigned long)
PUBLIC 64e0e 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, __CFDictionary const*, __CFString const*)
PUBLIC 64f3e 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, __CFArray const*)
PUBLIC 65062 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, __CFArray const*)
PUBLIC 6506c 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 65164 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, __CFURL const*, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 6526c 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, __CFURL const*, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 65276 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, unsigned long, __CFDictionary const*, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 65384 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, unsigned long, __CFDictionary const*, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 6538e 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, void*, TCountedPtr<TNotifier> const&, bool)
PUBLIC 6549a 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, AliasRecord**, long, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 655c4 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, FSPermissionInfo*)
PUBLIC 656e2 0 TNodeEvent::TNodeEvent(unsigned long, TNodePtr const&, FSPermissionInfo*)
PUBLIC 656ec 0 TNodeThread::~TNodeThread()
PUBLIC 65702 0 TNodeThread::~TNodeThread()
PUBLIC 65718 0 TFSNotificationTask::~TFSNotificationTask()
PUBLIC 6572e 0 TFSNotificationTask::~TFSNotificationTask()
PUBLIC 6574c 0 TSystemNotificationTask::~TSystemNotificationTask()
PUBLIC 65762 0 TSystemNotificationTask::~TSystemNotificationTask()
PUBLIC 65780 0 TFSEventsNotificationTask::~TFSEventsNotificationTask()
PUBLIC 65796 0 TFSEventsNotificationTask::~TFSEventsNotificationTask()
PUBLIC 657b4 0 TNodeSyncTask::HandleInternalComputerNameChanged(TCountedPtr<TNodeEvent> const&, TNodePtr const&)
PUBLIC 65802 0 TNodeSyncTask::HandleInternalVolumeDeleted(TCountedPtr<TNodeEvent> const&, TNodePtr const&)
PUBLIC 6581e 0 TNodeSyncTask::HandleInternalRefetchHome(TCountedPtr<TNodeEvent> const&, TNodePtr const&)
PUBLIC 6585c 0 TNodeSyncTask::TNodeSyncTask()
PUBLIC 6589a 0 TNodeSyncTask::HandleInternalUnsubscribeWithKQueue(TCountedPtr<TNodeEvent> const&, TNodePtr const&)
PUBLIC 659d4 0 TNodeSyncTask::~TNodeSyncTask()
PUBLIC 65a60 0 TNodeSyncTask::~TNodeSyncTask()
PUBLIC 65a6a 0 TNodeOpenSyncTask::TNodeOpenSyncTask(TNodePtr const&, TCountedPtr<TNodeTask> const&)
PUBLIC 65ae4 0 TNodeOpenSyncTask::~TNodeOpenSyncTask()
PUBLIC 65ba6 0 TNodeOpenSyncTask::~TNodeOpenSyncTask()
PUBLIC 65bb0 0 TNodeSyncTask::HandleInternalSubscribeWithKQueue(TCountedPtr<TNodeEvent> const&, TNodePtr const&)
PUBLIC 65dd2 0 TNodeOperationTask::~TNodeOperationTask()
PUBLIC 65df0 0 TNodeOperationTask::~TNodeOperationTask()
PUBLIC 65dfc 0 TNodeOperationTask::PerformOperation(OperationRecord*)
PUBLIC 65e04 0 TNodeOperationTask::AllowSleep()
PUBLIC 65e1c 0 TNodeOperationTask::Cancel()
PUBLIC 65e30 0 TNodeOperationTask::RequestPermissionsOperation(TCountedPtr<TPermissionsRequest> const&)
PUBLIC 65e3a 0 TNodeOperationTask::TNodeOperationTask(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 66026 0 OpaqueOperationRef** std::__copy_backward<true, std::random_access_iterator_tag>::copy_b<OpaqueOperationRef*>(OpaqueOperationRef* const*, OpaqueOperationRef* const*, OpaqueOperationRef**)
PUBLIC 660f2 0 TFolderSizeTask::TFolderSizeTask(THFSPlusCatalog*)
PUBLIC 6614a 0 TFolderSizeTask::~TFolderSizeTask()
PUBLIC 66182 0 TFolderSizeTask::~TFolderSizeTask()
PUBLIC 6618c 0 TFolderSizeTask::CancelTask()
PUBLIC 66198 0 TPropertyTask::TPropertyTask(THFSPlusCatalog*, bool)
PUBLIC 661fe 0 TPropertyTask::TPropertyTask(THFSPlusCatalog*, bool)
PUBLIC 66208 0 TPropertyTask::~TPropertyTask()
PUBLIC 66240 0 TPropertyTask::~TPropertyTask()
PUBLIC 6624a 0 TPropertyTask::HandleSetVirtualIndex(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 6626a 0 TPropertyTask::HandleSetAccessRightsArray(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 66292 0 TPropertyTask::HandleVolumeUnmountRequest(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 662c2 0 TPropertyTask::HandleFetchNodeRequest(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 66390 0 TPropertyTask::HandleStoreProperty(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 668e0 0 TPropertyTask::HandleVolumeEjectRequest(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 66910 0 TPropertyTask::HandleSetVirtualChildAtIndex(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 669b8 0 TPropertyTask::HandleInternalGetFolderRequest(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 66a0e 0 TPropertyTask::HandleSetPermissionInfo(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 66a4c 0 TPropertyTask::HandleCreateChild(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 66a9e 0 TPropertyTask::HandleFetchAttribute(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 66ee8 0 TPropertyTask::HandleFetchAccessRightsArray(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 66f90 0 TPropertyTask::HandleFetchPermisionInfo(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 6701e 0 TNodeTask::TNodeTask()
PUBLIC 67166 0 TNodeTask::TNodeTask(TCountedPtr<TNotifier> const&)
PUBLIC 672c6 0 TNodeTask::SetRequest(TNodePtr const&, unsigned long, unsigned long, void*)
PUBLIC 673a4 0 TNodeTask::SetRequest(TNodePtr const&, unsigned long, __CFArray const*)
PUBLIC 674ae 0 TNodeTask::SetRequest(TNodePtr const&, __CFString const*)
PUBLIC 6759c 0 TNodeTask::SetRequest(TNodePtr const&, unsigned long, TChildCreator const&, TNodePtr)
PUBLIC 676a4 0 TNodeTask::SetRequest(TNodePtr const&, FSRef const*)
PUBLIC 677e4 0 TNodeTask::SetRequest(TNodePtr const&, TUString const&, unsigned long)
PUBLIC 6790a 0 TNodeTask::SetRequest(TNodePtr const&, __CFURL const*)
PUBLIC 67a32 0 TNodeTask::SetRequest(TNodePtr const&, TNodePtr const&)
PUBLIC 67b28 0 TNodeTask::SetRequest(TNodePtr const&, TNodePtr const&, unsigned long)
PUBLIC 67c1e 0 TNodeTask::SetRequest(TNodePtr const&, unsigned long, unsigned long, bool)
PUBLIC 67d2c 0 TNodeTask::SetRequest(TNodePtr const&, unsigned long, FSPermissionInfo*)
PUBLIC 67e12 0 TPropertyTask::HandleOpenServerRequest(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 67e60 0 TNodeRequest::TNodeRequest(TClientChangeNotifier const*)
PUBLIC 67f5c 0 TPropertyTask::CancelTask()
PUBLIC 68004 0 TPropertyTask::HandleDisconnectShareRequest(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 68052 0 TPropertyTask::HandleOpenScreenShareRequest(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 680a0 0 TPropertyTask::HandleFetchLocationData(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 6817a 0 TPropertyTask::HandleFetchClippingData(TCountedPtr<TNodeTask> const&, TNodePtr const&)
PUBLIC 6826c 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > > >::allocator<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >(std::allocator<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > > const&)
PUBLIC 68272 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*>::allocator<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >(std::allocator<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > > const&)
PUBLIC 6829a 0 std::allocator<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > > >(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > > > const&)
PUBLIC 682f2 0 bool __gnu_cxx::operator!=<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> > >(__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> > > const&, __gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> > > const&)
PUBLIC 6833c 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::operator[](unsigned long)
PUBLIC 6834e 0 void std::__fill<true>::fill<__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> > >, __gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*>(__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> > >, __gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> > >, __gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >* const&)
PUBLIC 68384 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*>::allocator(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> const&)
PUBLIC 6838a 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::_Vector_impl::_Vector_impl(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> const&)
PUBLIC 683be 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::swap(std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >&)
PUBLIC 68420 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::size() const
PUBLIC 68596 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::_Vector_base(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> const&)
PUBLIC 685a0 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::~_Vector_base()
PUBLIC 685b8 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::vector(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> const&)
PUBLIC 685c2 0 std::allocator<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >::allocator()
PUBLIC 685c8 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::capacity() const
PUBLIC 68688 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::_Vector_base(unsigned long, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> const&)
PUBLIC 686d0 0 TNodeEvent::CreateNodeEvent(unsigned long, TNodePtr const&, __CFArray const*)
PUBLIC 68724 0 TNodeEvent::CreateNodeEvent(unsigned long, TNodePtr const&, FSPermissionInfo*)
PUBLIC 68778 0 TNodeEvent::CreateNodeEvent(unsigned long, TNodePtr const&, __CFURL const*, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 687d6 0 TNodeEvent::CreateNodeEvent(unsigned long, TNodePtr const&, unsigned long, __CFDictionary const*, TCountedPtr<TNodeTask> const&, TCountedPtr<TNotifier> const&)
PUBLIC 6883a 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::vector(unsigned long, __gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >* const&, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> const&)
PUBLIC 6888c 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::~vector()
PUBLIC 688c2 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::_M_fill_insert(__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> > >, unsigned long, __gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >* const&)
PUBLIC 68bb4 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > >*> >::reserve(unsigned long)
PUBLIC 68d4c 0 TCountedPtr<TNodeRequest>::operator=(TCountedPtr<TNodeRequest> const&)
PUBLIC 68d90 0 std::pair<unsigned long long const, TCountedPtr<TNodeRequest> >::pair(std::pair<unsigned long long const, TCountedPtr<TNodeRequest> > const&)
PUBLIC 68e3c 0 std::pair<unsigned long long const, TCountedPtr<TNodeRequest> >::pair(unsigned long long const&, TCountedPtr<TNodeRequest> const&)
PUBLIC 691e6 0 TNetworkBrowserSynchronizer::~TNetworkBrowserSynchronizer()
PUBLIC 6921c 0 THFSPlusSynchronizer::~THFSPlusSynchronizer()
PUBLIC 69242 0 TNetworkBrowserSynchronizer::TNetworkBrowserSynchronizer(TNodePtr const&, __NWBrowser*)
PUBLIC 692f4 0 THFSPlusSynchronizer::THFSPlusSynchronizer(THFSPlusRef const&)
PUBLIC 693da 0 TSFLSynchronizer::TSFLSynchronizer(TNodePtr const&, OpaqueSFLRef*, bool)
PUBLIC 69518 0 TSFLSynchronizer::~TSFLSynchronizer()
PUBLIC 695a4 0 THFSPlusRef* std::__copy_backward<false, std::random_access_iterator_tag>::copy_b<THFSPlusRef*, THFSPlusRef*>(THFSPlusRef*, THFSPlusRef*, THFSPlusRef*)
PUBLIC 695ea 0 TSFLRecord** std::__copy_backward<true, std::random_access_iterator_tag>::copy_b<TSFLRecord*>(TSFLRecord* const*, TSFLRecord* const*, TSFLRecord**)
PUBLIC 6965e 0 THFSPlusRef::SetCatalogDataFetched() const
PUBLIC 69682 0 TMetaData::SetTypeIdentifierString(__CFString const*)
PUBLIC 696be 0 THFSPlusRef::SetNodeQueryFSName(HFSUniStr255 const&)
PUBLIC 696ec 0 THFSPlusRef::SetVirtualNodeName(__CFString const*)
PUBLIC 6973a 0 THFSPlusRef::SetVirtualProxyNode(HFSUniStr255 const&, bool, bool, bool, bool, bool)
PUBLIC 69810 0 THFSPlusRef::CanSetExtensionHidden() const
PUBLIC 69824 0 THFSPlusRef::ChangedUserAccess(FSPermissionInfo*) const
PUBLIC 69874 0 THFSPlusRef::InitializeType(unsigned long)
PUBLIC 69890 0 THFSPlusRef::InitializeCreator(unsigned long)
PUBLIC 698ac 0 THFSPlusRef::GetURLType(TUString)
PUBLIC 69b84 0 THFSPlusRef::ApplyClippingData(void const*, void const*, void*)
PUBLIC 69c84 0 THFSPlusRef::GetAliasType() const
PUBLIC 69d66 0 THFSPlusRef::THFSPlusRef(THFSPlusRef const&)
PUBLIC 6a2b6 0 THFSPlusRef::~THFSPlusRef()
PUBLIC 6a332 0 THFSPlusRef::AddClippingExtensionForType(HFSUniStr255 const&, unsigned long, HFSUniStr255&)
PUBLIC 6a486 0 TMetaData::SetHeapSizeData(HeapSizeData*)
PUBLIC 6a53a 0 THFSPlusRef::SetNamesForVirtualNode(HFSUniStr255 const&, HFSUniStr255 const&)
PUBLIC 6a646 0 THFSPlusRef::CreateFile(FSRef const&, HFSUniStr255 const&, NodeNameSyntaxHint const&, long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), bool)
PUBLIC 6a72c 0 THFSPlusRef::CreateLockFile(FSRef const&, HFSUniStr255 const&, NodeNameSyntaxHint const&, long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*))
PUBLIC 6a78e 0 THFSPlusRef::ResetFSRef(FSRef const&)
PUBLIC 6a7d2 0 THFSPlusRef::GetAliasInfo(bool&, __CFString const**, HFSUniStr255*) const
PUBLIC 6a8f4 0 THFSPlusRef::ApplyAccessRightsWithDictionary(__CFDictionary const*)
PUBLIC 6a980 0 THFSPlusRef::ReplaceAccessControlListWithDictionary(__CFDictionary const*)
PUBLIC 6aa0c 0 THFSPlusRef::RemoveUserFromAccessControlList(__CFUUID const*)
PUBLIC 6aa98 0 THFSPlusRef::ModifyAccessRightsWithDictionaries(__CFDictionary const*, __CFDictionary const*)
PUBLIC 6ab24 0 THFSPlusRef::ModifyAccessRightsForUser(__CFUUID const*, unsigned long long, unsigned long long)
PUBLIC 6abf6 0 THFSPlusRef::SetAccessRightsArray(__CFArray const*)
PUBLIC 6ac8a 0 THFSPlusRef::CreateUserAccessRightsArray(__CFArray const**) const
PUBLIC 6ad2c 0 THFSPlusRef::SetPermissionInfo(FSPermissionInfo const*, bool)
PUBLIC 6adfe 0 THFSPlusRef::AddClippingData(__CFDictionary const*)
PUBLIC 6af08 0 THFSPlusRef::CreateClipping(FSRef const&, HFSUniStr255 const&, NodeNameSyntaxHint const&, long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), unsigned long, __CFDictionary const*)
PUBLIC 6afa2 0 THFSPlusRef::CopyClippingDataFromFile(__CFDictionary const*&)
PUBLIC 6b1b4 0 THFSPlusRef::CopyDataAsURLFromResourceFork(__CFURL const**)
PUBLIC 6b3d2 0 THFSPlusRef::AddURLData(__CFURL const*)
PUBLIC 6b7ac 0 THFSPlusRef::CreateLocation(FSRef const&, HFSUniStr255 const&, NodeNameSyntaxHint const&, long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), __CFURL const*)
PUBLIC 6b8d4 0 THFSPlusRef::FollowAliasNoNetworkIO(THFSPlusRef&, unsigned char, unsigned char, unsigned char&) const
PUBLIC 6ba9c 0 THFSPlusRef::MoveRename(THFSPlusRef const&, HFSUniStr255 const&)
PUBLIC 6bb78 0 THFSPlusRef::SetArchitecturePreference(HFSUniStr255 const&)
PUBLIC 6bc80 0 THFSPlusRef::CopyPermissionInfo(FSPermissionInfo*) const
PUBLIC 6bd9c 0 THFSPlusRef::SetPermissions(unsigned long, bool)
PUBLIC 6be66 0 THFSPlusRef::SetUserGroupID(unsigned long, bool)
PUBLIC 6bf30 0 THFSPlusRef::SetOwnerID(unsigned long, bool)
PUBLIC 6bffa 0 THFSPlusRef::GetHasScriptingTerminology() const
PUBLIC 6c0ec 0 THFSPlusRef::ResetVolumeName()
PUBLIC 6c25a 0 TMetaData::GetClassicApplication(FSRef&) const
PUBLIC 6c344 0 TMetaData::FetchHeapSizeData() const
PUBLIC 6c4ee 0 TMetaData::GetHeapSizeData(HeapSizeData&) const
PUBLIC 6c53e 0 TMetaData::SetHeapSizeData(AppHeapSizes const&)
PUBLIC 6c74e 0 TMetaData::FetchFontVersion() const
PUBLIC 6c914 0 THFSPlusRef::SetHasCustomIcon(bool, bool)
PUBLIC 6c982 0 THFSPlusRef::SetIsAlias(bool, bool)
PUBLIC 6c9f0 0 THFSPlusRef::SetIsStationery(bool, bool)
PUBLIC 6ca70 0 THFSPlusRef::ReadUnbadgedIconRef(OpaqueIconRef*&) const
PUBLIC 6cb82 0 THFSPlusRef::SetIsPackage(bool, bool)
PUBLIC 6cbdc 0 THFSPlusRef::CopyDataAsURLFromDataFork(__CFURL const**)
PUBLIC 6ce6e 0 THFSPlusRef::CopyLocationDataFromFile(__CFURL const*&)
PUBLIC 6ced6 0 THFSPlusRef::SetTypeIdentifierString(__CFString const*)
PUBLIC 6cf06 0 THFSPlusRef::SetHeapSizeData(AppHeapSizes const&)
PUBLIC 6cf36 0 THFSPlusRef::FetchHeapSizeData() const
PUBLIC 6cf60 0 THFSPlusRef::GetHeapSizeData(HeapSizeData&) const
PUBLIC 6cf94 0 TMetaData::FetchKindStringData(bool) const
PUBLIC 6d13c 0 THFSPlusRef::SetIsExtensionHidden(bool, bool)
PUBLIC 6d23e 0 THFSPlusRef::SetIsLocked(bool, bool, bool)
PUBLIC 6d40a 0 THFSPlusRef::SetIsLocked(bool, bool)
PUBLIC 6d4a6 0 THFSPlusRef::Delete(bool, bool)
PUBLIC 6d61e 0 THFSPlusRef::SetAliasInfo(AliasRecord**&, OpaqueIconRef*, bool, unsigned long, bool)
PUBLIC 6d960 0 THFSPlusRef::SetServerAlias(AliasRecord**, FSRef const&, HFSUniStr255 const*, NodeNameSyntaxHint const&, long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*))
PUBLIC 6dab2 0 THFSPlusRef::SetAlias(FSRef const&, FSRef const&, HFSUniStr255 const*, NodeNameSyntaxHint const&, long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*))
PUBLIC 6dd96 0 THFSPlusRef::DeleteDeep(bool)
PUBLIC 6df36 0 THFSPlusRef::SetMDAttributeIfAppropriate(unsigned long, TPropertyInfo const*)
PUBLIC 6e0a8 0 TMetaData::GetCopyrightString(TUString&) const
PUBLIC 6e106 0 THFSPlusRef::GetCopyrightString(TUString&) const
PUBLIC 6e136 0 THFSPlusIterator::Reset()
PUBLIC 6e1c8 0 THFSPlusIterator::NextSingleInternal()
PUBLIC 6e28a 0 THFSPlusIterator::NextSingle(THFSPlusRef&)
PUBLIC 6e372 0 THFSPlusIterator::~THFSPlusIterator()
PUBLIC 6e3d6 0 THFSPlusIterator::RecoverFromDirectoryChange(HFSUniStr255, THFSPlusRef&)
PUBLIC 6e56a 0 StOpenResourceFork::StOpenResourceFork(FSRef, signed char)
PUBLIC 6e5ba 0 StOpenResourceFork::StOpenResourceFork(FSRef, signed char)
PUBLIC 6e5d4 0 StOpenResourceFork::~StOpenResourceFork()
PUBLIC 6e5ec 0 StOpenResourceFork::GetResource(unsigned long, short) const
PUBLIC 6e62a 0 StOpenResourceFork::AddResource(unsigned long, short, char**) const
PUBLIC 6e676 0 StOpenResourceFork::RemoveExistingResource(unsigned long, short)
PUBLIC 6e6dc 0 StOpenResourceFork::ChangedResource(char**) const
PUBLIC 6e6f8 0 StOpenResourceFork::Opened() const
PUBLIC 6e70a 0 StOpenResourceForkReadOnly::StOpenResourceForkReadOnly(FSRef, bool)
PUBLIC 6e76c 0 _ParentXNotifyTrashError
PUBLIC 6e800 0 _ParentXNotifyReportOperationError
PUBLIC 6e8c8 0 _ParentXNotifySetOperationCurrentTarget
PUBLIC 6e8fa 0 _ParentXNotifyFlushRootLock
PUBLIC 6ea1c 0 _ParentXNotifyGetTargetName
PUBLIC 6ea6e 0 _ParentXNotifyGetRequestedOperation
PUBLIC 6ea8a 0 _ParentXNotifyOperationSizerUpdate
PUBLIC 6eb3e 0 _ParentXNotifyOperationSetSizerData
PUBLIC 6ec16 0 _ParentXNotifyOperationStatus
PUBLIC 6ed24 0 _ParentXNotifyGetRootLock
PUBLIC 6edfc 0 _ParentXNotifyFlushLock
PUBLIC 6eef2 0 THFSPlusSizer::THFSPlusSizer(FSRef const&, TCountedPtr<TNodeTask> const&, TFolderSizeTask*)
PUBLIC 6efd2 0 THFSPlusSizer::THFSPlusSizer(FSRef const&, TCountedPtr<TNodeTask> const&, TFolderSizeTask*)
PUBLIC 6efdc 0 THFSPlusSizer::~THFSPlusSizer()
PUBLIC 6f006 0 std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*>::allocator<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >(std::allocator<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > > const&)
PUBLIC 6f05e 0 void std::__fill<true>::fill<__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> > >, __gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*>(__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> > >, __gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> > >, __gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >* const&)
PUBLIC 6f0c8 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::_Vector_impl::_Vector_impl(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> const&)
PUBLIC 6f144 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::_Vector_base(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> const&)
PUBLIC 6f14e 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::~_Vector_base()
PUBLIC 6f166 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::vector(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> const&)
PUBLIC 6f182 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::capacity() const
PUBLIC 6f1aa 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::size() const
PUBLIC 6f1d2 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::operator[](unsigned long)
PUBLIC 6f294 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::~vector()
PUBLIC 6f2ec 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::_M_fill_insert(__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> > >, unsigned long, __gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >* const&)
PUBLIC 6f576 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::reserve(unsigned long)
PUBLIC 6f74c 0 TClientQuery::TClientQuery(__CFString const*, __CFArray const*, unsigned long, __CFArray const*, long (*)(void const* const*, void const* const*, void*), NodeClientContext, long, unsigned long)
PUBLIC 6f808 0 TClientQuery::SetSortContext(NodeClientContext)
PUBLIC 6f864 0 TNodeQuery::CopyContentModificationDateForHitNode(TNodePtr const&) const
PUBLIC 6f906 0 TNodeQuery::HandleRemoveResult(TNode*, bool)
PUBLIC 6f9b8 0 TNodeQuery::HandleAddResult(TNode*, bool)
PUBLIC 6fa26 0 TNodeQuery::DidUpdateCallBack(__CFNotificationCenter*, void*, __CFString const*, void const*, __CFDictionary const*)
PUBLIC 6fc9a 0 TNodeQuery::CopyTypeIdentifierStringForHitNode(TNodePtr const&) const
PUBLIC 6fd3e 0 TNodeQuery::CopyLastUsedDateForHitNode(TNodePtr const&) const
PUBLIC 6fde0 0 QueryReleaseCallBack(void const*)
PUBLIC 6fe24 0 QueryRetainCallBack(void const*)
PUBLIC 6fe48 0 TNodeQuery::SetSortComparator(long (*)(void const* const*, void const* const*, void*), NodeClientContext)
PUBLIC 6fed6 0 TNodeQuery::TNodeQuery(TCountedPtr<TClientQuery> const&)
PUBLIC 700f8 0 TNodeQuery::HandleComparatorChanged(void*)
PUBLIC 7025a 0 std::vector<__CFString const*, std::allocator<__CFString const*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<__CFString const**, std::vector<__CFString const*, std::allocator<__CFString const*> > >, __CFString const* const&)
PUBLIC 703c2 0 TQueryTask::TQueryTask(TCountedPtr<TNodeQuery>)
PUBLIC 70416 0 TQueryTask::~TQueryTask()
PUBLIC 70452 0 TQueryTask::~TQueryTask()
PUBLIC 7045c 0 FSSetOperationCurrentTarget(unsigned long long, unsigned long long)
PUBLIC 70462 0 FSFlushLock(FSRef const&, OpaqueIconRef* const&)
PUBLIC 70468 0 FSGetRootLock(FSRef const&, unsigned long long&)
PUBLIC 70470 0 FSFlushRootLock(unsigned long long, FSRef const&, unsigned long long)
PUBLIC 70498 0 FSGetTargetName(unsigned long long, TFSInfo const&, HFSUniStr255&)
PUBLIC 704d0 0 FSGetRequestedOperation(unsigned long long)
PUBLIC 704da 0 FSFinalizeOperation()
PUBLIC 704e0 0 FSSetOwner()
PUBLIC 704e6 0 FSSizerCheckForCancel(unsigned long long)
PUBLIC 704ee 0 TFSCopyOperation::GetVolumeData(THFSPlusRef const&, short&, bool&)
PUBLIC 705ae 0 TFSCopyOperation::CopyPreflight(unsigned long long&, unsigned long long&, unsigned long long&)
PUBLIC 7088c 0 TFSCopyOperation::DeleteExisting(HFSUniStr255 const&)
PUBLIC 708f6 0 MoveToTrashName(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*)
PUBLIC 70a4e 0 TFSCopyOperation::GetTargetPropertyStore(THFSPlusRef&)
PUBLIC 70c1e 0 TFSCopyOperation::MoveProperties(THFSPlusExtendedPropertyIterator&, THFSPlusRef&, HFSUniStr255 const&)
PUBLIC 70c94 0 TFSCopyOperation::TFSCopyOperation(void const*, unsigned long, FSRef const*, FSRef const*, FSRef*, __CFString const*, unsigned long, void (*)(void const*, FSRef const*, long long, long long, long long, long long, unsigned long), long (*)(void const*, FSRef const*, FSRef const*, unsigned long, unsigned short const*, long, unsigned char), unsigned char (*)(void const*, FSRef const*, FSRef const*), void (*)(void const*, FSRef const*, FSRef const*, unsigned long, FSCatalogInfo const*), unsigned char (*)(void const*), unsigned char (*)(void const*, FSRef const*, HFSUniStr255 const*, unsigned long, FSCatalogInfo const*, FSRef const*, unsigned char*, FSRef*), unsigned long)
PUBLIC 70f9a 0 TFSCopyOperation::TFSCopyOperation(void const*, unsigned long, FSRef const*, FSRef const*, FSRef*, __CFString const*, unsigned long, void (*)(void const*, FSRef const*, long long, long long, long long, long long, unsigned long), long (*)(void const*, FSRef const*, FSRef const*, unsigned long, unsigned short const*, long, unsigned char), unsigned char (*)(void const*, FSRef const*, FSRef const*), void (*)(void const*, FSRef const*, FSRef const*, unsigned long, FSCatalogInfo const*), unsigned char (*)(void const*), unsigned char (*)(void const*, FSRef const*, HFSUniStr255 const*, unsigned long, FSCatalogInfo const*, FSRef const*, unsigned char*, FSRef*), unsigned long)
PUBLIC 70fa4 0 FSUpdateOperationStatus(void const*, FSRef const*, long long, long long, long long, long long, unsigned long)
PUBLIC 71036 0 FSSizerUpdate(unsigned long long, TFSInfo const&, long long, long long, long long, bool)
PUBLIC 71124 0 FSPreProcess(void const*, FSRef const*, FSRef const*)
PUBLIC 71158 0 FSPostProcess(void const*, FSRef const*, FSRef const*, unsigned long, FSCatalogInfo const*)
PUBLIC 71190 0 FSBackupPreProcess(void const*, FSRef const*, HFSUniStr255 const*, unsigned long, FSCatalogInfo const*, FSRef const*, unsigned char*, FSRef*)
PUBLIC 711e6 0 FSCancelOperationRequested(unsigned long long)
PUBLIC 71214 0 FSReportError(void const*, FSRef const*, FSRef const*, unsigned long, unsigned short const*, long, unsigned char)
PUBLIC 7126e 0 TFSCopyOperation::~TFSCopyOperation()
PUBLIC 712d6 0 TFSCopyOperation::~TFSCopyOperation()
PUBLIC 712e0 0 TFSCopyOperation::CopyToTarget()
PUBLIC 71636 0 GetHomeVRefNum()
PUBLIC 71710 0 GetVolumeLockedAndLocal(short, bool&, bool&)
PUBLIC 7185e 0 TrashForRef(FSRef const&, FSRef*)
PUBLIC 7194e 0 TFSCopyOperation::GetSourcePropertyStore(THFSPlusRef const&)
PUBLIC 71b1e 0 TFSCopyOperation::CopyExtendedProperties(THFSPlusRef const&, THFSPlusRef&, HFSUniStr255 const&)
PUBLIC 71c1e 0 TFSCopyOperation::CopyProperties(THFSPlusRef const&, THFSPlusRef&, HFSUniStr255 const&, bool)
PUBLIC 71d10 0 TFSCopyOperation::CopyCreateTarget(THFSPlusRef const&, THFSPlusRef&)
PUBLIC 7218a 0 TFSCopyOperation::DoCopy(THFSPlusRef const&)
PUBLIC 7242c 0 TFSCopyOperation::DoMove(THFSPlusRef const&)
PUBLIC 729a0 0 TFSCopyOperation::DoMoveToTrash(THFSPlusRef const&)
PUBLIC 72cc4 0 TFSCopyOperation::Run()
PUBLIC 72dd6 0 LockCreateFileUnicode(FSRef const&, HFSUniStr255 const&, NodeNameSyntaxHint const&, long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), unsigned long, FSCatalogInfo const*, FSRef*)
PUBLIC 72ef0 0 LockDeleteObject(FSRef const&)
PUBLIC 72f46 0 LockFSMoveAndRenameObject(FSRef const&, FSRef const&, unsigned long, unsigned short const*, unsigned long, FSRef*)
PUBLIC 72fb2 0 LockFSNewAlias(FSRef const&, FSRef const&, AliasRecord***)
PUBLIC 7300c 0 LockOpenFork(FSRef const&, unsigned long, unsigned short const*, signed char, short*)
PUBLIC 73076 0 LockCloseFork(short)
PUBLIC 730c4 0 LockSetObjectAccess(FSRef const&, long, long, long)
PUBLIC 73126 0 LockLSRegisterItem(FSRef const&)
PUBLIC 73178 0 LockLSUnregisterItem(FSRef const&)
PUBLIC 731c2 0 LockReadFork(short, unsigned short, long long, unsigned long, void*, unsigned long*)
PUBLIC 7324c 0 LockWriteFork(short, unsigned short, long long, unsigned long, void*, unsigned long*)
PUBLIC 732d6 0 LockCreateResFile(FSRef const&, HFSUniStr255 const&, NodeNameSyntaxHint const&, long (*)(HFSUniStr255 const*, HFSUniStr255 const*, NodeNameSyntaxHint, HFSUniStr255*), unsigned long, FSCatalogInfo const*, FSRef*)
PUBLIC 73408 0 LockCFURLCopyScheme(__CFURL const*)
PUBLIC 73452 0 LockCFURLCreateWithString(__CFAllocator const*, __CFString const*, __CFURL const*)
PUBLIC 734aa 0 LockCFURLGetString(__CFURL const*)
PUBLIC 734f4 0 LockSFLMoveItemInList(OpaqueSFLRef*, unsigned long, unsigned long)
PUBLIC 7354c 0 LockSFLRemoveItemFromList(OpaqueSFLRef*, unsigned long)
PUBLIC 7359c 0 LockSFLModifyItemFlags(OpaqueSFLRef*, unsigned long, unsigned long, unsigned long)
PUBLIC 735fa 0 ClientChangeNotifierReleaseCallBack(void const*)
PUBLIC 73604 0 ClientChangeNotifierRetainCallBack(void const*)
PUBLIC 73624 0 TNotifier::TNotifier(TCountedPtr<TClientChangeNotifier> const&, TNodePtr const&, TNodePtr const&)
PUBLIC 736de 0 std::allocator<TClientChangeNotifier*>::allocator(std::allocator<TClientChangeNotifier*> const&)
PUBLIC 73706 0 TClientChangeNotifier** std::__copy_backward<true, std::random_access_iterator_tag>::copy_b<TClientChangeNotifier*>(TClientChangeNotifier* const*, TClientChangeNotifier* const*, TClientChangeNotifier**)
PUBLIC 73736 0 bool __gnu_cxx::operator!=<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > >(__gnu_cxx::__normal_iterator<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > > const&, __gnu_cxx::__normal_iterator<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > > const&)
PUBLIC 7374c 0 bool __gnu_cxx::operator==<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > >(__gnu_cxx::__normal_iterator<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > > const&, __gnu_cxx::__normal_iterator<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > > const&)
PUBLIC 73774 0 void std::_Destroy<__gnu_cxx::__normal_iterator<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > >, std::allocator<TClientChangeNotifier*> >(__gnu_cxx::__normal_iterator<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > >, __gnu_cxx::__normal_iterator<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > >, std::allocator<TClientChangeNotifier*>)
PUBLIC 7397c 0 std::_Vector_base<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> >::_Vector_impl::_Vector_impl(std::allocator<TClientChangeNotifier*> const&)
PUBLIC 739b0 0 std::allocator<TClientChangeNotifier*>::allocator()
PUBLIC 739b6 0 std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> >::erase(__gnu_cxx::__normal_iterator<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > >, __gnu_cxx::__normal_iterator<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > >)
PUBLIC 73a44 0 std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> >::size() const
PUBLIC 73a6c 0 std::_Vector_base<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> >::_Vector_base(std::allocator<TClientChangeNotifier*> const&)
PUBLIC 73a76 0 std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> >::vector(std::allocator<TClientChangeNotifier*> const&)
PUBLIC 73aa2 0 std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<TClientChangeNotifier**, std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> > >, TClientChangeNotifier* const&)
PUBLIC 73c18 0 std::vector<TClientChangeNotifier*, std::allocator<TClientChangeNotifier*> >::push_back(TClientChangeNotifier* const&)
PUBLIC 73c9c 0 TCountedPtr<TNotifier>* std::__copy_backward<false, std::random_access_iterator_tag>::copy_b<TCountedPtr<TNotifier>*, TCountedPtr<TNotifier>*>(TCountedPtr<TNotifier>*, TCountedPtr<TNotifier>*, TCountedPtr<TNotifier>*)
PUBLIC 73cd6 0 VolumeUnmount
PUBLIC 73d26 0 NodeSortedStringIteratorFirst
PUBLIC 73d30 0 NodeSortedStringIteratorNext
PUBLIC 73d3a 0 NodeSortedNumberIteratorFirst
PUBLIC 73d44 0 NodeSortedNumberIteratorNext
PUBLIC 73d4e 0 GetNodeAsFSSpec
PUBLIC 73d56 0 GetFSSpecAsNode
PUBLIC 73d5e 0 GetNodeAsPathName
PUBLIC 73e04 0 AEDescToFSSpec
PUBLIC 73e0c 0 AEDescHasChildNew
PUBLIC 73e8c 0 GetNextTypedDataForIterator(TypedDataIterator const&, TypedDataRecord&)
PUBLIC 73ee0 0 FlushCatalogs
PUBLIC 73eea 0 NodeCreateNewAliasInNew
PUBLIC 73f66 0 NodeCreateNewLocationInNew
PUBLIC 73fe2 0 NodeCreateNewFileInNew
PUBLIC 74058 0 GetNodeAsPathNameNew
PUBLIC 74062 0 NodeEventGetActiveParent
PUBLIC 7406c 0 SetChildrenPermissions
PUBLIC 74076 0 SetNodePropertyAsByte
PUBLIC 740b2 0 SetNodePropertyAsOSType
PUBLIC 740e8 0 SetNodePropertyAsPoint
PUBLIC 7411e 0 SetNodePropertyAsDateTime
PUBLIC 74160 0 SetNodePropertyAsUTCDateTime
PUBLIC 74196 0 SetNodePropertyAsRGBColor
PUBLIC 741cc 0 NewNodeSortedStringIterator
PUBLIC 74242 0 NewNodeSortedNumberIterator
PUBLIC 742b8 0 SetNodePropertyAsInt64
PUBLIC 742fa 0 GetPathNameAsNode
PUBLIC 74354 0 GetNodePropertyAsRGBColor
PUBLIC 743bc 0 GetDataAsClipping(TNode*, TypedDataIterator*)
PUBLIC 74478 0 _NodeSetVirtualQueryPlus
PUBLIC 74568 0 GetNextClippingData(TypedDataIterator*, TypedDataRecord*)
PUBLIC 746ae 0 GetFirstClippingData(TypedDataIterator*, TypedDataRecord*)
PUBLIC 74724 0 DisposeDataIterator(TypedDataIterator*)
PUBLIC 74770 0 GetNodeDataAsClipping
PUBLIC 747d2 0 NodeSetAliasTarget
PUBLIC 74862 0 _NodeSyncSync
PUBLIC 748dc 0 DeleteNode
PUBLIC 74956 0 NodeCopyMDAttribute
PUBLIC 74a00 0 NodeGetDisplayAttributes
PUBLIC 74a86 0 NodeMapUserOrGroupIDToNameNew
PUBLIC 74b4a 0 NodeMapNameToUserOrGroupIDNew
PUBLIC 74bf0 0 GetFirstTypedDataForIterator(TypedDataIterator const&, TypedDataRecord&)
PUBLIC 74c44 0 NodeCreateNewClippingInNew
PUBLIC 74dd2 0 DisposeNodeSortedStringIterator
PUBLIC 74ddc 0 DisposeNodeSortedNumberIterator
PUBLIC 74de8 0 VirtualAliasRecord::VirtualAliasRecord(AliasRecord**, HFSUniStr255 const&, HFSUniStr255 const&, OpaqueIconRef*, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool)
PUBLIC 74f76 0 VirtualAliasRecord::VirtualAliasRecord(AliasRecord**, HFSUniStr255 const&, HFSUniStr255 const&, OpaqueIconRef*, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool)
PUBLIC 74fc2 0 VirtualAliasRecord::VirtualAliasRecord(__NWNode*, __NWBrowser*, HFSUniStr255 const&, OpaqueIconRef*, bool)
PUBLIC 75066 0 VirtualAliasRecord::~VirtualAliasRecord()
PUBLIC 750e4 0 TChildrenList::UnsubscribeWithKQueue()
PUBLIC 7512e 0 TChildrenList::DecrementSubscriptionCount()
PUBLIC 7514c 0 TChildrenList::GetDefaultSearchCount()
PUBLIC 75156 0 TChildrenList::GetDefaultSearch(unsigned long, TNodePtr&)
PUBLIC 752ae 0 TChildrenList::SubscribeWithKQueue()
PUBLIC 752fa 0 TChildrenList::FindDisplayName(HFSUniStr255 const&)
PUBLIC 753c6 0 TChildrenList::SetLastResizeDuration(double)
PUBLIC 75414 0 TChildrenList::IncrementSubscriptionCount()
PUBLIC 7545a 0 TChildrenList::TChildrenList(TNode const*)
PUBLIC 754aa 0 TChildrenList::~TChildrenList()
PUBLIC 75508 0 TChildrenList::SetSearchCount(long)
PUBLIC 7557c 0 TChildrenList::SetNodeQuery(TCountedPtr<TNodeQuery> const&)
PUBLIC 755fe 0 TChildrenList::SetQuery(TCountedPtr<TClientQuery> const&)
PUBLIC 7581e 0 TPermissionsRequest::TPermissionsRequest(OpaqueOperationRef*, unsigned long, __FSFileSecurity*)
PUBLIC 7584c 0 TPermissionsRequest::AddPtrReference()
PUBLIC 75860 0 TPermissionsOperation::ConvertACLToText(__FSFileSecurity*, long&) const
PUBLIC 758ea 0 TPermissionsOperation::PerformOperation(OperationRecord*)
PUBLIC 758f2 0 TPermissionsOperation::NeedsAuthentication(OperationRecord*)
PUBLIC 758fc 0 TPermissionsOperation::TransformOperations()
PUBLIC 75904 0 TPermissionsOperation::LogOperationName(OperationRecord*) const
PUBLIC 75916 0 TPermissionsOperation::ResolveConflict(OperationRecord*)
PUBLIC 75dd0 0 TPermissionsRequest::RemovePtrReference()
PUBLIC 75e0e 0 TPermissionsOperation::TPermissionsOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 75e5a 0 TPermissionsOperation::TPermissionsOperation(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 75e64 0 TPermissionsOperation::~TPermissionsOperation()
PUBLIC 75ea2 0 TPermissionsOperation::~TPermissionsOperation()
PUBLIC 75eac 0 TPermissionsOperation::~TPermissionsOperation()
PUBLIC 75ef2 0 TCountedPtr<TNodeEvent>::operator=(TCountedPtr<TNodeEvent> const&)
PUBLIC 75f30 0 TPermissionsOperation::GetSuboperation() const
PUBLIC 75f48 0 TPermissionsOperationTask::TPermissionsOperationTask(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 75fa4 0 TPermissionsOperationTask::TPermissionsOperationTask(OperationSelector const&, __CFString const*, __CFURL const*)
PUBLIC 75fae 0 TPermissionsOperationTask::~TPermissionsOperationTask()
PUBLIC 75fe6 0 TPermissionsOperationTask::~TPermissionsOperationTask()
PUBLIC 75ff0 0 TPermissionsOperationTask::~TPermissionsOperationTask()
PUBLIC 76030 0 TPermissionsOperationTask::HandlePermissionsRequest(TCountedPtr<TPermissionsRequest> const&)
PUBLIC 76072 0 TPermissionsOperationTask::TransformOperations()
PUBLIC 7607a 0 TPermissionsOperationTask::OperationTaskProcedure()
PUBLIC 761a0 0 TPermissionsOperationTask::RequestPermissionsOperation(TCountedPtr<TPermissionsRequest> const&)
PUBLIC 76214 0 TCountedPtr<TPermissionsRequest>::operator=(TCountedPtr<TPermissionsRequest> const&)
PUBLIC 76252 0 LocumParentDefs_server_routine
PUBLIC 7627a 0 _XNotifySetOperationCurrentTarget
PUBLIC 76332 0 _XNotifyGetRequestedOperation
PUBLIC 763ed 0 _XNotifyGetTargetName
PUBLIC 764cf 0 _XNotifyTrashError
PUBLIC 765ce 0 _XNotifyOperationStatus
PUBLIC 76774 0 _XNotifyGetRootLock
PUBLIC 76832 0 _XNotifyReportOperationError
PUBLIC 7697f 0 _XNotifyFlushLock
PUBLIC 76a3f 0 _XNotifyFlushRootLock
PUBLIC 76aff 0 _XNotifyOperationSizerUpdate
PUBLIC 76c5f 0 _XNotifyOperationSetSizerData
PUBLIC 76def 0 _ChildRunCopyMoveOperation
PUBLIC 76fbc 0 _ChildDeleteBackupOperation
PUBLIC 770d9 0 _ChildSecureEraseCancel
PUBLIC 77137 0 _ChildPermissionsOperation
PUBLIC 773dd 0 _ChildMove
PUBLIC 7765a 0 _ChildMoveRename
PUBLIC 778fa 0 _ChildCreateLock
PUBLIC 77b75 0 _ChildDelete
PUBLIC 77d50 0 _ChildCopyPermissions
PUBLIC 77f2b 0 _ChildRename
PUBLIC 7811d 0 _ChildLock
PUBLIC 782f8 0 TCopyQueue::TCopyQueue(OperationReporter*)
PUBLIC 783a8 0 TCopyQueue::SetCurrentTarget(unsigned long long)
PUBLIC 783da 0 TCopyQueue::ReportErrorFromUnprotectedContext(long, FSRef const&, FSRef const&, FSRef const&, unsigned long, unsigned short const*, bool)
PUBLIC 784dc 0 TCopyQueue::ShouldSkip(FSRef const&, HFSUniStr255 const&, unsigned long, FSCatalogInfo const&, FSRef const&, unsigned char&, FSRef*) const
PUBLIC 78554 0 TCopyQueue::DestinationSupportsSymlinks() const
PUBLIC 78568 0 TCopyQueue::DestinationSupportsLargeFiles() const
PUBLIC 7857c 0 TCopyQueue::DestinationSupportsPreAllocation() const
PUBLIC 78590 0 TCopyQueueItem::~TCopyQueueItem()
PUBLIC 785e8 0 TCopyQueue::~TCopyQueue()
PUBLIC 78772 0 TCopyErrorMonitor::TCopyErrorMonitor()
PUBLIC 787e4 0 TCopyItem::TCopyItem(TFSInfo const&, HFSUniStr255 const&, bool, bool, bool, bool, bool, bool, bool, bool, FSRef*)
PUBLIC 789b2 0 TCopyItem::~TCopyItem()
PUBLIC 78a62 0 TCopyItem::CheckBackupRightsFromPermset(_acl_permset*, unsigned char)
PUBLIC 78c5a 0 TCopyItem::CopySavedSecurityRefFromBackupSecurityRef(__FSFileSecurity*, bool)
PUBLIC 78e90 0 TCopyItem::SetSourceIsPackage(FSRef*)
PUBLIC 78f22 0 TCopyItem::CopySavedSecurityRefFromBackup() const
PUBLIC 78f4e 0 TCopyReader::ShouldSkip(TFSInfo const&, unsigned char&, FSRef*) const
PUBLIC 79098 0 TCopyReader::TCopyReader(TCopyQueue*, bool, bool, bool)
PUBLIC 791c0 0 TCopyReader::HandleError(long)
PUBLIC 79282 0 TCopyReader::~TCopyReader()
PUBLIC 79340 0 TCopyWriter::GetIconFileName()
PUBLIC 793d0 0 TCopyWriter::GetPropertyStoreName()
PUBLIC 79460 0 TCopyWriter::SetInterCopyDelayInSeconds(unsigned long)
PUBLIC 794e2 0 TCopyWriter::SetSuppressPropertyCopyForBackup()
PUBLIC 794f8 0 TCopyWriter::SetAppendProtectionForBackup()
PUBLIC 7950a 0 LinkObject(FSRef const*, FSRef const*, FSRef*)
PUBLIC 79604 0 TCopyWriter::ShouldExplicitlyCopyProperties()
PUBLIC 7961c 0 TCopyWriter::AddProtectionToPermSet(_acl_permset*, bool)
PUBLIC 796ca 0 TCopyWriter::CreateGuardACL(bool)
PUBLIC 797cc 0 TCopyWriter::AppendACEs(_acl*, _acl*)
PUBLIC 79842 0 TCopyWriter::CreateFileSecurityRefForBackupWithFinalDestRef(__FSFileSecurity*, unsigned char)
PUBLIC 798fc 0 TCopyWriter::SetLowPriorityForBackup()
PUBLIC 79964 0 TCopyWriter::GetCatalogInfoForSymlink(unsigned long&, FSCatalogInfo&) const
PUBLIC 79a7a 0 TCopyWriter::HandleFileSkip(unsigned long long const&)
PUBLIC 79bae 0 TCopyWriter::CopyUsingCopyFile()
PUBLIC 79d6e 0 TCopyWriter::SetVisibilityIfNeeded(FSRef const&)
PUBLIC 79e96 0 TCopyWriter::CopySymlinkFile(bool, unsigned long long)
PUBLIC 7a1e2 0 TCopyWriter::CopySymlinkFileAtRoot()
PUBLIC 7a2ec 0 std::allocator<std::pair<std::pair<unsigned int, int> const, FSRef> >::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> > >(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> > > const&)
PUBLIC 7a33a 0 TCopyItem** std::__copy_backward<true, std::random_access_iterator_tag>::copy_b<TCopyItem*>(TCopyItem* const*, TCopyItem* const*, TCopyItem**)
PUBLIC 7a444 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::operator[](unsigned long)
PUBLIC 7a468 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::swap(std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >&)
PUBLIC 7a4b8 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::size() const
PUBLIC 7a4e0 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::capacity() const
PUBLIC 7a60c 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::_Vector_impl::_Vector_impl(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> const&)
PUBLIC 7a640 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::_Vector_impl::~_Vector_impl()
PUBLIC 7a64a 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::_Vector_base(unsigned long, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> const&)
PUBLIC 7a728 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::_Vector_base(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> const&)
PUBLIC 7a732 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::vector(std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> const&)
PUBLIC 7a79e 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::_M_fill_insert(__gnu_cxx::__normal_iterator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >**, std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> > >, unsigned long, __gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >* const&)
PUBLIC 7aa80 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::reserve(unsigned long)
PUBLIC 7abcc 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, FSRef> >*> >::~vector()
PUBLIC 7af24 0 TOperationSizer::~TOperationSizer()
PUBLIC 7afa2 0 TOperationSizer::TOperationSizer(FSRef const&, long long, bool, unsigned long long, void (*)(unsigned long long, TFSInfo const&, long long, long long, long long, bool), bool (*)(unsigned long long), long long, long long, long long, long long, long long, long long, bool, bool, unsigned char (*)(FSRef const*, FSRef const*, unsigned char, HFSUniStr255 const*, unsigned long, FSCatalogInfo const*, void*), unsigned char (*)(void*), NodeClientContext*)
PUBLIC 7b1d2 0 TOperationSizer::TOperationSizer(FSRef const&, long long, bool, unsigned long long, void (*)(unsigned long long, TFSInfo const&, long long, long long, long long, bool), bool (*)(unsigned long long), long long, long long, long long, long long, long long, long long, bool, bool, unsigned char (*)(FSRef const*, FSRef const*, unsigned char, HFSUniStr255 const*, unsigned long, FSCatalogInfo const*, void*), unsigned char (*)(void*), NodeClientContext*)
PUBLIC 7b1ee 0 TPropertyValue::TPropertyValue(RGBColor const&)
PUBLIC 7b20c 0 TPropertyValue::TPropertyValue(TPropertyReference const&)
PUBLIC 7b342 0 TPropertyValue::TPropertyValue(unsigned char)
PUBLIC 7b356 0 TPropertyValue::TPropertyValue(unsigned long const&)
PUBLIC 7b36c 0 TPropertyValue::TPropertyValue(Point const&)
PUBLIC 7b382 0 TPropertyValue::TPropertyValue(UTCDateTime const&)
PUBLIC 7b39e 0 TPropertyValue::TPropertyValue(TUString const&)
PUBLIC 7b3fe 0 TOperationTimer::TOperationTimer(char const*)
PUBLIC 7b488 0 TOperationTimer::~TOperationTimer()
PUBLIC 7b610 0 TFSInfo::TFSInfo()
PUBLIC 7b6e0 0 TFSInfo::TFSInfo(TFSInfo const&)
PUBLIC 7b814 0 TFSInfo::~TFSInfo()
PUBLIC 7b858 0 TFSInfo::IsBusyApplication(FSRef const&)
PUBLIC 7b8c8 0 TFSInfo::TranslatePOSIXError(int)
PUBLIC 7bafc 0 TFSInfo::Unlink(FSRef const*)
PUBLIC 7bb42 0 TFSInfo::StripACLForCopy(_acl*, FSRef const&, bool, bool, bool)
PUBLIC 7bd36 0 TFSInfo::CreateStrippedFileSecurityRef(__CFAllocator const*, __FSFileSecurity*, FSRef const&, bool, bool, bool)
PUBLIC 7be0a 0 TReservationRecord::~TReservationRecord()
PUBLIC 7be22 0 TReservationRecord::TReservationRecord(FSRef const&, __FSReservation*)
PUBLIC 7be4e 0 TReservationRecord::CreateAndAcquireReservationRef(FSRef const&, unsigned long, __FSReservation*&)
PUBLIC 7beec 0 TFSIterator::Reset()
PUBLIC 7bf48 0 TFSIterator::NextSingle(TFSInfo&)
PUBLIC 7c09c 0 TFSInfo::CopySecurityRefForCopy(bool, bool, bool, FSRef const*, bool) const
PUBLIC 7c1f0 0 TFSInfo::CopyFinalFileSecurityRefForCopy(bool, bool, bool, FSRef const*, bool) const
PUBLIC 7c216 0 TFSInfo::CopySourceFileSecurityRefForCopy(bool, bool, bool) const
PUBLIC 7c252 0 TFSInfo::SetIsLocked(bool)
PUBLIC 7c2ae 0 TFSInfo::Delete(bool, bool)
PUBLIC 7c352 0 TFSIterator::RecoverFromDirectoryChange(HFSUniStr255, TFSInfo&)
PUBLIC 7c44a 0 TFSInfo::IsBusyApplication() const
PUBLIC 7c478 0 TFSInfo::DeleteDeep(bool, bool)
PUBLIC 7c5d4 0 TDeepFSIterator::TDeepFSIterator(TFSInfo const&, unsigned long, bool, bool, __gnu_cxx::hash_map<std::pair<unsigned int, int>, std::pair<unsigned int, int>, TINodeHasher, std::equal_to<std::pair<unsigned int, int> >, std::allocator<std::pair<unsigned int, int> > >*, std::stack<TReservationRecord*, std::deque<TReservationRecord*, std::allocator<TReservationRecord*> > >*, bool)
PUBLIC 7c6ae 0 TDeepFSIterator::~TDeepFSIterator()
PUBLIC 7c734 0 TFSInfo::CopyPermissions()
PUBLIC 7cc6e 0 TFSInfo::GetLogicalSize() const
PUBLIC 7cc88 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::back()
PUBLIC 7ccaa 0 TFSIterator** std::__copy_backward<true, std::random_access_iterator_tag>::copy_b<TFSIterator*>(TFSIterator* const*, TFSIterator* const*, TFSIterator**)
PUBLIC 7ccda 0 TReservationRecord*** std::__copy_backward<true, std::random_access_iterator_tag>::copy_b<TReservationRecord**>(TReservationRecord** const*, TReservationRecord** const*, TReservationRecord***)
PUBLIC 7cd2c 0 std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::swap(std::vector<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >&)
PUBLIC 7cdf2 0 std::_Vector_base<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*, std::allocator<__gnu_cxx::_Hashtable_node<std::pair<std::pair<unsigned int, int> const, std::pair<unsigned int, int> > >*> >::_Vector_impl::~_Vector_impl()
PUBLIC 7ce70 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_reallocate_map(unsigned long, bool)
PUBLIC 7cfec 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_reserve_map_at_back(unsigned long)
PUBLIC 7d02e 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_push_back_aux(TReservationRecord* const&)
PUBLIC 7d09a 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::push_back(TReservationRecord* const&)
PUBLIC 7d0de 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::_M_pop_back_aux()
PUBLIC 7d120 0 std::deque<TReservationRecord*, std::allocator<TReservationRecord*> >::pop_back()
PUBLIC 7d2b0 0 Deleter::StDeleter<TFSInfo>::~StDeleter()
PUBLIC 7d2dc 0 Deleter::StDeleter<TFSIterator>::~StDeleter()
PUBLIC 7d308 0 TUString::TUString(unsigned char const*)
PUBLIC 7d332 0 TUString::TUString(unsigned char const*)
PUBLIC 7d33c 0 TUString::GetCString(char*, long) const
PUBLIC 7d368 0 TUString::GetFilenameTimeFormatter()
PUBLIC 7d3f6 0 TUString::GetCurrentUTCTime(UTCDateTime&)
PUBLIC 7d412 0 TUString::TUString(__CFString const*, bool)
PUBLIC 7d4f4 0 TUString::FormatAsDateTimeString(UTCDateTime, TUString&, __CFDateFormatter*)
PUBLIC 7d616 0 TUString::Append(unsigned short)
PUBLIC 7d6e6 0 TUString::SetLength(unsigned long)
PUBLIC 7d754 0 TUString::TrimSuffix(TUString const&)
PUBLIC 7d7ca 0 TDSMutex::TDSMutex(bool)
PUBLIC 7d828 0 TDSMutex::TDSMutex(bool)
PUBLIC 7d832 0 Page::IsLeaf()
PUBLIC 7d83a 0 Page::EntryStoreSize(PageEntry*)
PUBLIC 7d848 0 Page::LessThan(void*, void*)
PUBLIC 7d86c 0 Page::Equal(void*, void*)
PUBLIC 7d890 0 Leaf::IsLeaf()
PUBLIC 7d89a 0 Page::InsertEntry(PageEntry*)
PUBLIC 7d8da 0 Page::ReplaceObj(PageEntry*, IAOrderedStorable*)
PUBLIC 7d936 0 Page::PushEntry(PageEntry*)
PUBLIC 7d970 0 Page::PopEntry(PageEntry*)
PUBLIC 7d9b2 0 PageCache::LessThan(void*, void*)
PUBLIC 7d9ce 0 PageCache::Equal(void*, void*)
PUBLIC 7d9ea 0 PageCache::ReportStats()
PUBLIC 7da66 0 Scroll::~Scroll()
PUBLIC 7dada 0 Scroll::~Scroll()
PUBLIC 7dae4 0 BTree::ReportStats()
PUBLIC 7dbcc 0 BTree::Count()
PUBLIC 7dbd8 0 BTree::TotalSize()
PUBLIC 7dbea 0 BTree::PositionEstimate(IAOrderedStorable const*)
PUBLIC 7dc9a 0 PageCache::~PageCache()
PUBLIC 7dd02 0 PageCache::~PageCache()
PUBLIC 7dd0c 0 PageCache::~PageCache()
PUBLIC 7dd7c 0 BTree::~BTree()
PUBLIC 7de30 0 PageCache::SetFinger(void*, void**)
PUBLIC 7deaa 0 Page::~Page()
PUBLIC 7deb4 0 Page::ShiftContentsLeft(Page*, PageEntry*, Page*, PageEntry*)
PUBLIC 7df7c 0 Scroll::Initialize(Page*, PageEntry*, Page*)
PUBLIC 7e102 0 BTree::BestTwoPagination()
PUBLIC 7e1f8 0 PageCache::AddMru(PageCacheEntry*)
PUBLIC 7e2ba 0 Page::RemoveEntryAtFinger(void**)
PUBLIC 7e354 0 Page::RemoveEntry(PageEntry*)
PUBLIC 7e38e 0 Page::EntryStore(PageEntry*, IAOutputBlock*)
PUBLIC 7e3c8 0 PageCache::MaybeWritePage(PageCacheEntry*)
PUBLIC 7e44e 0 PageCache::Purge()
PUBLIC 7e4fa 0 BTree::Purge()
PUBLIC 7e528 0 PageCache::WriteDirtyPages()
PUBLIC 7e560 0 PageCache::PurgeEntry(PageCacheEntry*)
PUBLIC 7e604 0 PageCache::PurgeLru(unsigned long)
PUBLIC 7e652 0 Page::EntryRestore(PageEntry*, IAOrderedStorable*, IAInputBlock*)
PUBLIC 7e6a6 0 Page::ShiftContentsRight(Page*, PageEntry*, Page*, PageEntry*)
PUBLIC 7e7ae 0 BTree::PaginateTwo(Page*, PageEntry*, Page*, Page*, unsigned long)
PUBLIC 7e82a 0 PageCache::Put(Page*, unsigned long, bool)
PUBLIC 7e898 0 PageCache::Get(unsigned long, unsigned long, bool)
PUBLIC 7e9ca 0 BTreeIterator::GetLockedPage(unsigned long, unsigned long)
PUBLIC 7ea52 0 BTree::DestroySubPage(unsigned long, unsigned long)
PUBLIC 7eaba 0 BTree::DestroyNonLeaf(Page*, unsigned long)
PUBLIC 7eb32 0 BTree::Destroy()
PUBLIC 7eb92 0 PageCache::Unlock(unsigned long, unsigned long, bool)
PUBLIC 7eca8 0 BTreeIterator::UnlockPage(unsigned long, unsigned long)
PUBLIC 7ed40 0 BTreeIterator::PushTo(Page*, IAOrderedStorable const*)
PUBLIC 7ee46 0 BTreeIterator::BTreeIterator(BTree*, IAOrderedStorable const*)
PUBLIC 7eea2 0 BTreeIterator::~BTreeIterator()
PUBLIC 7ef46 0 PageCache::Remove(unsigned long)
PUBLIC 7f01a 0 PageCache::Delete(unsigned long)
PUBLIC 7f046 0 BTree::MakeIterator(IAOrderedStorable const*)
PUBLIC 7f094 0 BTree::ShrinkTree()
PUBLIC 7f136 0 BTree::MergeTwo(Page*, PageEntry*, Page*, Page*, unsigned long)
PUBLIC 7f1e2 0 BTree::RebalanceTwo(Page*, PageEntry*, Page*, Page*, unsigned long)
PUBLIC 7f28e 0 BTree::SplitOne(Page*, Page*, unsigned long)
PUBLIC 7f338 0 BTree::GrowTree()
PUBLIC 7f446 0 BTree::Get(IAOrderedStorable const*)
PUBLIC 7f4f6 0 BTree::RebalanceNonRoot(Page*, Page*, PageEntry*, unsigned long)
PUBLIC 7f680 0 BTree::ReplaceWithPrevObj(Page*, PageEntry*, Page*, Page*, PageEntry*, unsigned long)
PUBLIC 7f76c 0 BTree::RemoveInternal(Page*, Page*, PageEntry*, IAOrderedStorable const*, unsigned long)
PUBLIC 7f926 0 BTree::Remove(IAOrderedStorable const*)
PUBLIC 7f966 0 PageCacheEntry::~PageCacheEntry()
PUBLIC 7f9be 0 PageCacheEntry::~PageCacheEntry()
PUBLIC 7f9c8 0 PageCacheEntry::~PageCacheEntry()
PUBLIC 7fa28 0 PageCache::PageCache(IAStorage*, IAStoreStream*, IAOrderedStorable*, unsigned long, unsigned long)
PUBLIC 7fa98 0 IteratorFrame::~IteratorFrame()
PUBLIC 7faf0 0 IteratorFrame::~IteratorFrame()
PUBLIC 7fafa 0 IAOrderedStorableIterator::~IAOrderedStorableIterator()
PUBLIC 7fb32 0 IAOrderedStorableIterator::~IAOrderedStorableIterator()
PUBLIC 7fb52 0 IAOrderedStorableIterator::~IAOrderedStorableIterator()
PUBLIC 7fb5c 0 Leaf::~Leaf()
PUBLIC 7fb7a 0 PageCacheEntry::PageCacheEntry(Page*, unsigned long)
PUBLIC 7fbc8 0 PageCacheEntry::PageCacheEntry(unsigned long)
PUBLIC 7fbfa 0 BuddyStorage::CopyBytes(unsigned long, unsigned long, unsigned long)
PUBLIC 7fcce 0 BuddyStorage::OldFreeSpace()
PUBLIC 7fd5a 0 BuddyStorage::newFreeSpace()
PUBLIC 7fde6 0 BuddyStorage::PrintFreeList()
PUBLIC 7fe86 0 BuddyStorage::~BuddyStorage()
PUBLIC 7ff38 0 BuddyStorage::~BuddyStorage()
PUBLIC 7ff42 0 BuddyStorage::TotalSpace()
PUBLIC 7ff56 0 BuddyStorage::Deallocate(unsigned long)
PUBLIC 8003c 0 BuddyStorage::TOC_Remove(char const*)
PUBLIC 800aa 0 BuddyStorage::FreeSpace()
PUBLIC 80124 0 BuddyStorage::CompactInternal(unsigned long)
PUBLIC 80348 0 BuddyStorage::Compact()
PUBLIC 8040c 0 AddressIdMap::AddressIdMap()
PUBLIC 80444 0 AddressIdMap::LessThan(void*, void*)
PUBLIC 8045a 0 AddressIdMap::Equal(void*, void*)
PUBLIC 80470 0 StringUInt32Map::~StringUInt32Map()
PUBLIC 80490 0 StringUInt32Map::~StringUInt32Map()
PUBLIC 8049a 0 AddressIdMap::~AddressIdMap()
PUBLIC 804ba 0 AddressIdMap::~AddressIdMap()
PUBLIC 804c4 0 AddressIdMap::~AddressIdMap()
PUBLIC 804fc 0 IAStorable::DeepCopying(IAStorable const*)
PUBLIC 80502 0 IAStorable::Restoring(IAInputBlock*, IAStorable const*)
PUBLIC 80508 0 IAOrderedStorableSet::ReportStats()
PUBLIC 8050e 0 IAOrderedStorableSet::~IAOrderedStorableSet()
PUBLIC 80542 0 IAOrderedStorableSet::~IAOrderedStorableSet()
PUBLIC 80560 0 IAOrderedStorableSet::~IAOrderedStorableSet()
PUBLIC 8056a 0 IAStorable::~IAStorable()
PUBLIC 8059e 0 IAStorable::~IAStorable()
PUBLIC 805a8 0 IAStorage::PrintFreeList()
PUBLIC 805ae 0 IAOutputBlock::IAOutputBlock(IAStorage*, unsigned long, unsigned long, IAStoreStream*)
PUBLIC 80614 0 IAInputBlock::IAInputBlock(IAStorage*, unsigned long, IAStoreStream*)
PUBLIC 80674 0 IAStorage::~IAStorage()
PUBLIC 806d2 0 IAStorage::~IAStorage()
PUBLIC 806dc 0 IAStoreStream::~IAStoreStream()
PUBLIC 8073e 0 IAStoreStream::~IAStoreStream()
PUBLIC 80748 0 IAStoreStream::ReadUInt64()
PUBLIC 8091c 0 IAStoreStream::WriteUInt64(unsigned long long)
PUBLIC 80a7c 0 IAException::~IAException()
PUBLIC 80a92 0 IADeleteOnUnwind::~IADeleteOnUnwind()
PUBLIC 80aac 0 IADeleteArrayOnUnwind::IADeleteArrayOnUnwind(void*)
PUBLIC 80aba 0 IADeleteArrayOnUnwind::~IADeleteArrayOnUnwind()
PUBLIC 80acc 0 IADeletePointerArrayOnUnwind::~IADeletePointerArrayOnUnwind()
PUBLIC 80b10 0 IAException::SetLocation(char const*)
PUBLIC 80b38 0 IAException::IAException(char const*)
PUBLIC 80b8c 0 IAException::IAException(char const*)
PUBLIC 80b96 0 IAException::~IAException()
PUBLIC 80bb4 0 IAException::what() const
PUBLIC 80bc0 0 IAException::What() const
PUBLIC 80bcc 0 IAException::GetLocation() const
PUBLIC 80bda 0 IAException::GetCode() const
PUBLIC 80be8 0 IAThrowException(IAException)
PUBLIC 80c34 0 IAStruct::~IAStruct()
PUBLIC 80c4a 0 _IAAssertionFunc(char const*, int, char const*, char const*, long)
PUBLIC 80cf2 0 IAException::IAException(IAException const&)
PUBLIC 80de4 0 SkipList::FingerEnd(void**)
PUBLIC 80e38 0 SkipList::LastNode()
PUBLIC 80e68 0 SkipList::PreviousNode(void*)
PUBLIC 80eee 0 SkipList::~SkipList()
PUBLIC 80f62 0 SkipList::~SkipList()
PUBLIC 80f6c 0 UInt32Set::LessThan(void*, void*)
PUBLIC 80f82 0 StringSet::~StringSet()
PUBLIC 80f8c 0 StringUInt32Map::Remove(char const*)
PUBLIC 80fb4 0 UInt32Set::~UInt32Set()
PUBLIC 80fd2 0 UInt32Set::~UInt32Set()
PUBLIC 80fdc 0 TFSCatalogInfo::ClearInvisibleBit()
PUBLIC 80fea 0 DumpWhichInfo
PUBLIC 812f4 0 FSPermissions::~FSPermissions()
PUBLIC 81310 0 TFSCatalogInfo::~TFSCatalogInfo()
PUBLIC 8132c 0 TPropertyInfo::Equal(IAOrderedStorable const*) const
PUBLIC 8138c 0 TPropertyStream::GetEOF()
PUBLIC 81398 0 TPropertyStream::SetEOF(unsigned long)
PUBLIC 8139e 0 TPropertyStream::Clone()
PUBLIC 813e6 0 TPropertyStream::WriteZeroes(long)
PUBLIC 8146c 0 TPropertyInfo::~TPropertyInfo()
PUBLIC 814cc 0 TPropertyInfo::TPropertyInfo(TPropertyInfo const&)
PUBLIC 8155c 0 TPropertyInfo::TPropertyInfo(HFSUniStr255 const&, unsigned long, TPropertyReference const&)
PUBLIC 81612 0 TPropertyInfo::TPropertyInfo(HFSUniStr255 const&, unsigned long)
PUBLIC 81688 0 TPropertyInfo::TPropertyInfo()
PUBLIC 81704 0 TPropertyStream::~TPropertyStream()
PUBLIC 81740 0 TPropertyInfoList::TPropertyInfoList()
PUBLIC 8177e 0 TPropertyInfoList::~TPropertyInfoList()
PUBLIC 81808 0 IAObject::~IAObject()
PUBLIC 81840 0 IAObject::~IAObject()
PUBLIC 81860 0 IAObject::~IAObject()
PUBLIC 8186a 0 IAStorable::~IAStorable()
PUBLIC 8188a 0 IAOrderedStorable::~IAOrderedStorable()
PUBLIC 818c2 0 IAOrderedStorable::~IAOrderedStorable()
PUBLIC 818e2 0 IAOrderedStorable::~IAOrderedStorable()
PUBLIC 818ec 0 FSCopyFormatNameForFSType
PUBLIC 82013 0 _FSCopyLocalizedNameForVolumeFormatAtURL
PUBLIC 837b0 0 kMinimumTickleDelta
PUBLIC 837b8 0 kMaximumTickleDelta
PUBLIC 837c0 0 kBasicBufferSize
PUBLIC 83850 0 kUTCBusyCreationDate
PUBLIC 83858 0 TPathName::kPOSIXPathNameSeparator
PUBLIC 838d0 0 kUTCBusyCreationDate
PUBLIC 83960 0 kUTCBusyCreationDate
PUBLIC 83ab0 0 TUString::FormatAsDateTimeString(UTCDateTime, TUString&, __CFDateFormatter*)::emptyDateTime
PUBLIC 83ab8 0 IACloneOSSetStoreStreams
PUBLIC 83aba 0 kUTCBusyCreationDate
PUBLIC 83b88 0 kMinimalRemoteIOChunkSize
PUBLIC 83b8c 0 kLocalIOChunkSize
PUBLIC 8b000 0 dyld__mach_header
PUBLIC 8b004 0 TNode::gMainRunloop
PUBLIC 8b008 0 TNode::gKQueue
PUBLIC 8b00c 0 TOperation::LogOperationName(OperationRecord*) const::name
PUBLIC 8b010 0 TTrashOperation::LogOperationName(OperationRecord*) const::name
PUBLIC 8b014 0 TCopyMoveOperation::LogOperationName(OperationRecord*) const::move
PUBLIC 8b018 0 TCopyMoveOperation::LogOperationName(OperationRecord*) const::forcemove
PUBLIC 8b01c 0 TCopyMoveOperation::LogOperationName(OperationRecord*) const::copy
PUBLIC 8b020 0 TCopyMoveOperation::LogOperationName(OperationRecord*) const::moveinsameparent
PUBLIC 8b024 0 TCopyMoveOperation::LogOperationName(OperationRecord*) const::generic
PUBLIC 8b028 0 TDeleteImmediatelyOperation::LogOperationName(OperationRecord*) const::name
PUBLIC 8b02c 0 TCopyPermissionsOperation::LogOperationName(OperationRecord*) const::name
PUBLIC 8b030 0 TDeleteBackupSnapShotOperation::LogOperationName(OperationRecord*) const::name
PUBLIC 8b034 0 TFSCopyOperation::gCopyExactPermissions
PUBLIC 8b038 0 TFSCopyOperation::DoCopy(THFSPlusRef const&)::copy
PUBLIC 8b03c 0 TFSCopyOperation::DoMove(THFSPlusRef const&)::move
PUBLIC 8b040 0 TFSCopyOperation::DoMoveToTrash(THFSPlusRef const&)::move
PUBLIC 8b044 0 TPermissionsOperation::LogOperationName(OperationRecord*) const::name
PUBLIC 8b4c0 0 kNodeAttributesArrayKey
PUBLIC 8b4c4 0 kNodeQueryFXScopeArrayKey
PUBLIC 8b4c8 0 kNodeQueryCriteriaDictKey
PUBLIC 8b4cc 0 kNodeQueryScopeArrayKey
PUBLIC 8b4d0 0 kNodeQueryStringKey
PUBLIC 8b4d4 0 kNodeQueryVersionStringKey
PUBLIC 8b9c0 0 _ParentXLocumParentDefs_subsystem
PUBLIC 8dd10 0 THFSPlusCatalog::gNoNetworkPropertyStores
PUBLIC 8dd11 0 THFSPlusCatalog::gPreferencesInitialized
PUBLIC 8dd14 0 THFSPlusCatalog::gMountedODSDisks
PUBLIC 8dd18 0 THFSPlusCatalog::gLastSavedID
PUBLIC 8dd20 0 THFSPlusCatalog::gLastSavedStore
PUBLIC 8dd24 0 TPropertyMonitor::gPropertyLock
PUBLIC 8dd28 0 TNode::gNWODSNodeMap
PUBLIC 8dd2c 0 TNode::gNWSidebarNodeMap
PUBLIC 8dd30 0 TNode::gNWNearbyNodeMap
PUBLIC 8dd34 0 TNode::fNetworkResolveTask
PUBLIC 8dd38 0 TNode::gKQueueRegistrationCount
PUBLIC 8dd3c 0 TNode::gHomeIsOnReadOnlyVolume
PUBLIC 8dd3e 0 TNode::gBootRefNum
PUBLIC 8dd40 0 TNode::gHomeVRefNum
PUBLIC 8dd42 0 TNode::gIsDiskMounted
PUBLIC 8dd44 0 TNode::gMemberName
PUBLIC 8dd48 0 TNode::gVolumesListRef
PUBLIC 8dd4c 0 TNode::gSavedSearchesListRef
PUBLIC 8dd50 0 TNode::gFavoritesListRef
PUBLIC 8dd54 0 TNode::gTrashNode
PUBLIC 8dd58 0 TNode::gSharedFoldersListRef
PUBLIC 8dd5c 0 TNode::gSlashVolumesNode
PUBLIC 8dd60 0 TNode::gSharedFoldersNode
PUBLIC 8dd64 0 TNode::gNetworkODSRootNode
PUBLIC 8dd68 0 TNode::gNetworkODSBrowserRef
PUBLIC 8dd6c 0 TNode::gNetworkODSNode
PUBLIC 8dd70 0 TNode::gNetworkSidebarRootNode
PUBLIC 8dd74 0 TNode::gNetworkSidebarBrowserRef
PUBLIC 8dd78 0 TNode::gNetworkSidebarNode
PUBLIC 8dd7c 0 TNode::gNetworkNearbyRootNode
PUBLIC 8dd80 0 TNode::gNetworkNearbyBrowserRef
PUBLIC 8dd84 0 TNode::gNetworkNearbyNode
PUBLIC 8dd88 0 TNode::giDiskNode
PUBLIC 8dd8c 0 TNode::gDesktopNode
PUBLIC 8dd90 0 TNode::gDownloadsNode
PUBLIC 8dd94 0 TNode::gPicturesNode
PUBLIC 8dd98 0 TNode::gMusicNode
PUBLIC 8dd9c 0 TNode::gMoviesNode
PUBLIC 8dda0 0 TNode::gDocumentsNode
PUBLIC 8dda4 0 TNode::gApplicationsNode
PUBLIC 8dda8 0 TNode::gSavedSearchesNode
PUBLIC 8ddac 0 TNode::gFavoritesNode
PUBLIC 8ddb0 0 TNode::gVolumesNode
PUBLIC 8ddb4 0 TNode::gHomeNode
PUBLIC 8ddb8 0 TNode::gRootNode
PUBLIC 8ddbc 0 TNode::gBootNode
PUBLIC 8ddc0 0 TiDiskMonitor::giDiskLock
PUBLIC 8ddc4 0 TNode::gPropertyRecordsArray
PUBLIC 8ddc8 0 TNode::gParentKeyName
PUBLIC 8ddcc 0 TNode::gFlags
PUBLIC 8ddd0 0 TNode::kCustomVolumeIconFileName
PUBLIC 8ddd4 0 TNode::kCustomIconFileName
PUBLIC 8ddd8 0 gPropertyStoreCalled
PUBLIC 8ddd9 0 gLocksInitialized
PUBLIC 8dddc 0 gRootPort
PUBLIC 8dde0 0 gInitialized
PUBLIC 8dde4 0 TMountPointList::gAllowRootStoreCreation
PUBLIC 8dde8 0 TNodeEvent::gInternalClientChangeNotifier
PUBLIC 8ddec 0 TNodeEvent::gInternalNotifier
PUBLIC 8ddf0 0 TNodeEvent::ginternalQueueCreated
PUBLIC 8ddf4 0 TNodeEvent::gInternalTickleProc
PUBLIC 8ddf8 0 TNodeEvent::gInternalEventQueue
PUBLIC 8ddfc 0 TTaskMonitor::gTaskLock
PUBLIC 8de00 0 TFSEventsNotificationTask::gFSEventsDisabled
PUBLIC 8de04 0 TFSEventsNotificationTask::gFSEventsLock
PUBLIC 8de08 0 TNodeSyncTask::gQueue
PUBLIC 8de0c 0 TNodeSyncTask::gSyncTask
PUBLIC 8de10 0 TNodeSyncTask::gSyncsAreCancelled
PUBLIC 8de11 0 TNodeSyncTask::gRequestSyncsCancelled
PUBLIC 8de12 0 TNodeSyncTask::gFlags
PUBLIC 8de14 0 TNodeOperationTask::gOperationCount
PUBLIC 8de18 0 TNodeOperationTask::sOperations
PUBLIC 8de20 0 TNodeTask::gTaskList
PUBLIC 8de28 0 TNodeRequest::gLatestRequestID
PUBLIC 8de30 0 THFSPlusRef::gUID
PUBLIC 8de34 0 THFSPlusRef::gIDsInited
PUBLIC 8de36 0 THFSPlusRef::gLength
PUBLIC 8de38 0 THFSPlusRef::gBootRefNum
PUBLIC 8de3c 0 TMetaData::gFontSuffix
PUBLIC 8de40 0 THFSPlusRef::kSavedSearchExtension
PUBLIC 8de44 0 THFSPlusRef::kBurnFolderExtension
PUBLIC 8de48 0 THFSPlusRef::kFrameworkExtension
PUBLIC 8de4c 0 THFSPlusRef::kInternetLocationExtension
PUBLIC 8de50 0 THFSPlusRef::kVNCInternetLocationExtension
PUBLIC 8de54 0 THFSPlusRef::kATInternetLocationExtension
PUBLIC 8de58 0 THFSPlusRef::kAFPInternetLocationExtension
PUBLIC 8de5c 0 THFSPlusRef::kNNTPInternetLocationExtension
PUBLIC 8de60 0 THFSPlusRef::kMailInternetLocationExtension
PUBLIC 8de64 0 THFSPlusRef::kFileInternetLocationExtension
PUBLIC 8de68 0 THFSPlusRef::kFTPInternetLocationExtension
PUBLIC 8de6c 0 THFSPlusRef::kHTTPInternetLocationExtension
PUBLIC 8de70 0 THFSPlusRef::kSoundClippingExtension
PUBLIC 8de74 0 THFSPlusRef::kTextClippingExtension
PUBLIC 8de78 0 THFSPlusRef::kPictureClippingExtension
PUBLIC 8de7c 0 THFSPlusRef::kClippingExtension
PUBLIC 8de80 0 THFSPlusRef::kURLKey
PUBLIC 8de84 0 TNodeMonitor::gNodeLock
PUBLIC 8de88 0 TFSCopyOperation::gTargetParentStore
PUBLIC 8de8c 0 TFSCopyOperation::gSourceParentStore
PUBLIC 8de90 0 TNotifier::gTickleLock
PUBLIC 8de94 0 TClientChangeNotifier::gClientNotifierList
PUBLIC 8de98 0 TChildrenList::gIteratorLock
PUBLIC 8de9c 0 TChildrenList::gFlags
PUBLIC 8dea0 0 TCopyQueue::gUsedBigBuffer
PUBLIC 8dea4 0 TCopyErrorMonitor::gCopyErrorLock
PUBLIC 8dea8 0 TCopyWriter::gInterCopyDelay
PUBLIC 8deac 0 TCopyWriter::gPropertyStoreName
PUBLIC 8deb0 0 TCopyWriter::gIconFileName
PUBLIC 8deb4 0 TCopyWriter::gCopyToBackup
PUBLIC 8deb8 0 gDiagnosticLoggingFlags
PUBLIC 8dec0 0 gDiagnosticsInitialized
PUBLIC 8dec4 0 TFSInfo::gFlags
PUBLIC 8dec8 0 TFSInfo::gResourceForkName
PUBLIC 8decc 0 TFSInfo::gDataForkName
PUBLIC 8ded0 0 TPropertyInfo::gPropertyStoreName
PUBLIC 8dee0 0 THFSPlusCatalog::GetVolumeFormatString() const::format
PUBLIC 8dee4 0 TNode::GetVolumeFormatString(TPropertyReference&) const::unknownFormat
PUBLIC 8dee8 0 TNode::DoExternalRegistration(TCountedPtr<TNotifier> const&)::gFNSubscriptionUPP
PUBLIC 8deec 0 TNode::AsFullPOSIXPath(unsigned long, unsigned long&, unsigned short*&) const::bootVRefNum
PUBLIC 8def0 0 TNode::GetSavedSearchNode(TUString const&)::finderBundle
PUBLIC 8def4 0 TNode::HandleChange(char*)::dev
PUBLIC 8def8 0 TNodeEvent::GetInternalClientNotifier()::internalNotifierLock
PUBLIC 8defc 0 TNodeTask::GetTaskList()::internalNotifierLock
PUBLIC 8df00 0 THFSPlusRef::GetURLType(TUString)::kvncUrlString
PUBLIC 8df04 0 THFSPlusRef::GetURLType(TUString)::katUrlString
PUBLIC 8df08 0 THFSPlusRef::GetURLType(TUString)::kafpUrlString
PUBLIC 8df0c 0 THFSPlusRef::GetURLType(TUString)::knewsUrlString
PUBLIC 8df10 0 THFSPlusRef::GetURLType(TUString)::kmailtoUrlString
PUBLIC 8df14 0 THFSPlusRef::GetURLType(TUString)::kfiletoUrlString
PUBLIC 8df18 0 THFSPlusRef::GetURLType(TUString)::kftpUrlString
PUBLIC 8df1c 0 THFSPlusRef::GetURLType(TUString)::khttpsUrlString
PUBLIC 8df20 0 THFSPlusRef::GetURLType(TUString)::khttpUrlString
PUBLIC 8df24 0 THFSPlusRef::GetArchitecturesSupported(unsigned long&, bool) const::generation
PUBLIC 8df28 0 THFSPlusRef::GetArchitecturePreference(HFSUniStr255&, bool) const::generation
PUBLIC 8df2c 0 THFSPlusSizer::Sizing(TFSInfo const&)::lastID
PUBLIC 8df40 0 gLastVolumeLocal
PUBLIC 8df41 0 gLastVolumeLocked
PUBLIC 8df42 0 gLastVRefNum
PUBLIC 8df44 0 gHomeVRefNum
PUBLIC 8df46 0 TFSCopyOperation::GetTargetPropertyStore(THFSPlusRef&)::inited
PUBLIC 8df60 0 TFSCopyOperation::GetTargetPropertyStore(THFSPlusRef&)::oldTargetParentRef
PUBLIC 8dfb0 0 TFSCopyOperation::GetSourcePropertyStore(THFSPlusRef const&)::inited
PUBLIC 8dfc0 0 TFSCopyOperation::GetSourcePropertyStore(THFSPlusRef const&)::oldSourceParentRef
PUBLIC 8e010 0 TNotifier::GetTickleLock()::internalNotifierLock
PUBLIC 8e014 0 TClientChangeNotifier::GetClientNotifierList()::internalNotifierLock
PUBLIC 8e018 0 TCopyQueue::GetCopyBufferSize()::machineBufferSize
PUBLIC 8e020 0 TCopyItem::CopySavedSecurityRefFromBackupSecurityRef(__FSFileSecurity*, bool)::everybodyUUIDValid
PUBLIC 8e021 0 TCopyItem::CopySavedSecurityRefFromBackupSecurityRef(__FSFileSecurity*, bool)::everybodyUUID
PUBLIC 8e031 0 TCopyWriter::SetInterCopyDelayInSeconds(unsigned long)::isMirrorAgent
PUBLIC 8e032 0 TCopyWriter::SetInterCopyDelayInSeconds(unsigned long)::checkedFirstTime
PUBLIC 8e033 0 TCopyWriter::CreateGuardACL(bool)::everybodyUUIDValid
PUBLIC 8e034 0 TCopyWriter::CreateGuardACL(bool)::everybodyUUID
PUBLIC 8e044 0 TFSInfo::GetName() const::length
PUBLIC 8e046 0 TFSInfo::StripACLForCopy(_acl*, FSRef const&, bool, bool, bool)::everybodyUUIDValid
PUBLIC 8e047 0 TFSInfo::StripACLForCopy(_acl*, FSRef const&, bool, bool, bool)::everybodyUUID
PUBLIC 8e05a 0 TFSInfo::GetDisplayName() const::length
PUBLIC 8e05c 0 TFSInfo::IsTrash() const::trashesName
PUBLIC 8e060 0 TFSInfo::IsTrash() const::trashName
PUBLIC 8e064 0 TUString::GetFilenameTimeFormatter()::filenameDateFormatter
PUBLIC 8e068 0 TUString::GetFilenameTimeFormatter()::flags
PUBLIC 8e06c 0 ConvertUniCharsToDecomposed(unsigned long, unsigned short*, unsigned long, unsigned long*, unsigned short*)::textinfo
PUBLIC 8e070 0 __FSLocalizedNameTable
PUBLIC 8e074 0 __FSLocalizedNameTableLock
PUBLIC 8e078 0 unknownTypeString.19076
PUBLIC 8e07c 0 searchPaths.19040
